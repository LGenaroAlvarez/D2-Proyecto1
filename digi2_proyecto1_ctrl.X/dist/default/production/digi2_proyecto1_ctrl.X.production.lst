

Microchip MPLAB XC8 Assembler V2.35 build 20211206165544 
                                                                                               Fri Sep 30 12:09:52 2022

Microchip MPLAB XC8 C Compiler v2.35 (Free license) build 20211206165544 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	maintext,global,class=CODE,split=1,delta=2
    17                           	psect	text1,local,class=CODE,merge=1,delta=2
    18                           	psect	text2,local,class=CODE,merge=1,delta=2
    19                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text4,local,class=CODE,merge=1,delta=2,group=3
    21                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text8,local,class=CODE,merge=1,delta=2
    25                           	psect	text9,local,class=CODE,merge=1,delta=2
    26                           	psect	text10,local,class=CODE,merge=1,delta=2
    27                           	psect	text11,local,class=CODE,merge=1,delta=2
    28                           	psect	text12,local,class=CODE,merge=1,delta=2
    29                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text14,local,class=CODE,merge=1,delta=2
    31                           	psect	text15,local,class=CODE,merge=1,delta=2
    32                           	psect	text16,local,class=CODE,merge=1,delta=2
    33                           	psect	text17,local,class=CODE,merge=1,delta=2
    34                           	psect	text18,local,class=CODE,merge=1,delta=2
    35                           	psect	text19,local,class=CODE,merge=1,delta=2
    36                           	psect	text20,local,class=CODE,merge=1,delta=2
    37                           	psect	text21,local,class=CODE,merge=1,delta=2
    38                           	psect	text22,local,class=CODE,merge=1,delta=2
    39                           	psect	text23,local,class=CODE,merge=1,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text29,local,class=CODE,merge=1,delta=2
    46                           	psect	intentry,global,class=CODE,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    59                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    60                           	dabs	1,0x7E,2
    61  0000                     
    62                           ; Version 2.40
    63                           ; Generated 17/11/2021 GMT
    64                           ; 
    65                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    66                           ; All rights reserved.
    67                           ; 
    68                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    69                           ; 
    70                           ; Redistribution and use in source and binary forms, with or without modification, are
    71                           ; permitted provided that the following conditions are met:
    72                           ; 
    73                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    74                           ;        conditions and the following disclaimer.
    75                           ; 
    76                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    77                           ;        of conditions and the following disclaimer in the documentation and/or other
    78                           ;        materials provided with the distribution. Publication is not required when
    79                           ;        this file is used in an embedded application.
    80                           ; 
    81                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    82                           ;        software without specific prior written permission.
    83                           ; 
    84                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    85                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    86                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    87                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    88                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    89                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    90                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    91                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    92                           ; 
    93                           ; 
    94                           ; Code-generator required, PIC16F887 Definitions
    95                           ; 
    96                           ; SFR Addresses
    97  0000                     	;# 
    98  0001                     	;# 
    99  0002                     	;# 
   100  0003                     	;# 
   101  0004                     	;# 
   102  0005                     	;# 
   103  0006                     	;# 
   104  0007                     	;# 
   105  0008                     	;# 
   106  0009                     	;# 
   107  000A                     	;# 
   108  000B                     	;# 
   109  000C                     	;# 
   110  000D                     	;# 
   111  000E                     	;# 
   112  000E                     	;# 
   113  000F                     	;# 
   114  0010                     	;# 
   115  0011                     	;# 
   116  0012                     	;# 
   117  0013                     	;# 
   118  0014                     	;# 
   119  0015                     	;# 
   120  0015                     	;# 
   121  0016                     	;# 
   122  0017                     	;# 
   123  0018                     	;# 
   124  0019                     	;# 
   125  001A                     	;# 
   126  001B                     	;# 
   127  001B                     	;# 
   128  001C                     	;# 
   129  001D                     	;# 
   130  001E                     	;# 
   131  001F                     	;# 
   132  0081                     	;# 
   133  0085                     	;# 
   134  0086                     	;# 
   135  0087                     	;# 
   136  0088                     	;# 
   137  0089                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  008F                     	;# 
   142  0090                     	;# 
   143  0091                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0093                     	;# 
   147  0093                     	;# 
   148  0094                     	;# 
   149  0095                     	;# 
   150  0096                     	;# 
   151  0097                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009A                     	;# 
   155  009B                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  0105                     	;# 
   161  0107                     	;# 
   162  0108                     	;# 
   163  0109                     	;# 
   164  010C                     	;# 
   165  010C                     	;# 
   166  010D                     	;# 
   167  010E                     	;# 
   168  010F                     	;# 
   169  0185                     	;# 
   170  0187                     	;# 
   171  0188                     	;# 
   172  0189                     	;# 
   173  018C                     	;# 
   174  018D                     	;# 
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  000E                     	;# 
   191  000F                     	;# 
   192  0010                     	;# 
   193  0011                     	;# 
   194  0012                     	;# 
   195  0013                     	;# 
   196  0014                     	;# 
   197  0015                     	;# 
   198  0015                     	;# 
   199  0016                     	;# 
   200  0017                     	;# 
   201  0018                     	;# 
   202  0019                     	;# 
   203  001A                     	;# 
   204  001B                     	;# 
   205  001B                     	;# 
   206  001C                     	;# 
   207  001D                     	;# 
   208  001E                     	;# 
   209  001F                     	;# 
   210  0081                     	;# 
   211  0085                     	;# 
   212  0086                     	;# 
   213  0087                     	;# 
   214  0088                     	;# 
   215  0089                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  008F                     	;# 
   220  0090                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0093                     	;# 
   225  0093                     	;# 
   226  0094                     	;# 
   227  0095                     	;# 
   228  0096                     	;# 
   229  0097                     	;# 
   230  0098                     	;# 
   231  0099                     	;# 
   232  009A                     	;# 
   233  009B                     	;# 
   234  009C                     	;# 
   235  009D                     	;# 
   236  009E                     	;# 
   237  009F                     	;# 
   238  0105                     	;# 
   239  0107                     	;# 
   240  0108                     	;# 
   241  0109                     	;# 
   242  010C                     	;# 
   243  010C                     	;# 
   244  010D                     	;# 
   245  010E                     	;# 
   246  010F                     	;# 
   247  0185                     	;# 
   248  0187                     	;# 
   249  0188                     	;# 
   250  0189                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  0000                     	;# 
   254  0001                     	;# 
   255  0002                     	;# 
   256  0003                     	;# 
   257  0004                     	;# 
   258  0005                     	;# 
   259  0006                     	;# 
   260  0007                     	;# 
   261  0008                     	;# 
   262  0009                     	;# 
   263  000A                     	;# 
   264  000B                     	;# 
   265  000C                     	;# 
   266  000D                     	;# 
   267  000E                     	;# 
   268  000E                     	;# 
   269  000F                     	;# 
   270  0010                     	;# 
   271  0011                     	;# 
   272  0012                     	;# 
   273  0013                     	;# 
   274  0014                     	;# 
   275  0015                     	;# 
   276  0015                     	;# 
   277  0016                     	;# 
   278  0017                     	;# 
   279  0018                     	;# 
   280  0019                     	;# 
   281  001A                     	;# 
   282  001B                     	;# 
   283  001B                     	;# 
   284  001C                     	;# 
   285  001D                     	;# 
   286  001E                     	;# 
   287  001F                     	;# 
   288  0081                     	;# 
   289  0085                     	;# 
   290  0086                     	;# 
   291  0087                     	;# 
   292  0088                     	;# 
   293  0089                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  008F                     	;# 
   298  0090                     	;# 
   299  0091                     	;# 
   300  0092                     	;# 
   301  0093                     	;# 
   302  0093                     	;# 
   303  0093                     	;# 
   304  0094                     	;# 
   305  0095                     	;# 
   306  0096                     	;# 
   307  0097                     	;# 
   308  0098                     	;# 
   309  0099                     	;# 
   310  009A                     	;# 
   311  009B                     	;# 
   312  009C                     	;# 
   313  009D                     	;# 
   314  009E                     	;# 
   315  009F                     	;# 
   316  0105                     	;# 
   317  0107                     	;# 
   318  0108                     	;# 
   319  0109                     	;# 
   320  010C                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  010F                     	;# 
   325  0185                     	;# 
   326  0187                     	;# 
   327  0188                     	;# 
   328  0189                     	;# 
   329  018C                     	;# 
   330  018D                     	;# 
   331  0000                     	;# 
   332  0001                     	;# 
   333  0002                     	;# 
   334  0003                     	;# 
   335  0004                     	;# 
   336  0005                     	;# 
   337  0006                     	;# 
   338  0007                     	;# 
   339  0008                     	;# 
   340  0009                     	;# 
   341  000A                     	;# 
   342  000B                     	;# 
   343  000C                     	;# 
   344  000D                     	;# 
   345  000E                     	;# 
   346  000E                     	;# 
   347  000F                     	;# 
   348  0010                     	;# 
   349  0011                     	;# 
   350  0012                     	;# 
   351  0013                     	;# 
   352  0014                     	;# 
   353  0015                     	;# 
   354  0015                     	;# 
   355  0016                     	;# 
   356  0017                     	;# 
   357  0018                     	;# 
   358  0019                     	;# 
   359  001A                     	;# 
   360  001B                     	;# 
   361  001B                     	;# 
   362  001C                     	;# 
   363  001D                     	;# 
   364  001E                     	;# 
   365  001F                     	;# 
   366  0081                     	;# 
   367  0085                     	;# 
   368  0086                     	;# 
   369  0087                     	;# 
   370  0088                     	;# 
   371  0089                     	;# 
   372  008C                     	;# 
   373  008D                     	;# 
   374  008E                     	;# 
   375  008F                     	;# 
   376  0090                     	;# 
   377  0091                     	;# 
   378  0092                     	;# 
   379  0093                     	;# 
   380  0093                     	;# 
   381  0093                     	;# 
   382  0094                     	;# 
   383  0095                     	;# 
   384  0096                     	;# 
   385  0097                     	;# 
   386  0098                     	;# 
   387  0099                     	;# 
   388  009A                     	;# 
   389  009B                     	;# 
   390  009C                     	;# 
   391  009D                     	;# 
   392  009E                     	;# 
   393  009F                     	;# 
   394  0105                     	;# 
   395  0107                     	;# 
   396  0108                     	;# 
   397  0109                     	;# 
   398  010C                     	;# 
   399  010C                     	;# 
   400  010D                     	;# 
   401  010E                     	;# 
   402  010F                     	;# 
   403  0185                     	;# 
   404  0187                     	;# 
   405  0188                     	;# 
   406  0189                     	;# 
   407  018C                     	;# 
   408  018D                     	;# 
   409  0000                     	;# 
   410  0001                     	;# 
   411  0002                     	;# 
   412  0003                     	;# 
   413  0004                     	;# 
   414  0005                     	;# 
   415  0006                     	;# 
   416  0007                     	;# 
   417  0008                     	;# 
   418  0009                     	;# 
   419  000A                     	;# 
   420  000B                     	;# 
   421  000C                     	;# 
   422  000D                     	;# 
   423  000E                     	;# 
   424  000E                     	;# 
   425  000F                     	;# 
   426  0010                     	;# 
   427  0011                     	;# 
   428  0012                     	;# 
   429  0013                     	;# 
   430  0014                     	;# 
   431  0015                     	;# 
   432  0015                     	;# 
   433  0016                     	;# 
   434  0017                     	;# 
   435  0018                     	;# 
   436  0019                     	;# 
   437  001A                     	;# 
   438  001B                     	;# 
   439  001B                     	;# 
   440  001C                     	;# 
   441  001D                     	;# 
   442  001E                     	;# 
   443  001F                     	;# 
   444  0081                     	;# 
   445  0085                     	;# 
   446  0086                     	;# 
   447  0087                     	;# 
   448  0088                     	;# 
   449  0089                     	;# 
   450  008C                     	;# 
   451  008D                     	;# 
   452  008E                     	;# 
   453  008F                     	;# 
   454  0090                     	;# 
   455  0091                     	;# 
   456  0092                     	;# 
   457  0093                     	;# 
   458  0093                     	;# 
   459  0093                     	;# 
   460  0094                     	;# 
   461  0095                     	;# 
   462  0096                     	;# 
   463  0097                     	;# 
   464  0098                     	;# 
   465  0099                     	;# 
   466  009A                     	;# 
   467  009B                     	;# 
   468  009C                     	;# 
   469  009D                     	;# 
   470  009E                     	;# 
   471  009F                     	;# 
   472  0105                     	;# 
   473  0107                     	;# 
   474  0108                     	;# 
   475  0109                     	;# 
   476  010C                     	;# 
   477  010C                     	;# 
   478  010D                     	;# 
   479  010E                     	;# 
   480  010F                     	;# 
   481  0185                     	;# 
   482  0187                     	;# 
   483  0188                     	;# 
   484  0189                     	;# 
   485  018C                     	;# 
   486  018D                     	;# 
   487  0000                     	;# 
   488  0001                     	;# 
   489  0002                     	;# 
   490  0003                     	;# 
   491  0004                     	;# 
   492  0005                     	;# 
   493  0006                     	;# 
   494  0007                     	;# 
   495  0008                     	;# 
   496  0009                     	;# 
   497  000A                     	;# 
   498  000B                     	;# 
   499  000C                     	;# 
   500  000D                     	;# 
   501  000E                     	;# 
   502  000E                     	;# 
   503  000F                     	;# 
   504  0010                     	;# 
   505  0011                     	;# 
   506  0012                     	;# 
   507  0013                     	;# 
   508  0014                     	;# 
   509  0015                     	;# 
   510  0015                     	;# 
   511  0016                     	;# 
   512  0017                     	;# 
   513  0018                     	;# 
   514  0019                     	;# 
   515  001A                     	;# 
   516  001B                     	;# 
   517  001B                     	;# 
   518  001C                     	;# 
   519  001D                     	;# 
   520  001E                     	;# 
   521  001F                     	;# 
   522  0081                     	;# 
   523  0085                     	;# 
   524  0086                     	;# 
   525  0087                     	;# 
   526  0088                     	;# 
   527  0089                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  008F                     	;# 
   532  0090                     	;# 
   533  0091                     	;# 
   534  0092                     	;# 
   535  0093                     	;# 
   536  0093                     	;# 
   537  0093                     	;# 
   538  0094                     	;# 
   539  0095                     	;# 
   540  0096                     	;# 
   541  0097                     	;# 
   542  0098                     	;# 
   543  0099                     	;# 
   544  009A                     	;# 
   545  009B                     	;# 
   546  009C                     	;# 
   547  009D                     	;# 
   548  009E                     	;# 
   549  009F                     	;# 
   550  0105                     	;# 
   551  0107                     	;# 
   552  0108                     	;# 
   553  0109                     	;# 
   554  010C                     	;# 
   555  010C                     	;# 
   556  010D                     	;# 
   557  010E                     	;# 
   558  010F                     	;# 
   559  0185                     	;# 
   560  0187                     	;# 
   561  0188                     	;# 
   562  0189                     	;# 
   563  018C                     	;# 
   564  018D                     	;# 
   565  0000                     	;# 
   566  0001                     	;# 
   567  0002                     	;# 
   568  0003                     	;# 
   569  0004                     	;# 
   570  0005                     	;# 
   571  0006                     	;# 
   572  0007                     	;# 
   573  0008                     	;# 
   574  0009                     	;# 
   575  000A                     	;# 
   576  000B                     	;# 
   577  000C                     	;# 
   578  000D                     	;# 
   579  000E                     	;# 
   580  000E                     	;# 
   581  000F                     	;# 
   582  0010                     	;# 
   583  0011                     	;# 
   584  0012                     	;# 
   585  0013                     	;# 
   586  0014                     	;# 
   587  0015                     	;# 
   588  0015                     	;# 
   589  0016                     	;# 
   590  0017                     	;# 
   591  0018                     	;# 
   592  0019                     	;# 
   593  001A                     	;# 
   594  001B                     	;# 
   595  001B                     	;# 
   596  001C                     	;# 
   597  001D                     	;# 
   598  001E                     	;# 
   599  001F                     	;# 
   600  0081                     	;# 
   601  0085                     	;# 
   602  0086                     	;# 
   603  0087                     	;# 
   604  0088                     	;# 
   605  0089                     	;# 
   606  008C                     	;# 
   607  008D                     	;# 
   608  008E                     	;# 
   609  008F                     	;# 
   610  0090                     	;# 
   611  0091                     	;# 
   612  0092                     	;# 
   613  0093                     	;# 
   614  0093                     	;# 
   615  0093                     	;# 
   616  0094                     	;# 
   617  0095                     	;# 
   618  0096                     	;# 
   619  0097                     	;# 
   620  0098                     	;# 
   621  0099                     	;# 
   622  009A                     	;# 
   623  009B                     	;# 
   624  009C                     	;# 
   625  009D                     	;# 
   626  009E                     	;# 
   627  009F                     	;# 
   628  0105                     	;# 
   629  0107                     	;# 
   630  0108                     	;# 
   631  0109                     	;# 
   632  010C                     	;# 
   633  010C                     	;# 
   634  010D                     	;# 
   635  010E                     	;# 
   636  010F                     	;# 
   637  0185                     	;# 
   638  0187                     	;# 
   639  0188                     	;# 
   640  0189                     	;# 
   641  018C                     	;# 
   642  018D                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0008                     	;# 
   652  0009                     	;# 
   653  000A                     	;# 
   654  000B                     	;# 
   655  000C                     	;# 
   656  000D                     	;# 
   657  000E                     	;# 
   658  000E                     	;# 
   659  000F                     	;# 
   660  0010                     	;# 
   661  0011                     	;# 
   662  0012                     	;# 
   663  0013                     	;# 
   664  0014                     	;# 
   665  0015                     	;# 
   666  0015                     	;# 
   667  0016                     	;# 
   668  0017                     	;# 
   669  0018                     	;# 
   670  0019                     	;# 
   671  001A                     	;# 
   672  001B                     	;# 
   673  001B                     	;# 
   674  001C                     	;# 
   675  001D                     	;# 
   676  001E                     	;# 
   677  001F                     	;# 
   678  0081                     	;# 
   679  0085                     	;# 
   680  0086                     	;# 
   681  0087                     	;# 
   682  0088                     	;# 
   683  0089                     	;# 
   684  008C                     	;# 
   685  008D                     	;# 
   686  008E                     	;# 
   687  008F                     	;# 
   688  0090                     	;# 
   689  0091                     	;# 
   690  0092                     	;# 
   691  0093                     	;# 
   692  0093                     	;# 
   693  0093                     	;# 
   694  0094                     	;# 
   695  0095                     	;# 
   696  0096                     	;# 
   697  0097                     	;# 
   698  0098                     	;# 
   699  0099                     	;# 
   700  009A                     	;# 
   701  009B                     	;# 
   702  009C                     	;# 
   703  009D                     	;# 
   704  009E                     	;# 
   705  009F                     	;# 
   706  0105                     	;# 
   707  0107                     	;# 
   708  0108                     	;# 
   709  0109                     	;# 
   710  010C                     	;# 
   711  010C                     	;# 
   712  010D                     	;# 
   713  010E                     	;# 
   714  010F                     	;# 
   715  0185                     	;# 
   716  0187                     	;# 
   717  0188                     	;# 
   718  0189                     	;# 
   719  018C                     	;# 
   720  018D                     	;# 
   721                           
   722                           	psect	idataBANK0
   723  07FC                     __pidataBANK0:
   724                           
   725                           ;initializer for _PS_val
   726  07FC  3410               	retlw	16
   727  07FD  3400               	retlw	0
   728                           
   729                           ;initializer for _Fosc
   730  07FE  3401               	retlw	1
   731                           
   732                           	psect	strings
   733  0800                     __pstrings:
   734  0800                     stringtab:
   735  0800                     __stringtab:
   736                           
   737                           ;	String table - string pointers are 1 byte each
   738  0800  1BFF               	btfsc	btemp+1,7
   739  0801  280A               	ljmp	stringcode
   740  0802  1383               	bcf	3,7
   741  0803  187F               	btfsc	btemp+1,0
   742  0804  1783               	bsf	3,7
   743  0805  0800               	movf	0,w
   744  0806  0A84               	incf	4,f
   745  0807  1903               	skipnz
   746  0808  0AFF               	incf	btemp+1,f
   747  0809  0008               	return
   748  080A                     stringcode:
   749  080A                     stringdir:
   750  080A  3008               	movlw	high stringdir
   751  080B  008A               	movwf	10
   752  080C  0804               	movf	4,w
   753  080D  0A84               	incf	4,f
   754  080E  0782               	addwf	2,f
   755  080F                     __stringbase:
   756  080F  3400               	retlw	0
   757  0810                     __end_of__stringtab:
   758  0810                     _dpowers:
   759  0810  3401               	retlw	1
   760  0811  3400               	retlw	0
   761  0812  340A               	retlw	10
   762  0813  3400               	retlw	0
   763  0814  3464               	retlw	100
   764  0815  3400               	retlw	0
   765  0816  34E8               	retlw	232
   766  0817  3403               	retlw	3
   767  0818  3410               	retlw	16
   768  0819  3427               	retlw	39
   769  081A                     __end_of_dpowers:
   770  0013                     _SSPBUF	set	19
   771  0014                     _SSPCON	set	20
   772  001E                     _ADRESH	set	30
   773  0001                     _TMR0	set	1
   774  0019                     _TXREG	set	25
   775  0018                     _RCSTAbits	set	24
   776  0014                     _SSPCONbits	set	20
   777  0008                     _PORTD	set	8
   778  0006                     _PORTB	set	6
   779  0005                     _PORTA	set	5
   780  000B                     _INTCONbits	set	11
   781  0006                     _PORTBbits	set	6
   782  000C                     _PIR1bits	set	12
   783  001F                     _ADCON0bits	set	31
   784  0008                     _PORTDbits	set	8
   785  0063                     _SSPIF	set	99
   786  005E                     _PEIE	set	94
   787  005F                     _GIE	set	95
   788  0033                     _RB3	set	51
   789  0037                     _RB7	set	55
   790  0036                     _RB6	set	54
   791  0035                     _RB5	set	53
   792  0034                     _RB4	set	52
   793  0064                     _TXIF	set	100
   794  0058                     _RBIF	set	88
   795  0066                     _ADIF	set	102
   796  005A                     _T0IF	set	90
   797  0091                     _SSPCON2bits	set	145
   798  0094                     _SSPSTAT	set	148
   799  0091                     _SSPCON2	set	145
   800  009E                     _ADRESL	set	158
   801  009F                     _ADCON1bits	set	159
   802  008F                     _OSCCONbits	set	143
   803  008C                     _PIE1bits	set	140
   804  009A                     _SPBRGH	set	154
   805  0099                     _SPBRG	set	153
   806  0098                     _TXSTAbits	set	152
   807  0094                     _SSPSTATbits	set	148
   808  0093                     _SSPADD	set	147
   809  0088                     _TRISD	set	136
   810  0087                     _TRISCbits	set	135
   811  0096                     _IOCBbits	set	150
   812  0095                     _WPUB	set	149
   813  0081                     _OPTION_REGbits	set	129
   814  0086                     _TRISB	set	134
   815  0085                     _TRISA	set	133
   816  0463                     _SSPIE	set	1123
   817  043C                     _TRISC4	set	1084
   818  043B                     _TRISC3	set	1083
   819  0187                     _BAUDCTLbits	set	391
   820  0189                     _ANSELH	set	393
   821  0188                     _ANSEL	set	392
   822  081A                     STR_2:
   823  081A  3425               	retlw	37	;'%'
   824  081B  3430               	retlw	48	;'0'
   825  081C  3432               	retlw	50	;'2'
   826  081D  3464               	retlw	100	;'d'
   827  081E  3420               	retlw	32	;' '
   828  081F  3400               	retlw	0
   829  0820                     STR_21:
   830  0820  3448               	retlw	72	;'H'
   831  0821  346F               	retlw	111	;'o'
   832  0822  3472               	retlw	114	;'r'
   833  0823  3461               	retlw	97	;'a'
   834  0824  343A               	retlw	58	;':'
   835  0825  3400               	retlw	0
   836  0826                     STR_18:
   837  0826  3454               	retlw	84	;'T'
   838  0827  3465               	retlw	101	;'e'
   839  0828  346D               	retlw	109	;'m'
   840  0829  3470               	retlw	112	;'p'
   841  082A  343A               	retlw	58	;':'
   842  082B  3400               	retlw	0
   843  082C                     STR_8:
   844  082C  3448               	retlw	72	;'H'
   845  082D  3475               	retlw	117	;'u'
   846  082E  346D               	retlw	109	;'m'
   847  082F  343A               	retlw	58	;':'
   848  0830  3400               	retlw	0
   849  0831                     STR_14:
   850  0831  3442               	retlw	66	;'B'
   851  0832  346F               	retlw	111	;'o'
   852  0833  3474               	retlw	116	;'t'
   853  0834  343A               	retlw	58	;':'
   854  0835  3400               	retlw	0
   855  0836                     STR_3:
   856  0836  3425               	retlw	37	;'%'
   857  0837  3430               	retlw	48	;'0'
   858  0838  3432               	retlw	50	;'2'
   859  0839  3464               	retlw	100	;'d'
   860  083A  3400               	retlw	0
   861  083B                     STR_12:
   862  083B  3431               	retlw	49	;'1'
   863  083C  3430               	retlw	48	;'0'
   864  083D  3430               	retlw	48	;'0'
   865  083E  3400               	retlw	0
   866  083F                     STR_15:
   867  083F  344F               	retlw	79	;'O'
   868  0840  3466               	retlw	102	;'f'
   869  0841  3466               	retlw	102	;'f'
   870  0842  3400               	retlw	0
   871  0843                     STR_20:
   872  0843  3432               	retlw	50	;'2'
   873  0844  3435               	retlw	53	;'5'
   874  0845  3400               	retlw	0
   875  0846                     STR_1:
   876  0846  3425               	retlw	37	;'%'
   877  0847  3464               	retlw	100	;'d'
   878  0848  3400               	retlw	0
   879  0849                     STR_17:
   880  0849  344F               	retlw	79	;'O'
   881  084A  346E               	retlw	110	;'n'
   882  084B  3400               	retlw	0
   883  084C                     STR_13:
   884  084C  3425               	retlw	37	;'%'
   885  084D  3400               	retlw	0
   886  081E                     
   887                           	psect	cinit
   888  0015                     start_initialization:	
   889                           ; #config settings
   890                           
   891  0015                     __initialization:
   892                           
   893                           ; Initialize objects allocated to BANK0
   894  0015  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   895  001A  00D5               	movwf	__pdataBANK0& (0+127)
   896  001B  120A  118A  27FD  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   897  0020  00D6               	movwf	(__pdataBANK0+1)& (0+127)
   898  0021  120A  118A  27FE  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   899  0026  00D7               	movwf	(__pdataBANK0+2)& (0+127)
   900                           
   901                           ; Clear objects allocated to BANK3
   902  0027  1783               	bsf	3,7	;select IRP bank2
   903  0028  30A1               	movlw	low __pbssBANK3
   904  0029  0084               	movwf	4
   905  002A  30AB               	movlw	low (__pbssBANK3+10)
   906  002B  120A  158A  20A5  120A  118A  	fcall	clear_ram0
   907                           
   908                           ; Clear objects allocated to BANK1
   909  0030  1383               	bcf	3,7	;select IRP bank0
   910  0031  30A0               	movlw	low __pbssBANK1
   911  0032  0084               	movwf	4
   912  0033  30E2               	movlw	low (__pbssBANK1+66)
   913  0034  120A  158A  20A5  120A  118A  	fcall	clear_ram0
   914                           
   915                           ; Clear objects allocated to BANK0
   916  0039  303C               	movlw	low __pbssBANK0
   917  003A  0084               	movwf	4
   918  003B  3055               	movlw	low (__pbssBANK0+25)
   919  003C  120A  158A  20A5  120A  118A  	fcall	clear_ram0
   920  0041                     end_of_initialization:	
   921                           ;End of C runtime variable initialization code
   922                           
   923  0041                     __end_of__initialization:
   924  0041  0183               	clrf	3
   925  0042  120A  118A  2845   	ljmp	_main	;jump to C main() function
   926                           
   927                           	psect	bssBANK0
   928  003C                     __pbssBANK0:
   929  003C                     _RTC_hor:
   930  003C                     	ds	2
   931  003E                     _RTC_min:
   932  003E                     	ds	2
   933  0040                     _RTC_sec:
   934  0040                     	ds	2
   935  0042                     _temperatura:
   936  0042                     	ds	2
   937  0044                     _cont1:
   938  0044                     	ds	2
   939  0046                     _HS_val:
   940  0046                     	ds	2
   941  0048                     _i:
   942  0048                     	ds	2
   943  004A                     _temp_flag:
   944  004A                     	ds	1
   945  004B                     _spst_flag:
   946  004B                     	ds	1
   947  004C                     _disp:
   948  004C                     	ds	1
   949  004D                     _spst:
   950  004D                     	ds	1
   951  004E                     _HS_flag:
   952  004E                     	ds	1
   953  004F                     _HS_percent:
   954  004F                     	ds	1
   955  0050                     _msg_flag:
   956  0050                     	ds	1
   957  0051                     _send_cont:
   958  0051                     	ds	1
   959  0052                     _pulse:
   960  0052                     	ds	1
   961  0053                     _milis:
   962  0053                     	ds	1
   963  0054                     _cont:
   964  0054                     	ds	1
   965                           
   966                           	psect	dataBANK0
   967  0055                     __pdataBANK0:
   968  0055                     _PS_val:
   969  0055                     	ds	2
   970  0057                     _Fosc:
   971  0057                     	ds	1
   972                           
   973                           	psect	bssBANK1
   974  00A0                     __pbssBANK1:
   975  00A0                     _temp_dec:
   976  00A0                     	ds	2
   977  00A2                     _response:
   978  00A2                     	ds	2
   979  00A4                     _data:
   980  00A4                     	ds	2
   981  00A6                     _RTC_hor_str:
   982  00A6                     	ds	10
   983  00B0                     _RTC_min_str:
   984  00B0                     	ds	10
   985  00BA                     _RTC_sec_str:
   986  00BA                     	ds	10
   987  00C4                     _temp_str:
   988  00C4                     	ds	10
   989  00CE                     _HS_flag_str:
   990  00CE                     	ds	10
   991  00D8                     _HS_str:
   992  00D8                     	ds	10
   993                           
   994                           	psect	bssBANK3
   995  01A1                     __pbssBANK3:
   996  01A1                     _spst_str:
   997  01A1                     	ds	10
   998                           
   999                           	psect	clrtext
  1000  08A5                     clear_ram0:	
  1001                           ;	Called with FSR containing the base address, and
  1002                           ;	W with the last address+1
  1003                           
  1004  08A5  0064               	clrwdt	;clear the watchdog before getting into this loop
  1005  08A6                     clrloop0:
  1006  08A6  0180               	clrf	0	;clear RAM location pointed to by FSR
  1007  08A7  0A84               	incf	4,f	;increment pointer
  1008  08A8  0604               	xorwf	4,w	;XOR with final address
  1009  08A9  1903               	btfsc	3,2	;have we reached the end yet?
  1010  08AA  3400               	retlw	0	;all done for this memory range, return
  1011  08AB  0604               	xorwf	4,w	;XOR again to restore value
  1012  08AC  28A6               	goto	clrloop0	;do the next byte
  1013                           
  1014                           	psect	cstackBANK3
  1015  0190                     __pcstackBANK3:
  1016  0190                     ?_I2C_Master_Init:
  1017  0190                     ?_sprintf:	
  1018                           ; 1 bytes @ 0x0
  1019                           
  1020  0190                     sprintf@f:	
  1021                           ; 2 bytes @ 0x0
  1022                           
  1023  0190                     I2C_Master_Init@c:	
  1024                           ; 1 bytes @ 0x0
  1025                           
  1026                           
  1027                           ; 4 bytes @ 0x0
  1028  0190                     	ds	3
  1029  0193                     ??_sprintf:
  1030                           
  1031                           ; 1 bytes @ 0x3
  1032  0193                     	ds	1
  1033  0194                     ??_I2C_Master_Init:
  1034                           
  1035                           ; 1 bytes @ 0x4
  1036  0194                     	ds	2
  1037  0196                     sprintf@ap:
  1038                           
  1039                           ; 1 bytes @ 0x6
  1040  0196                     	ds	1
  1041  0197                     sprintf@prec:
  1042                           
  1043                           ; 1 bytes @ 0x7
  1044  0197                     	ds	1
  1045  0198                     sprintf@val:
  1046                           
  1047                           ; 2 bytes @ 0x8
  1048  0198                     	ds	2
  1049  019A                     sprintf@flag:
  1050                           
  1051                           ; 1 bytes @ 0xA
  1052  019A                     	ds	1
  1053  019B                     sprintf@width:
  1054                           
  1055                           ; 2 bytes @ 0xB
  1056  019B                     	ds	2
  1057  019D                     sprintf@c:
  1058                           
  1059                           ; 1 bytes @ 0xD
  1060  019D                     	ds	1
  1061  019E                     sprintf@sp:
  1062                           
  1063                           ; 1 bytes @ 0xE
  1064  019E                     	ds	1
  1065  019F                     ??_main:
  1066                           
  1067                           ; 1 bytes @ 0xF
  1068  019F                     	ds	2
  1069                           
  1070                           	psect	cstackBANK1
  1071  00E2                     __pcstackBANK1:
  1072  00E2                     ??_setup:
  1073  00E2                     ??_initOscFreq:	
  1074                           ; 1 bytes @ 0x0
  1075                           
  1076  00E2                     ?_initTmr0:	
  1077                           ; 1 bytes @ 0x0
  1078                           
  1079  00E2                     ??_usartInitTransmit:	
  1080                           ; 1 bytes @ 0x0
  1081                           
  1082  00E2                     ?_initAdc:	
  1083                           ; 1 bytes @ 0x0
  1084                           
  1085  00E2                     ??_adcGo:	
  1086                           ; 1 bytes @ 0x0
  1087                           
  1088  00E2                     ??_I2C_Master_Start:	
  1089                           ; 1 bytes @ 0x0
  1090                           
  1091  00E2                     ?_I2C_Master_Write:	
  1092                           ; 1 bytes @ 0x0
  1093                           
  1094  00E2                     ??_I2C_Master_RepeatedStart:	
  1095                           ; 1 bytes @ 0x0
  1096                           
  1097  00E2                     ??_I2C_Master_Stop:	
  1098                           ; 1 bytes @ 0x0
  1099                           
  1100  00E2                     ??_usartDataWrite:	
  1101                           ; 1 bytes @ 0x0
  1102                           
  1103  00E2                     ??_isdigit:	
  1104                           ; 1 bytes @ 0x0
  1105                           
  1106  00E2                     ??_Lcd_Port:	
  1107                           ; 1 bytes @ 0x0
  1108                           
  1109  00E2                     ??_I2C_Master_Wait:	
  1110                           ; 1 bytes @ 0x0
  1111                           
  1112  00E2                     ?___bmul:	
  1113                           ; 1 bytes @ 0x0
  1114                           
  1115  00E2                     ?_I2C_Master_Read:	
  1116                           ; 1 bytes @ 0x0
  1117                           
  1118  00E2                     ?___wmul:	
  1119                           ; 2 bytes @ 0x0
  1120                           
  1121  00E2                     ?___lwdiv:	
  1122                           ; 2 bytes @ 0x0
  1123                           
  1124  00E2                     ?___lldiv:	
  1125                           ; 2 bytes @ 0x0
  1126                           
  1127  00E2                     initAdc@vref_pos:	
  1128                           ; 4 bytes @ 0x0
  1129                           
  1130  00E2                     Lcd_Port@a:	
  1131                           ; 1 bytes @ 0x0
  1132                           
  1133  00E2                     ___bmul@multiplicand:	
  1134                           ; 1 bytes @ 0x0
  1135                           
  1136  00E2                     _isdigit$1515:	
  1137                           ; 1 bytes @ 0x0
  1138                           
  1139  00E2                     initTmr0@prescaler:	
  1140                           ; 1 bytes @ 0x0
  1141                           
  1142  00E2                     I2C_Master_Write@d:	
  1143                           ; 2 bytes @ 0x0
  1144                           
  1145  00E2                     I2C_Master_Read@a:	
  1146                           ; 2 bytes @ 0x0
  1147                           
  1148  00E2                     ___wmul@multiplier:	
  1149                           ; 2 bytes @ 0x0
  1150                           
  1151  00E2                     ___lwdiv@divisor:	
  1152                           ; 2 bytes @ 0x0
  1153                           
  1154  00E2                     ___lldiv@divisor:	
  1155                           ; 2 bytes @ 0x0
  1156                           
  1157                           
  1158                           ; 4 bytes @ 0x0
  1159  00E2                     	ds	1
  1160  00E3                     ??_Lcd_Cmd:
  1161  00E3                     ??_Lcd_Write_Char:	
  1162                           ; 1 bytes @ 0x1
  1163                           
  1164  00E3                     ??___bmul:	
  1165                           ; 1 bytes @ 0x1
  1166                           
  1167  00E3                     initAdc@vref_neg:	
  1168                           ; 1 bytes @ 0x1
  1169                           
  1170  00E3                     adcGo@channel:	
  1171                           ; 1 bytes @ 0x1
  1172                           
  1173  00E3                     isdigit@c:	
  1174                           ; 1 bytes @ 0x1
  1175                           
  1176                           
  1177                           ; 1 bytes @ 0x1
  1178  00E3                     	ds	1
  1179  00E4                     ??_initTmr0:
  1180  00E4                     ??_initAdc:	
  1181                           ; 1 bytes @ 0x2
  1182                           
  1183  00E4                     ??_I2C_Master_Write:	
  1184                           ; 1 bytes @ 0x2
  1185                           
  1186  00E4                     ??_I2C_Master_Read:	
  1187                           ; 1 bytes @ 0x2
  1188                           
  1189  00E4                     initOscFreq@freq:	
  1190                           ; 1 bytes @ 0x2
  1191                           
  1192  00E4                     Lcd_Cmd@a:	
  1193                           ; 1 bytes @ 0x2
  1194                           
  1195  00E4                     Lcd_Write_Char@temp:	
  1196                           ; 1 bytes @ 0x2
  1197                           
  1198  00E4                     ___bmul@product:	
  1199                           ; 1 bytes @ 0x2
  1200                           
  1201  00E4                     ___wmul@multiplicand:	
  1202                           ; 1 bytes @ 0x2
  1203                           
  1204  00E4                     ___lwdiv@dividend:	
  1205                           ; 2 bytes @ 0x2
  1206                           
  1207                           
  1208                           ; 2 bytes @ 0x2
  1209  00E4                     	ds	1
  1210  00E5                     ??_Lcd_Init:
  1211  00E5                     ?_Lcd_Set_Cursor:	
  1212                           ; 1 bytes @ 0x3
  1213                           
  1214  00E5                     usartDataWrite@msg:	
  1215                           ; 1 bytes @ 0x3
  1216                           
  1217  00E5                     Lcd_Set_Cursor@b:	
  1218                           ; 1 bytes @ 0x3
  1219                           
  1220  00E5                     Lcd_Write_Char@y:	
  1221                           ; 1 bytes @ 0x3
  1222                           
  1223  00E5                     ___bmul@multiplier:	
  1224                           ; 1 bytes @ 0x3
  1225                           
  1226                           
  1227                           ; 1 bytes @ 0x3
  1228  00E5                     	ds	1
  1229  00E6                     ??_binTodec:
  1230  00E6                     ??_Lcd_Set_Cursor:	
  1231                           ; 1 bytes @ 0x4
  1232                           
  1233  00E6                     ??___wmul:	
  1234                           ; 1 bytes @ 0x4
  1235                           
  1236  00E6                     ??___lwdiv:	
  1237                           ; 1 bytes @ 0x4
  1238                           
  1239  00E6                     initAdc@adc_s:	
  1240                           ; 1 bytes @ 0x4
  1241                           
  1242  00E6                     Lcd_Write_Char@a:	
  1243                           ; 1 bytes @ 0x4
  1244                           
  1245  00E6                     I2C_Master_Read@temp:	
  1246                           ; 1 bytes @ 0x4
  1247                           
  1248  00E6                     ___wmul@product:	
  1249                           ; 2 bytes @ 0x4
  1250                           
  1251  00E6                     ___lldiv@dividend:	
  1252                           ; 2 bytes @ 0x4
  1253                           
  1254                           
  1255                           ; 4 bytes @ 0x4
  1256  00E6                     	ds	1
  1257  00E7                     ?_Lcd_Write_String:
  1258  00E7                     ___lwdiv@counter:	
  1259                           ; 1 bytes @ 0x5
  1260                           
  1261  00E7                     Lcd_Write_String@a:	
  1262                           ; 1 bytes @ 0x5
  1263                           
  1264                           
  1265                           ; 2 bytes @ 0x5
  1266  00E7                     	ds	1
  1267  00E8                     Lcd_Set_Cursor@a:
  1268  00E8                     ___lwdiv@quotient:	
  1269                           ; 1 bytes @ 0x6
  1270                           
  1271                           
  1272                           ; 2 bytes @ 0x6
  1273  00E8                     	ds	1
  1274  00E9                     ??_Lcd_Write_String:
  1275  00E9                     binTodec@num:	
  1276                           ; 1 bytes @ 0x7
  1277                           
  1278  00E9                     Lcd_Set_Cursor@z:	
  1279                           ; 1 bytes @ 0x7
  1280                           
  1281                           
  1282                           ; 1 bytes @ 0x7
  1283  00E9                     	ds	1
  1284  00EA                     ??___lldiv:
  1285  00EA                     ?___lwmod:	
  1286                           ; 1 bytes @ 0x8
  1287                           
  1288  00EA                     Lcd_Set_Cursor@y:	
  1289                           ; 2 bytes @ 0x8
  1290                           
  1291  00EA                     ___lwmod@divisor:	
  1292                           ; 1 bytes @ 0x8
  1293                           
  1294                           
  1295                           ; 2 bytes @ 0x8
  1296  00EA                     	ds	1
  1297  00EB                     Lcd_Set_Cursor@temp:
  1298  00EB                     ___lldiv@quotient:	
  1299                           ; 1 bytes @ 0x9
  1300                           
  1301                           
  1302                           ; 4 bytes @ 0x9
  1303  00EB                     	ds	1
  1304  00EC                     Lcd_Write_String@i:
  1305  00EC                     ___lwmod@dividend:	
  1306                           ; 2 bytes @ 0xA
  1307                           
  1308                           
  1309                           ; 2 bytes @ 0xA
  1310  00EC                     	ds	2
  1311  00EE                     ??___lwmod:
  1312                           
  1313                           ; 1 bytes @ 0xC
  1314  00EE                     	ds	1
  1315  00EF                     ___lldiv@counter:
  1316  00EF                     ___lwmod@counter:	
  1317                           ; 1 bytes @ 0xD
  1318                           
  1319                           
  1320                           ; 1 bytes @ 0xD
  1321  00EF                     	ds	1
  1322                           
  1323                           	psect	cstackCOMMON
  1324  0070                     __pcstackCOMMON:
  1325  0070                     ?_isdigit:
  1326  0070                     ?i1_isdigit:	
  1327                           ; 1 bit 
  1328                           
  1329  0070                     ?_tmr0Reset:	
  1330                           ; 1 bit 
  1331                           
  1332  0070                     ??_tmr0Reset:	
  1333                           ; 1 bytes @ 0x0
  1334                           
  1335  0070                     ?_Lcd_Clear:	
  1336                           ; 1 bytes @ 0x0
  1337                           
  1338  0070                     ?_setup:	
  1339                           ; 1 bytes @ 0x0
  1340                           
  1341  0070                     ?_initOscFreq:	
  1342                           ; 1 bytes @ 0x0
  1343                           
  1344  0070                     ?_usartInitTransmit:	
  1345                           ; 1 bytes @ 0x0
  1346                           
  1347  0070                     ?_Lcd_Init:	
  1348                           ; 1 bytes @ 0x0
  1349                           
  1350  0070                     ?_adcGo:	
  1351                           ; 1 bytes @ 0x0
  1352                           
  1353  0070                     ?_I2C_Master_Start:	
  1354                           ; 1 bytes @ 0x0
  1355                           
  1356  0070                     ?_I2C_Master_RepeatedStart:	
  1357                           ; 1 bytes @ 0x0
  1358                           
  1359  0070                     ?_I2C_Master_Stop:	
  1360                           ; 1 bytes @ 0x0
  1361                           
  1362  0070                     ?_binTodec:	
  1363                           ; 1 bytes @ 0x0
  1364                           
  1365  0070                     ?_usartDataWrite:	
  1366                           ; 1 bytes @ 0x0
  1367                           
  1368  0070                     ?_isr:	
  1369                           ; 1 bytes @ 0x0
  1370                           
  1371  0070                     ?_main:	
  1372                           ; 1 bytes @ 0x0
  1373                           
  1374  0070                     ?_Lcd_Port:	
  1375                           ; 1 bytes @ 0x0
  1376                           
  1377  0070                     ?_Lcd_Cmd:	
  1378                           ; 1 bytes @ 0x0
  1379                           
  1380  0070                     ?_Lcd_Write_Char:	
  1381                           ; 1 bytes @ 0x0
  1382                           
  1383  0070                     ?_I2C_Master_Wait:	
  1384                           ; 1 bytes @ 0x0
  1385                           
  1386  0070                     ?i1_Lcd_Port:	
  1387                           ; 1 bytes @ 0x0
  1388                           
  1389  0070                     ??i1_Lcd_Port:	
  1390                           ; 1 bytes @ 0x0
  1391                           
  1392  0070                     ?i1_Lcd_Cmd:	
  1393                           ; 1 bytes @ 0x0
  1394                           
  1395  0070                     ??i1_isdigit:	
  1396                           ; 1 bytes @ 0x0
  1397                           
  1398  0070                     ?_adcRead:	
  1399                           ; 1 bytes @ 0x0
  1400                           
  1401  0070                     ?i1___wmul:	
  1402                           ; 2 bytes @ 0x0
  1403                           
  1404  0070                     i1Lcd_Port@a:	
  1405                           ; 2 bytes @ 0x0
  1406                           
  1407  0070                     i1_isdigit$1515:	
  1408                           ; 1 bytes @ 0x0
  1409                           
  1410  0070                     i1___wmul@multiplier:	
  1411                           ; 1 bytes @ 0x0
  1412                           
  1413                           
  1414                           ; 2 bytes @ 0x0
  1415  0070                     	ds	1
  1416  0071                     ??i1_Lcd_Cmd:
  1417  0071                     i1isdigit@c:	
  1418                           ; 1 bytes @ 0x1
  1419                           
  1420                           
  1421                           ; 1 bytes @ 0x1
  1422  0071                     	ds	1
  1423  0072                     ??_adcRead:
  1424  0072                     i1Lcd_Cmd@a:	
  1425                           ; 1 bytes @ 0x2
  1426                           
  1427  0072                     i1___wmul@multiplicand:	
  1428                           ; 1 bytes @ 0x2
  1429                           
  1430                           
  1431                           ; 2 bytes @ 0x2
  1432  0072                     	ds	1
  1433  0073                     ??_Lcd_Clear:
  1434                           
  1435                           ; 1 bytes @ 0x3
  1436  0073                     	ds	1
  1437  0074                     ??i1___wmul:
  1438  0074                     i1___wmul@product:	
  1439                           ; 1 bytes @ 0x4
  1440                           
  1441                           
  1442                           ; 2 bytes @ 0x4
  1443  0074                     	ds	2
  1444  0076                     ?i1___lwdiv:
  1445  0076                     i1___lwdiv@divisor:	
  1446                           ; 2 bytes @ 0x6
  1447                           
  1448                           
  1449                           ; 2 bytes @ 0x6
  1450  0076                     	ds	2
  1451  0078                     i1___lwdiv@dividend:
  1452                           
  1453                           ; 2 bytes @ 0x8
  1454  0078                     	ds	2
  1455  007A                     ??i1___lwdiv:
  1456                           
  1457                           ; 1 bytes @ 0xA
  1458  007A                     	ds	1
  1459  007B                     i1___lwdiv@quotient:
  1460                           
  1461                           ; 2 bytes @ 0xB
  1462  007B                     	ds	2
  1463  007D                     i1___lwdiv@counter:
  1464                           
  1465                           ; 1 bytes @ 0xD
  1466  007D                     	ds	1
  1467  007E                     ??_percent:
  1468                           
  1469                           	psect	cstackBANK0
  1470  0020                     __pcstackBANK0:	
  1471                           ; 1 bytes @ 0xE
  1472                           
  1473  0020                     ?_percent:
  1474  0020                     ?i1___lwmod:	
  1475                           ; 2 bytes @ 0x0
  1476                           
  1477  0020                     percent@val:	
  1478                           ; 2 bytes @ 0x0
  1479                           
  1480  0020                     i1___lwmod@divisor:	
  1481                           ; 2 bytes @ 0x0
  1482                           
  1483                           
  1484                           ; 2 bytes @ 0x0
  1485  0020                     	ds	2
  1486  0022                     percent@water_val:
  1487  0022                     i1___lwmod@dividend:	
  1488                           ; 2 bytes @ 0x2
  1489                           
  1490                           
  1491                           ; 2 bytes @ 0x2
  1492  0022                     	ds	2
  1493  0024                     ??i1___lwmod:
  1494  0024                     percent@air_val:	
  1495                           ; 1 bytes @ 0x4
  1496                           
  1497                           
  1498                           ; 2 bytes @ 0x4
  1499  0024                     	ds	1
  1500  0025                     i1___lwmod@counter:
  1501                           
  1502                           ; 1 bytes @ 0x5
  1503  0025                     	ds	1
  1504  0026                     ?i1_sprintf:
  1505  0026                     i1sprintf@f:	
  1506                           ; 2 bytes @ 0x6
  1507                           
  1508                           
  1509                           ; 1 bytes @ 0x6
  1510  0026                     	ds	3
  1511  0029                     ??i1_sprintf:
  1512                           
  1513                           ; 1 bytes @ 0x9
  1514  0029                     	ds	3
  1515  002C                     i1sprintf@ap:
  1516                           
  1517                           ; 1 bytes @ 0xC
  1518  002C                     	ds	1
  1519  002D                     i1sprintf@prec:
  1520                           
  1521                           ; 1 bytes @ 0xD
  1522  002D                     	ds	1
  1523  002E                     i1sprintf@val:
  1524                           
  1525                           ; 2 bytes @ 0xE
  1526  002E                     	ds	2
  1527  0030                     i1sprintf@flag:
  1528                           
  1529                           ; 1 bytes @ 0x10
  1530  0030                     	ds	1
  1531  0031                     i1sprintf@width:
  1532                           
  1533                           ; 2 bytes @ 0x11
  1534  0031                     	ds	2
  1535  0033                     i1sprintf@sp:
  1536                           
  1537                           ; 1 bytes @ 0x13
  1538  0033                     	ds	1
  1539  0034                     i1sprintf@c:
  1540                           
  1541                           ; 1 bytes @ 0x14
  1542  0034                     	ds	1
  1543  0035                     ??_isr:
  1544                           
  1545                           ; 1 bytes @ 0x15
  1546  0035                     	ds	7
  1547                           
  1548                           	psect	maintext
  1549  0045                     __pmaintext:	
  1550 ;;
  1551 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1552 ;;
  1553 ;; *************** function _main *****************
  1554 ;; Defined at:
  1555 ;;		line 145 in file "sensor_ctrl_main.c"
  1556 ;; Parameters:    Size  Location     Type
  1557 ;;		None
  1558 ;; Auto vars:     Size  Location     Type
  1559 ;;		None
  1560 ;; Return value:  Size  Location     Type
  1561 ;;                  1    wreg      void 
  1562 ;; Registers used:
  1563 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1564 ;; Tracked objects:
  1565 ;;		On entry : B00/0
  1566 ;;		On exit  : 0/0
  1567 ;;		Unchanged: 0/0
  1568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1569 ;;      Params:         0       0       0       0       0
  1570 ;;      Locals:         0       0       0       0       0
  1571 ;;      Temps:          0       0       0       2       0
  1572 ;;      Totals:         0       0       0       2       0
  1573 ;;Total ram usage:        2 bytes
  1574 ;; Hardware stack levels required when called: 7
  1575 ;; This function calls:
  1576 ;;		_I2C_Master_Init
  1577 ;;		_I2C_Master_Read
  1578 ;;		_I2C_Master_RepeatedStart
  1579 ;;		_I2C_Master_Start
  1580 ;;		_I2C_Master_Stop
  1581 ;;		_I2C_Master_Write
  1582 ;;		_Lcd_Init
  1583 ;;		_Lcd_Set_Cursor
  1584 ;;		_Lcd_Write_String
  1585 ;;		_adcGo
  1586 ;;		_binTodec
  1587 ;;		_initAdc
  1588 ;;		_initOscFreq
  1589 ;;		_initTmr0
  1590 ;;		_setup
  1591 ;;		_sprintf
  1592 ;;		_usartDataWrite
  1593 ;;		_usartInitTransmit
  1594 ;; This function is called by:
  1595 ;;		Startup code after reset
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599  0045                     _main:	
  1600                           ;psect for function _main
  1601                           
  1602  0045                     l3980:	
  1603                           ;incstack = 0
  1604                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1605                           
  1606                           
  1607                           ;sensor_ctrl_main.c: 146:     setup();
  1608  0045  120A  158A  2248  120A  118A  	fcall	_setup
  1609  004A                     l3982:
  1610                           
  1611                           ;sensor_ctrl_main.c: 147:     initOscFreq(Fosc);
  1612  004A  3001               	movlw	1
  1613  004B  120A  158A  22CB  120A  118A  	fcall	_initOscFreq
  1614  0050                     l3984:
  1615                           
  1616                           ;sensor_ctrl_main.c: 148:     initTmr0(PS_val);
  1617  0050  3010               	movlw	16
  1618  0051  1683               	bsf	3,5	;RP0=1, select bank1
  1619  0052  1303               	bcf	3,6	;RP1=0, select bank1
  1620  0053  00E2               	movwf	initTmr0@prescaler^(0+128)
  1621  0054  3000               	movlw	0
  1622  0055  00E3               	movwf	(initTmr0@prescaler^(0+128)+1)
  1623  0056  120A  158A  25D5  120A  118A  	fcall	_initTmr0
  1624                           
  1625                           ;sensor_ctrl_main.c: 149:     usartInitTransmit();
  1626  005B  120A  158A  2169  120A  118A  	fcall	_usartInitTransmit
  1627  0060                     l3986:
  1628                           
  1629                           ;sensor_ctrl_main.c: 150:     initAdc(64,0,0);
  1630  0060  1683               	bsf	3,5	;RP0=1, select bank1
  1631  0061  1303               	bcf	3,6	;RP1=0, select bank1
  1632  0062  01E2               	clrf	initAdc@vref_pos^(0+128)
  1633  0063  01E3               	clrf	initAdc@vref_neg^(0+128)
  1634  0064  3040               	movlw	64
  1635  0065  120A  158A  2483  120A  118A  	fcall	_initAdc
  1636  006A                     l3988:
  1637                           
  1638                           ;sensor_ctrl_main.c: 151:     Lcd_Init();
  1639  006A  120A  158A  2527  120A  118A  	fcall	_Lcd_Init
  1640  006F                     l3990:
  1641                           
  1642                           ;sensor_ctrl_main.c: 152:     I2C_Master_Init(115000);
  1643  006F  3000               	movlw	0
  1644  0070  1683               	bsf	3,5	;RP0=1, select bank3
  1645  0071  1703               	bsf	3,6	;RP1=1, select bank3
  1646  0072  0093               	movwf	(I2C_Master_Init@c+3)^(0+384)
  1647  0073  3001               	movlw	1
  1648  0074  0092               	movwf	(I2C_Master_Init@c+2)^(0+384)
  1649  0075  30C1               	movlw	193
  1650  0076  0091               	movwf	(I2C_Master_Init@c+1)^(0+384)
  1651  0077  3038               	movlw	56
  1652  0078  0090               	movwf	I2C_Master_Init@c^(0+384)
  1653  0079  120A  158A  23F7  120A  118A  	fcall	_I2C_Master_Init
  1654  007E                     l3992:
  1655                           
  1656                           ;sensor_ctrl_main.c: 157:         adcGo(0);
  1657  007E  3000               	movlw	0
  1658  007F  120A  158A  2150  120A  118A  	fcall	_adcGo
  1659  0084                     l3994:
  1660                           
  1661                           ;sensor_ctrl_main.c: 159:         I2C_Master_Start();
  1662  0084  120A  158A  20B6  120A  118A  	fcall	_I2C_Master_Start
  1663  0089                     l3996:
  1664                           
  1665                           ;sensor_ctrl_main.c: 160:         I2C_Master_Write(0b1001000 +0b1);
  1666  0089  3049               	movlw	73
  1667  008A  1683               	bsf	3,5	;RP0=1, select bank1
  1668  008B  1303               	bcf	3,6	;RP1=0, select bank1
  1669  008C  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1670  008D  3000               	movlw	0
  1671  008E  00E3               	movwf	(I2C_Master_Write@d^(0+128)+1)
  1672  008F  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1673  0094                     l3998:
  1674                           
  1675                           ;sensor_ctrl_main.c: 161:         I2C_Master_Write(0x01);
  1676  0094  3001               	movlw	1
  1677  0095  1683               	bsf	3,5	;RP0=1, select bank1
  1678  0096  1303               	bcf	3,6	;RP1=0, select bank1
  1679  0097  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1680  0098  3000               	movlw	0
  1681  0099  00E3               	movwf	(I2C_Master_Write@d^(0+128)+1)
  1682  009A  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1683  009F                     l4000:
  1684                           
  1685                           ;sensor_ctrl_main.c: 162:         I2C_Master_Write(0x18);
  1686  009F  3018               	movlw	24
  1687  00A0  1683               	bsf	3,5	;RP0=1, select bank1
  1688  00A1  1303               	bcf	3,6	;RP1=0, select bank1
  1689  00A2  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1690  00A3  3000               	movlw	0
  1691  00A4  00E3               	movwf	(I2C_Master_Write@d^(0+128)+1)
  1692  00A5  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1693  00AA                     l4002:
  1694                           
  1695                           ;sensor_ctrl_main.c: 163:         I2C_Master_RepeatedStart();
  1696  00AA  120A  158A  20AD  120A  118A  	fcall	_I2C_Master_RepeatedStart
  1697  00AF                     l4004:
  1698                           
  1699                           ;sensor_ctrl_main.c: 164:         I2C_Master_Write(0x91);
  1700  00AF  3091               	movlw	145
  1701  00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1702  00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1703  00B2  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1704  00B3  3000               	movlw	0
  1705  00B4  00E3               	movwf	(I2C_Master_Write@d^(0+128)+1)
  1706  00B5  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1707  00BA                     l4006:
  1708                           
  1709                           ;sensor_ctrl_main.c: 165:         temperatura =I2C_Master_Read(0);
  1710  00BA  3000               	movlw	0
  1711  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  1712  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  1713  00BD  00E2               	movwf	I2C_Master_Read@a^(0+128)
  1714  00BE  00E3               	movwf	(I2C_Master_Read@a+1)^(0+128)
  1715  00BF  120A  158A  229D  120A  118A  	fcall	_I2C_Master_Read
  1716  00C4  1683               	bsf	3,5	;RP0=1, select bank1
  1717  00C5  1303               	bcf	3,6	;RP1=0, select bank1
  1718  00C6  0863               	movf	(?_I2C_Master_Read+1)^(0+128),w
  1719  00C7  1283               	bcf	3,5	;RP0=0, select bank0
  1720  00C8  1303               	bcf	3,6	;RP1=0, select bank0
  1721  00C9  00C3               	movwf	_temperatura+1
  1722  00CA  1683               	bsf	3,5	;RP0=1, select bank1
  1723  00CB  1303               	bcf	3,6	;RP1=0, select bank1
  1724  00CC  0862               	movf	?_I2C_Master_Read^(0+128),w
  1725  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1726  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1727  00CF  00C2               	movwf	_temperatura
  1728  00D0                     l4008:
  1729                           
  1730                           ;sensor_ctrl_main.c: 166:         I2C_Master_Stop();
  1731  00D0  120A  158A  20BF  120A  118A  	fcall	_I2C_Master_Stop
  1732  00D5                     l4010:
  1733                           
  1734                           ;sensor_ctrl_main.c: 167:         _delay((unsigned long)((100)*(1000000/4000.0)));
  1735  00D5  3021               	movlw	33
  1736  00D6  1683               	bsf	3,5	;RP0=1, select bank3
  1737  00D7  1703               	bsf	3,6	;RP1=1, select bank3
  1738  00D8  00A0               	movwf	(??_main^(0+384)+1)
  1739  00D9  3075               	movlw	117
  1740  00DA  009F               	movwf	??_main^(0+384)
  1741  00DB                     u3717:
  1742  00DB  0B9F               	decfsz	??_main^(0+384),f
  1743  00DC  28DB               	goto	u3717
  1744  00DD  0BA0               	decfsz	(??_main^(0+384)+1),f
  1745  00DE  28DB               	goto	u3717
  1746  00DF  28E0               	nop2
  1747  00E0                     l4012:
  1748                           
  1749                           ;sensor_ctrl_main.c: 168:         sprintf(temp_str, "%02d ", temperatura);
  1750  00E0  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1751  00E1  1683               	bsf	3,5	;RP0=1, select bank3
  1752  00E2  1703               	bsf	3,6	;RP1=1, select bank3
  1753  00E3  009F               	movwf	??_main^(0+384)
  1754  00E4  081F               	movf	??_main^(0+384),w
  1755  00E5  0090               	movwf	sprintf@f^(0+384)
  1756  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  1757  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  1758  00E8  0843               	movf	_temperatura+1,w
  1759  00E9  1683               	bsf	3,5	;RP0=1, select bank3
  1760  00EA  1703               	bsf	3,6	;RP1=1, select bank3
  1761  00EB  0092               	movwf	((?_sprintf+1)^(0+384)+1)
  1762  00EC  1283               	bcf	3,5	;RP0=0, select bank0
  1763  00ED  1303               	bcf	3,6	;RP1=0, select bank0
  1764  00EE  0842               	movf	_temperatura,w
  1765  00EF  1683               	bsf	3,5	;RP0=1, select bank3
  1766  00F0  1703               	bsf	3,6	;RP1=1, select bank3
  1767  00F1  0091               	movwf	(?_sprintf^(0+384)+1)
  1768  00F2  30C4               	movlw	(low (_temp_str| 0))& (0+255)
  1769  00F3  120A  118A  24BF  120A  118A  	fcall	_sprintf
  1770  00F8                     l4014:
  1771                           
  1772                           ;sensor_ctrl_main.c: 171:         I2C_Master_Start();
  1773  00F8  120A  158A  20B6  120A  118A  	fcall	_I2C_Master_Start
  1774  00FD                     l4016:
  1775                           
  1776                           ;sensor_ctrl_main.c: 172:         I2C_Master_Write(0xD0);
  1777  00FD  30D0               	movlw	208
  1778  00FE  1683               	bsf	3,5	;RP0=1, select bank1
  1779  00FF  1303               	bcf	3,6	;RP1=0, select bank1
  1780  0100  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1781  0101  3000               	movlw	0
  1782  0102  00E3               	movwf	(I2C_Master_Write@d^(0+128)+1)
  1783  0103  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1784  0108                     l4018:
  1785                           
  1786                           ;sensor_ctrl_main.c: 173:         I2C_Master_Write(0);
  1787  0108  3000               	movlw	0
  1788  0109  1683               	bsf	3,5	;RP0=1, select bank1
  1789  010A  1303               	bcf	3,6	;RP1=0, select bank1
  1790  010B  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1791  010C  00E3               	movwf	(I2C_Master_Write@d+1)^(0+128)
  1792  010D  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1793  0112                     l4020:
  1794                           
  1795                           ;sensor_ctrl_main.c: 174:         I2C_Master_RepeatedStart();
  1796  0112  120A  158A  20AD  120A  118A  	fcall	_I2C_Master_RepeatedStart
  1797  0117                     l4022:
  1798                           
  1799                           ;sensor_ctrl_main.c: 175:         I2C_Master_Write(0xD1);
  1800  0117  30D1               	movlw	209
  1801  0118  1683               	bsf	3,5	;RP0=1, select bank1
  1802  0119  1303               	bcf	3,6	;RP1=0, select bank1
  1803  011A  00E2               	movwf	I2C_Master_Write@d^(0+128)
  1804  011B  3000               	movlw	0
  1805  011C  00E3               	movwf	(I2C_Master_Write@d^(0+128)+1)
  1806  011D  120A  158A  20C8  120A  118A  	fcall	_I2C_Master_Write
  1807  0122                     l4024:
  1808                           
  1809                           ;sensor_ctrl_main.c: 176:         RTC_sec = I2C_Master_Read(1);
  1810  0122  3001               	movlw	1
  1811  0123  1683               	bsf	3,5	;RP0=1, select bank1
  1812  0124  1303               	bcf	3,6	;RP1=0, select bank1
  1813  0125  00E2               	movwf	I2C_Master_Read@a^(0+128)
  1814  0126  3000               	movlw	0
  1815  0127  00E3               	movwf	(I2C_Master_Read@a^(0+128)+1)
  1816  0128  120A  158A  229D  120A  118A  	fcall	_I2C_Master_Read
  1817  012D  1683               	bsf	3,5	;RP0=1, select bank1
  1818  012E  1303               	bcf	3,6	;RP1=0, select bank1
  1819  012F  0863               	movf	(?_I2C_Master_Read+1)^(0+128),w
  1820  0130  1283               	bcf	3,5	;RP0=0, select bank0
  1821  0131  1303               	bcf	3,6	;RP1=0, select bank0
  1822  0132  00C1               	movwf	_RTC_sec+1
  1823  0133  1683               	bsf	3,5	;RP0=1, select bank1
  1824  0134  1303               	bcf	3,6	;RP1=0, select bank1
  1825  0135  0862               	movf	?_I2C_Master_Read^(0+128),w
  1826  0136  1283               	bcf	3,5	;RP0=0, select bank0
  1827  0137  1303               	bcf	3,6	;RP1=0, select bank0
  1828  0138  00C0               	movwf	_RTC_sec
  1829  0139                     l4026:
  1830                           
  1831                           ;sensor_ctrl_main.c: 177:         RTC_min = I2C_Master_Read(1);
  1832  0139  3001               	movlw	1
  1833  013A  1683               	bsf	3,5	;RP0=1, select bank1
  1834  013B  1303               	bcf	3,6	;RP1=0, select bank1
  1835  013C  00E2               	movwf	I2C_Master_Read@a^(0+128)
  1836  013D  3000               	movlw	0
  1837  013E  00E3               	movwf	(I2C_Master_Read@a^(0+128)+1)
  1838  013F  120A  158A  229D  120A  118A  	fcall	_I2C_Master_Read
  1839  0144  1683               	bsf	3,5	;RP0=1, select bank1
  1840  0145  1303               	bcf	3,6	;RP1=0, select bank1
  1841  0146  0863               	movf	(?_I2C_Master_Read+1)^(0+128),w
  1842  0147  1283               	bcf	3,5	;RP0=0, select bank0
  1843  0148  1303               	bcf	3,6	;RP1=0, select bank0
  1844  0149  00BF               	movwf	_RTC_min+1
  1845  014A  1683               	bsf	3,5	;RP0=1, select bank1
  1846  014B  1303               	bcf	3,6	;RP1=0, select bank1
  1847  014C  0862               	movf	?_I2C_Master_Read^(0+128),w
  1848  014D  1283               	bcf	3,5	;RP0=0, select bank0
  1849  014E  1303               	bcf	3,6	;RP1=0, select bank0
  1850  014F  00BE               	movwf	_RTC_min
  1851  0150                     l4028:
  1852                           
  1853                           ;sensor_ctrl_main.c: 178:         RTC_hor = I2C_Master_Read(0);
  1854  0150  3000               	movlw	0
  1855  0151  1683               	bsf	3,5	;RP0=1, select bank1
  1856  0152  1303               	bcf	3,6	;RP1=0, select bank1
  1857  0153  00E2               	movwf	I2C_Master_Read@a^(0+128)
  1858  0154  00E3               	movwf	(I2C_Master_Read@a+1)^(0+128)
  1859  0155  120A  158A  229D  120A  118A  	fcall	_I2C_Master_Read
  1860  015A  1683               	bsf	3,5	;RP0=1, select bank1
  1861  015B  1303               	bcf	3,6	;RP1=0, select bank1
  1862  015C  0863               	movf	(?_I2C_Master_Read+1)^(0+128),w
  1863  015D  1283               	bcf	3,5	;RP0=0, select bank0
  1864  015E  1303               	bcf	3,6	;RP1=0, select bank0
  1865  015F  00BD               	movwf	_RTC_hor+1
  1866  0160  1683               	bsf	3,5	;RP0=1, select bank1
  1867  0161  1303               	bcf	3,6	;RP1=0, select bank1
  1868  0162  0862               	movf	?_I2C_Master_Read^(0+128),w
  1869  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0165  00BC               	movwf	_RTC_hor
  1872  0166                     l4030:
  1873                           
  1874                           ;sensor_ctrl_main.c: 179:         I2C_Master_Stop();
  1875  0166  120A  158A  20BF  120A  118A  	fcall	_I2C_Master_Stop
  1876  016B                     l4032:
  1877                           
  1878                           ;sensor_ctrl_main.c: 180:         _delay((unsigned long)((100)*(1000000/4000.0)));
  1879  016B  3021               	movlw	33
  1880  016C  1683               	bsf	3,5	;RP0=1, select bank3
  1881  016D  1703               	bsf	3,6	;RP1=1, select bank3
  1882  016E  00A0               	movwf	(??_main^(0+384)+1)
  1883  016F  3075               	movlw	117
  1884  0170  009F               	movwf	??_main^(0+384)
  1885  0171                     u3727:
  1886  0171  0B9F               	decfsz	??_main^(0+384),f
  1887  0172  2971               	goto	u3727
  1888  0173  0BA0               	decfsz	(??_main^(0+384)+1),f
  1889  0174  2971               	goto	u3727
  1890  0175  2976               	nop2
  1891  0176                     l4034:
  1892                           
  1893                           ;sensor_ctrl_main.c: 181:         RTC_sec = binTodec(RTC_sec);
  1894  0176  1283               	bcf	3,5	;RP0=0, select bank0
  1895  0177  1303               	bcf	3,6	;RP1=0, select bank0
  1896  0178  0840               	movf	_RTC_sec,w
  1897  0179  120A  158A  2183  120A  118A  	fcall	_binTodec
  1898  017E  1683               	bsf	3,5	;RP0=1, select bank3
  1899  017F  1703               	bsf	3,6	;RP1=1, select bank3
  1900  0180  009F               	movwf	??_main^(0+384)
  1901  0181  01A0               	clrf	(??_main^(0+384)+1)
  1902  0182  081F               	movf	??_main^(0+384),w
  1903  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1904  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1905  0185  00C0               	movwf	_RTC_sec
  1906  0186  1683               	bsf	3,5	;RP0=1, select bank3
  1907  0187  1703               	bsf	3,6	;RP1=1, select bank3
  1908  0188  0820               	movf	(??_main+1)^(0+384),w
  1909  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1910  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1911  018B  00C1               	movwf	_RTC_sec+1
  1912  018C                     l4036:
  1913                           
  1914                           ;sensor_ctrl_main.c: 182:         RTC_min = binTodec(RTC_min);
  1915  018C  083E               	movf	_RTC_min,w
  1916  018D  120A  158A  2183  120A  118A  	fcall	_binTodec
  1917  0192  1683               	bsf	3,5	;RP0=1, select bank3
  1918  0193  1703               	bsf	3,6	;RP1=1, select bank3
  1919  0194  009F               	movwf	??_main^(0+384)
  1920  0195  01A0               	clrf	(??_main^(0+384)+1)
  1921  0196  081F               	movf	??_main^(0+384),w
  1922  0197  1283               	bcf	3,5	;RP0=0, select bank0
  1923  0198  1303               	bcf	3,6	;RP1=0, select bank0
  1924  0199  00BE               	movwf	_RTC_min
  1925  019A  1683               	bsf	3,5	;RP0=1, select bank3
  1926  019B  1703               	bsf	3,6	;RP1=1, select bank3
  1927  019C  0820               	movf	(??_main+1)^(0+384),w
  1928  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1929  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1930  019F  00BF               	movwf	_RTC_min+1
  1931  01A0                     l4038:
  1932                           
  1933                           ;sensor_ctrl_main.c: 183:         RTC_hor = binTodec(RTC_hor);
  1934  01A0  083C               	movf	_RTC_hor,w
  1935  01A1  120A  158A  2183  120A  118A  	fcall	_binTodec
  1936  01A6  1683               	bsf	3,5	;RP0=1, select bank3
  1937  01A7  1703               	bsf	3,6	;RP1=1, select bank3
  1938  01A8  009F               	movwf	??_main^(0+384)
  1939  01A9  01A0               	clrf	(??_main^(0+384)+1)
  1940  01AA  081F               	movf	??_main^(0+384),w
  1941  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1942  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1943  01AD  00BC               	movwf	_RTC_hor
  1944  01AE  1683               	bsf	3,5	;RP0=1, select bank3
  1945  01AF  1703               	bsf	3,6	;RP1=1, select bank3
  1946  01B0  0820               	movf	(??_main+1)^(0+384),w
  1947  01B1  1283               	bcf	3,5	;RP0=0, select bank0
  1948  01B2  1303               	bcf	3,6	;RP1=0, select bank0
  1949  01B3  00BD               	movwf	_RTC_hor+1
  1950  01B4                     l4040:
  1951                           
  1952                           ;sensor_ctrl_main.c: 184:         sprintf(RTC_sec_str, "%02d", RTC_sec);
  1953  01B4  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1954  01B5  1683               	bsf	3,5	;RP0=1, select bank3
  1955  01B6  1703               	bsf	3,6	;RP1=1, select bank3
  1956  01B7  009F               	movwf	??_main^(0+384)
  1957  01B8  081F               	movf	??_main^(0+384),w
  1958  01B9  0090               	movwf	sprintf@f^(0+384)
  1959  01BA  1283               	bcf	3,5	;RP0=0, select bank0
  1960  01BB  1303               	bcf	3,6	;RP1=0, select bank0
  1961  01BC  0841               	movf	_RTC_sec+1,w
  1962  01BD  1683               	bsf	3,5	;RP0=1, select bank3
  1963  01BE  1703               	bsf	3,6	;RP1=1, select bank3
  1964  01BF  0092               	movwf	((?_sprintf+1)^(0+384)+1)
  1965  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1966  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1967  01C2  0840               	movf	_RTC_sec,w
  1968  01C3  1683               	bsf	3,5	;RP0=1, select bank3
  1969  01C4  1703               	bsf	3,6	;RP1=1, select bank3
  1970  01C5  0091               	movwf	(?_sprintf^(0+384)+1)
  1971  01C6  30BA               	movlw	(low (_RTC_sec_str| 0))& (0+255)
  1972  01C7  120A  118A  24BF  120A  118A  	fcall	_sprintf
  1973  01CC                     l4042:
  1974                           
  1975                           ;sensor_ctrl_main.c: 185:         sprintf(RTC_min_str, "%02d", RTC_min);
  1976  01CC  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1977  01CD  1683               	bsf	3,5	;RP0=1, select bank3
  1978  01CE  1703               	bsf	3,6	;RP1=1, select bank3
  1979  01CF  009F               	movwf	??_main^(0+384)
  1980  01D0  081F               	movf	??_main^(0+384),w
  1981  01D1  0090               	movwf	sprintf@f^(0+384)
  1982  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  1983  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  1984  01D4  083F               	movf	_RTC_min+1,w
  1985  01D5  1683               	bsf	3,5	;RP0=1, select bank3
  1986  01D6  1703               	bsf	3,6	;RP1=1, select bank3
  1987  01D7  0092               	movwf	((?_sprintf+1)^(0+384)+1)
  1988  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  1989  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  1990  01DA  083E               	movf	_RTC_min,w
  1991  01DB  1683               	bsf	3,5	;RP0=1, select bank3
  1992  01DC  1703               	bsf	3,6	;RP1=1, select bank3
  1993  01DD  0091               	movwf	(?_sprintf^(0+384)+1)
  1994  01DE  30B0               	movlw	(low (_RTC_min_str| 0))& (0+255)
  1995  01DF  120A  118A  24BF  120A  118A  	fcall	_sprintf
  1996  01E4                     l4044:
  1997                           
  1998                           ;sensor_ctrl_main.c: 186:         sprintf(RTC_hor_str, "%02d", RTC_hor);
  1999  01E4  3027               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  2000  01E5  1683               	bsf	3,5	;RP0=1, select bank3
  2001  01E6  1703               	bsf	3,6	;RP1=1, select bank3
  2002  01E7  009F               	movwf	??_main^(0+384)
  2003  01E8  081F               	movf	??_main^(0+384),w
  2004  01E9  0090               	movwf	sprintf@f^(0+384)
  2005  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  2006  01EB  1303               	bcf	3,6	;RP1=0, select bank0
  2007  01EC  083D               	movf	_RTC_hor+1,w
  2008  01ED  1683               	bsf	3,5	;RP0=1, select bank3
  2009  01EE  1703               	bsf	3,6	;RP1=1, select bank3
  2010  01EF  0092               	movwf	((?_sprintf+1)^(0+384)+1)
  2011  01F0  1283               	bcf	3,5	;RP0=0, select bank0
  2012  01F1  1303               	bcf	3,6	;RP1=0, select bank0
  2013  01F2  083C               	movf	_RTC_hor,w
  2014  01F3  1683               	bsf	3,5	;RP0=1, select bank3
  2015  01F4  1703               	bsf	3,6	;RP1=1, select bank3
  2016  01F5  0091               	movwf	(?_sprintf^(0+384)+1)
  2017  01F6  30A6               	movlw	(low (_RTC_hor_str| 0))& (0+255)
  2018  01F7  120A  118A  24BF  120A  118A  	fcall	_sprintf
  2019  01FC                     l4046:
  2020                           
  2021                           ;sensor_ctrl_main.c: 192:         if (HS_val >= 384){
  2022  01FC  3001               	movlw	1
  2023  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2024  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2025  01FF  0247               	subwf	_HS_val+1,w
  2026  0200  3080               	movlw	128
  2027  0201  1903               	skipnz
  2028  0202  0246               	subwf	_HS_val,w
  2029  0203  1C03               	skipc
  2030  0204  2A06               	goto	u3541
  2031  0205  2A07               	goto	u3540
  2032  0206                     u3541:
  2033  0206  2A20               	goto	l4052
  2034  0207                     u3540:
  2035  0207                     l4048:
  2036                           
  2037                           ;sensor_ctrl_main.c: 193:             HS_flag = 49;
  2038  0207  3031               	movlw	49
  2039  0208  1683               	bsf	3,5	;RP0=1, select bank3
  2040  0209  1703               	bsf	3,6	;RP1=1, select bank3
  2041  020A  009F               	movwf	??_main^(0+384)
  2042  020B  081F               	movf	??_main^(0+384),w
  2043  020C  1283               	bcf	3,5	;RP0=0, select bank0
  2044  020D  1303               	bcf	3,6	;RP1=0, select bank0
  2045  020E  00CE               	movwf	_HS_flag
  2046  020F                     l4050:
  2047                           
  2048                           ;sensor_ctrl_main.c: 194:             sprintf(HS_flag_str, "%d", HS_flag);
  2049  020F  3037               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2050  0210  1683               	bsf	3,5	;RP0=1, select bank3
  2051  0211  1703               	bsf	3,6	;RP1=1, select bank3
  2052  0212  009F               	movwf	??_main^(0+384)
  2053  0213  081F               	movf	??_main^(0+384),w
  2054  0214  0090               	movwf	sprintf@f^(0+384)
  2055  0215  3031               	movlw	49
  2056  0216  0091               	movwf	(?_sprintf^(0+384)+1)
  2057  0217  3000               	movlw	0
  2058  0218  0092               	movwf	(?_sprintf^(0+384)+2)
  2059  0219  30CE               	movlw	(low (_HS_flag_str| 0))& (0+255)
  2060  021A  120A  118A  24BF  120A  118A  	fcall	_sprintf
  2061                           
  2062                           ;sensor_ctrl_main.c: 195:         }
  2063  021F  2A41               	goto	l4058
  2064  0220                     l4052:
  2065  0220  3001               	movlw	1
  2066  0221  0247               	subwf	_HS_val+1,w
  2067  0222  3067               	movlw	103
  2068  0223  1903               	skipnz
  2069  0224  0246               	subwf	_HS_val,w
  2070  0225  1803               	skipnc
  2071  0226  2A28               	goto	u3551
  2072  0227  2A29               	goto	u3550
  2073  0228                     u3551:
  2074  0228  2A41               	goto	l4058
  2075  0229                     u3550:
  2076  0229                     l4054:
  2077                           
  2078                           ;sensor_ctrl_main.c: 197:             HS_flag = 48;
  2079  0229  3030               	movlw	48
  2080  022A  1683               	bsf	3,5	;RP0=1, select bank3
  2081  022B  1703               	bsf	3,6	;RP1=1, select bank3
  2082  022C  009F               	movwf	??_main^(0+384)
  2083  022D  081F               	movf	??_main^(0+384),w
  2084  022E  1283               	bcf	3,5	;RP0=0, select bank0
  2085  022F  1303               	bcf	3,6	;RP1=0, select bank0
  2086  0230  00CE               	movwf	_HS_flag
  2087  0231                     l4056:
  2088                           
  2089                           ;sensor_ctrl_main.c: 198:             sprintf(HS_flag_str, "%d", HS_flag);
  2090  0231  3037               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  2091  0232  1683               	bsf	3,5	;RP0=1, select bank3
  2092  0233  1703               	bsf	3,6	;RP1=1, select bank3
  2093  0234  009F               	movwf	??_main^(0+384)
  2094  0235  081F               	movf	??_main^(0+384),w
  2095  0236  0090               	movwf	sprintf@f^(0+384)
  2096  0237  3030               	movlw	48
  2097  0238  0091               	movwf	(?_sprintf^(0+384)+1)
  2098  0239  3000               	movlw	0
  2099  023A  0092               	movwf	(?_sprintf^(0+384)+2)
  2100  023B  30CE               	movlw	(low (_HS_flag_str| 0))& (0+255)
  2101  023C  120A  118A  24BF  120A  118A  	fcall	_sprintf
  2102  0241                     l4058:
  2103                           
  2104                           ;sensor_ctrl_main.c: 202:         if (spst == 0){
  2105  0241  1283               	bcf	3,5	;RP0=0, select bank0
  2106  0242  1303               	bcf	3,6	;RP1=0, select bank0
  2107  0243  084D               	movf	_spst,w
  2108  0244  1D03               	btfss	3,2
  2109  0245  2A47               	goto	u3561
  2110  0246  2A48               	goto	u3560
  2111  0247                     u3561:
  2112  0247  2A51               	goto	l4062
  2113  0248                     u3560:
  2114  0248                     l4060:
  2115                           
  2116                           ;sensor_ctrl_main.c: 203:             spst_flag = 50;
  2117  0248  3032               	movlw	50
  2118  0249  1683               	bsf	3,5	;RP0=1, select bank3
  2119  024A  1703               	bsf	3,6	;RP1=1, select bank3
  2120  024B  009F               	movwf	??_main^(0+384)
  2121  024C  081F               	movf	??_main^(0+384),w
  2122  024D  1283               	bcf	3,5	;RP0=0, select bank0
  2123  024E  1303               	bcf	3,6	;RP1=0, select bank0
  2124  024F  00CB               	movwf	_spst_flag
  2125                           
  2126                           ;sensor_ctrl_main.c: 204:         }
  2127  0250  2A5E               	goto	l180
  2128  0251                     l4062:
  2129  0251  034D               	decf	_spst,w
  2130  0252  1D03               	btfss	3,2
  2131  0253  2A55               	goto	u3571
  2132  0254  2A56               	goto	u3570
  2133  0255                     u3571:
  2134  0255  2A5E               	goto	l180
  2135  0256                     u3570:
  2136  0256                     l4064:
  2137                           
  2138                           ;sensor_ctrl_main.c: 206:             spst_flag = 51;
  2139  0256  3033               	movlw	51
  2140  0257  1683               	bsf	3,5	;RP0=1, select bank3
  2141  0258  1703               	bsf	3,6	;RP1=1, select bank3
  2142  0259  009F               	movwf	??_main^(0+384)
  2143  025A  081F               	movf	??_main^(0+384),w
  2144  025B  1283               	bcf	3,5	;RP0=0, select bank0
  2145  025C  1303               	bcf	3,6	;RP1=0, select bank0
  2146  025D  00CB               	movwf	_spst_flag
  2147  025E                     l180:
  2148                           
  2149                           ;sensor_ctrl_main.c: 209:         if (temperatura <= 25 && temperatura == 255){
  2150  025E  3000               	movlw	0
  2151  025F  0243               	subwf	_temperatura+1,w
  2152  0260  301A               	movlw	26
  2153  0261  1903               	skipnz
  2154  0262  0242               	subwf	_temperatura,w
  2155  0263  1803               	skipnc
  2156  0264  2A66               	goto	u3581
  2157  0265  2A67               	goto	u3580
  2158  0266                     u3581:
  2159  0266  2A76               	goto	l4070
  2160  0267                     u3580:
  2161  0267                     l4066:
  2162  0267  0A42               	incf	_temperatura,w
  2163  0268  0443               	iorwf	_temperatura+1,w
  2164  0269  1D03               	btfss	3,2
  2165  026A  2A6C               	goto	u3591
  2166  026B  2A6D               	goto	u3590
  2167  026C                     u3591:
  2168  026C  2A76               	goto	l4070
  2169  026D                     u3590:
  2170  026D                     l4068:
  2171                           
  2172                           ;sensor_ctrl_main.c: 210:             temp_flag = 52;
  2173  026D  3034               	movlw	52
  2174  026E  1683               	bsf	3,5	;RP0=1, select bank3
  2175  026F  1703               	bsf	3,6	;RP1=1, select bank3
  2176  0270  009F               	movwf	??_main^(0+384)
  2177  0271  081F               	movf	??_main^(0+384),w
  2178  0272  1283               	bcf	3,5	;RP0=0, select bank0
  2179  0273  1303               	bcf	3,6	;RP1=0, select bank0
  2180  0274  00CA               	movwf	_temp_flag
  2181                           
  2182                           ;sensor_ctrl_main.c: 211:         }
  2183  0275  2A90               	goto	l4076
  2184  0276                     l4070:
  2185  0276  3000               	movlw	0
  2186  0277  0243               	subwf	_temperatura+1,w
  2187  0278  301B               	movlw	27
  2188  0279  1903               	skipnz
  2189  027A  0242               	subwf	_temperatura,w
  2190  027B  1C03               	skipc
  2191  027C  2A7E               	goto	u3601
  2192  027D  2A7F               	goto	u3600
  2193  027E                     u3601:
  2194  027E  2A90               	goto	l4076
  2195  027F                     u3600:
  2196  027F                     l4072:
  2197  027F  3000               	movlw	0
  2198  0280  0243               	subwf	_temperatura+1,w
  2199  0281  3020               	movlw	32
  2200  0282  1903               	skipnz
  2201  0283  0242               	subwf	_temperatura,w
  2202  0284  1803               	skipnc
  2203  0285  2A87               	goto	u3611
  2204  0286  2A88               	goto	u3610
  2205  0287                     u3611:
  2206  0287  2A90               	goto	l4076
  2207  0288                     u3610:
  2208  0288                     l4074:
  2209                           
  2210                           ;sensor_ctrl_main.c: 213:             temp_flag = 53;
  2211  0288  3035               	movlw	53
  2212  0289  1683               	bsf	3,5	;RP0=1, select bank3
  2213  028A  1703               	bsf	3,6	;RP1=1, select bank3
  2214  028B  009F               	movwf	??_main^(0+384)
  2215  028C  081F               	movf	??_main^(0+384),w
  2216  028D  1283               	bcf	3,5	;RP0=0, select bank0
  2217  028E  1303               	bcf	3,6	;RP1=0, select bank0
  2218  028F  00CA               	movwf	_temp_flag
  2219  0290                     l4076:
  2220                           
  2221                           ;sensor_ctrl_main.c: 215:         if (disp == 0){
  2222  0290  084C               	movf	_disp,w
  2223  0291  1D03               	btfss	3,2
  2224  0292  2A94               	goto	u3621
  2225  0293  2A95               	goto	u3620
  2226  0294                     u3621:
  2227  0294  2C3D               	goto	l185
  2228  0295                     u3620:
  2229  0295                     l4078:
  2230                           
  2231                           ;sensor_ctrl_main.c: 219:             Lcd_Set_Cursor(0,0);
  2232  0295  1683               	bsf	3,5	;RP0=1, select bank1
  2233  0296  1303               	bcf	3,6	;RP1=0, select bank1
  2234  0297  01E5               	clrf	Lcd_Set_Cursor@b^(0+128)
  2235  0298  3000               	movlw	0
  2236  0299  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2237  029E                     l4080:
  2238                           
  2239                           ;sensor_ctrl_main.c: 220:             Lcd_Write_String("Hum:");
  2240  029E  301D               	movlw	(low ((STR_8-__stringbase)| (0+32768)))& (0+255)
  2241  029F  1683               	bsf	3,5	;RP0=1, select bank1
  2242  02A0  1303               	bcf	3,6	;RP1=0, select bank1
  2243  02A1  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2244  02A2  3080               	movlw	128
  2245  02A3  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2246  02A4  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2247  02A9                     l4082:
  2248                           
  2249                           ;sensor_ctrl_main.c: 221:             if (HS_val < 466 & HS_val > 221){
  2250  02A9  3001               	movlw	1
  2251  02AA  1283               	bcf	3,5	;RP0=0, select bank0
  2252  02AB  1303               	bcf	3,6	;RP1=0, select bank0
  2253  02AC  0247               	subwf	_HS_val+1,w
  2254  02AD  30D2               	movlw	210
  2255  02AE  1903               	skipnz
  2256  02AF  0246               	subwf	_HS_val,w
  2257  02B0  1803               	skipnc
  2258  02B1  2AB3               	goto	u3631
  2259  02B2  2AB4               	goto	u3630
  2260  02B3                     u3631:
  2261  02B3  2AE7               	goto	l4092
  2262  02B4                     u3630:
  2263  02B4                     l4084:
  2264  02B4  3000               	movlw	0
  2265  02B5  0247               	subwf	_HS_val+1,w
  2266  02B6  30DE               	movlw	222
  2267  02B7  1903               	skipnz
  2268  02B8  0246               	subwf	_HS_val,w
  2269  02B9  1C03               	skipc
  2270  02BA  2ABC               	goto	u3641
  2271  02BB  2ABD               	goto	u3640
  2272  02BC                     u3641:
  2273  02BC  2AE7               	goto	l4092
  2274  02BD                     u3640:
  2275  02BD                     l4086:
  2276                           
  2277                           ;sensor_ctrl_main.c: 222:                 Lcd_Set_Cursor(1,0);
  2278  02BD  1683               	bsf	3,5	;RP0=1, select bank1
  2279  02BE  1303               	bcf	3,6	;RP1=0, select bank1
  2280  02BF  01E5               	clrf	Lcd_Set_Cursor@b^(0+128)
  2281  02C0  3001               	movlw	1
  2282  02C1  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2283  02C6                     l4088:
  2284                           
  2285                           ;sensor_ctrl_main.c: 223:                 Lcd_Write_String(" ");
  2286  02C6  300F               	movlw	(low (((STR_2+4)-__stringbase)| (0+32768)))& (0+255)
  2287  02C7  1683               	bsf	3,5	;RP0=1, select bank1
  2288  02C8  1303               	bcf	3,6	;RP1=0, select bank1
  2289  02C9  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2290  02CA  3080               	movlw	128
  2291  02CB  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2292  02CC  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2293  02D1                     l4090:
  2294                           
  2295                           ;sensor_ctrl_main.c: 224:                 Lcd_Set_Cursor(1,1);
  2296  02D1  1683               	bsf	3,5	;RP0=1, select bank1
  2297  02D2  1303               	bcf	3,6	;RP1=0, select bank1
  2298  02D3  01E5               	clrf	Lcd_Set_Cursor@b^(0+128)
  2299  02D4  0AE5               	incf	Lcd_Set_Cursor@b^(0+128),f
  2300  02D5  3001               	movlw	1
  2301  02D6  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2302                           
  2303                           ;sensor_ctrl_main.c: 225:                 Lcd_Write_String(HS_str);
  2304  02DB  30D8               	movlw	(low (_HS_str| 0))& (0+255)
  2305  02DC  1683               	bsf	3,5	;RP0=1, select bank1
  2306  02DD  1303               	bcf	3,6	;RP1=0, select bank1
  2307  02DE  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2308  02DF  3000               	movlw	0
  2309  02E0  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2310  02E1  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2311                           
  2312                           ;sensor_ctrl_main.c: 226:             }
  2313  02E6  2B37               	goto	l4106
  2314  02E7                     l4092:
  2315  02E7  3001               	movlw	1
  2316  02E8  0247               	subwf	_HS_val+1,w
  2317  02E9  30CD               	movlw	205
  2318  02EA  1903               	skipnz
  2319  02EB  0246               	subwf	_HS_val,w
  2320  02EC  1C03               	skipc
  2321  02ED  2AEF               	goto	u3651
  2322  02EE  2AF0               	goto	u3650
  2323  02EF                     u3651:
  2324  02EF  2B1A               	goto	l4100
  2325  02F0                     u3650:
  2326  02F0                     l4094:
  2327                           
  2328                           ;sensor_ctrl_main.c: 228:                 Lcd_Set_Cursor(1,0);
  2329  02F0  1683               	bsf	3,5	;RP0=1, select bank1
  2330  02F1  1303               	bcf	3,6	;RP1=0, select bank1
  2331  02F2  01E5               	clrf	Lcd_Set_Cursor@b^(0+128)
  2332  02F3  3001               	movlw	1
  2333  02F4  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2334  02F9                     l4096:
  2335                           
  2336                           ;sensor_ctrl_main.c: 229:                 Lcd_Write_String(" ");
  2337  02F9  300F               	movlw	(low (((STR_2+4)-__stringbase)| (0+32768)))& (0+255)
  2338  02FA  1683               	bsf	3,5	;RP0=1, select bank1
  2339  02FB  1303               	bcf	3,6	;RP1=0, select bank1
  2340  02FC  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2341  02FD  3080               	movlw	128
  2342  02FE  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2343  02FF  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2344  0304                     l4098:
  2345                           
  2346                           ;sensor_ctrl_main.c: 230:                 Lcd_Set_Cursor(1,1);
  2347  0304  1683               	bsf	3,5	;RP0=1, select bank1
  2348  0305  1303               	bcf	3,6	;RP1=0, select bank1
  2349  0306  01E5               	clrf	Lcd_Set_Cursor@b^(0+128)
  2350  0307  0AE5               	incf	Lcd_Set_Cursor@b^(0+128),f
  2351  0308  3001               	movlw	1
  2352  0309  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2353                           
  2354                           ;sensor_ctrl_main.c: 231:                 Lcd_Write_String("00");
  2355  030E  302D               	movlw	(low (((STR_12+1)-__stringbase)| (0+32768)))& (0+255)
  2356  030F  1683               	bsf	3,5	;RP0=1, select bank1
  2357  0310  1303               	bcf	3,6	;RP1=0, select bank1
  2358  0311  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2359  0312  3080               	movlw	128
  2360  0313  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2361  0314  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2362                           
  2363                           ;sensor_ctrl_main.c: 232:             }
  2364  0319  2B37               	goto	l4106
  2365  031A                     l4100:
  2366  031A  3000               	movlw	0
  2367  031B  0247               	subwf	_HS_val+1,w
  2368  031C  30DC               	movlw	220
  2369  031D  1903               	skipnz
  2370  031E  0246               	subwf	_HS_val,w
  2371  031F  1803               	skipnc
  2372  0320  2B22               	goto	u3661
  2373  0321  2B23               	goto	u3660
  2374  0322                     u3661:
  2375  0322  2B37               	goto	l4106
  2376  0323                     u3660:
  2377  0323                     l4102:
  2378                           
  2379                           ;sensor_ctrl_main.c: 234:                 Lcd_Set_Cursor(1,0);
  2380  0323  1683               	bsf	3,5	;RP0=1, select bank1
  2381  0324  1303               	bcf	3,6	;RP1=0, select bank1
  2382  0325  01E5               	clrf	Lcd_Set_Cursor@b^(0+128)
  2383  0326  3001               	movlw	1
  2384  0327  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2385  032C                     l4104:
  2386                           
  2387                           ;sensor_ctrl_main.c: 235:                 Lcd_Write_String("100");
  2388  032C  302C               	movlw	(low ((STR_12-__stringbase)| (0+32768)))& (0+255)
  2389  032D  1683               	bsf	3,5	;RP0=1, select bank1
  2390  032E  1303               	bcf	3,6	;RP1=0, select bank1
  2391  032F  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2392  0330  3080               	movlw	128
  2393  0331  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2394  0332  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2395  0337                     l4106:
  2396                           
  2397                           ;sensor_ctrl_main.c: 237:             Lcd_Set_Cursor(1,3);
  2398  0337  3003               	movlw	3
  2399  0338  1683               	bsf	3,5	;RP0=1, select bank3
  2400  0339  1703               	bsf	3,6	;RP1=1, select bank3
  2401  033A  009F               	movwf	??_main^(0+384)
  2402  033B  081F               	movf	??_main^(0+384),w
  2403  033C  1683               	bsf	3,5	;RP0=1, select bank1
  2404  033D  1303               	bcf	3,6	;RP1=0, select bank1
  2405  033E  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2406  033F  3001               	movlw	1
  2407  0340  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2408                           
  2409                           ;sensor_ctrl_main.c: 238:             Lcd_Write_String("%");
  2410  0345  303D               	movlw	(low ((STR_13-__stringbase)| (0+32768)))& (0+255)
  2411  0346  1683               	bsf	3,5	;RP0=1, select bank1
  2412  0347  1303               	bcf	3,6	;RP1=0, select bank1
  2413  0348  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2414  0349  3080               	movlw	128
  2415  034A  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2416  034B  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2417  0350                     l4108:
  2418                           
  2419                           ;sensor_ctrl_main.c: 244:             Lcd_Set_Cursor(0,5);
  2420  0350  3005               	movlw	5
  2421  0351  1683               	bsf	3,5	;RP0=1, select bank3
  2422  0352  1703               	bsf	3,6	;RP1=1, select bank3
  2423  0353  009F               	movwf	??_main^(0+384)
  2424  0354  081F               	movf	??_main^(0+384),w
  2425  0355  1683               	bsf	3,5	;RP0=1, select bank1
  2426  0356  1303               	bcf	3,6	;RP1=0, select bank1
  2427  0357  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2428  0358  3000               	movlw	0
  2429  0359  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2430  035E                     l4110:
  2431                           
  2432                           ;sensor_ctrl_main.c: 245:             Lcd_Write_String("Bot:");
  2433  035E  3022               	movlw	(low ((STR_14-__stringbase)| (0+32768)))& (0+255)
  2434  035F  1683               	bsf	3,5	;RP0=1, select bank1
  2435  0360  1303               	bcf	3,6	;RP1=0, select bank1
  2436  0361  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2437  0362  3080               	movlw	128
  2438  0363  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2439  0364  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2440  0369                     l4112:
  2441                           
  2442                           ;sensor_ctrl_main.c: 246:             if (spst == 0){
  2443  0369  1283               	bcf	3,5	;RP0=0, select bank0
  2444  036A  1303               	bcf	3,6	;RP1=0, select bank0
  2445  036B  084D               	movf	_spst,w
  2446  036C  1D03               	btfss	3,2
  2447  036D  2B6F               	goto	u3671
  2448  036E  2B70               	goto	u3670
  2449  036F                     u3671:
  2450  036F  2B8A               	goto	l4118
  2451  0370                     u3670:
  2452  0370                     l4114:
  2453                           
  2454                           ;sensor_ctrl_main.c: 247:                 Lcd_Set_Cursor(1,5);
  2455  0370  3005               	movlw	5
  2456  0371  1683               	bsf	3,5	;RP0=1, select bank3
  2457  0372  1703               	bsf	3,6	;RP1=1, select bank3
  2458  0373  009F               	movwf	??_main^(0+384)
  2459  0374  081F               	movf	??_main^(0+384),w
  2460  0375  1683               	bsf	3,5	;RP0=1, select bank1
  2461  0376  1303               	bcf	3,6	;RP1=0, select bank1
  2462  0377  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2463  0378  3001               	movlw	1
  2464  0379  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2465  037E                     l4116:
  2466                           
  2467                           ;sensor_ctrl_main.c: 248:                 Lcd_Write_String("Off");
  2468  037E  3030               	movlw	(low ((STR_15-__stringbase)| (0+32768)))& (0+255)
  2469  037F  1683               	bsf	3,5	;RP0=1, select bank1
  2470  0380  1303               	bcf	3,6	;RP1=0, select bank1
  2471  0381  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2472  0382  3080               	movlw	128
  2473  0383  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2474  0384  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2475                           
  2476                           ;sensor_ctrl_main.c: 249:             }
  2477  0389  2BC1               	goto	l4126
  2478  038A                     l4118:
  2479  038A  034D               	decf	_spst,w
  2480  038B  1D03               	btfss	3,2
  2481  038C  2B8E               	goto	u3681
  2482  038D  2B8F               	goto	u3680
  2483  038E                     u3681:
  2484  038E  2BC1               	goto	l4126
  2485  038F                     u3680:
  2486  038F                     l4120:
  2487                           
  2488                           ;sensor_ctrl_main.c: 251:                 Lcd_Set_Cursor(1,5);
  2489  038F  3005               	movlw	5
  2490  0390  1683               	bsf	3,5	;RP0=1, select bank3
  2491  0391  1703               	bsf	3,6	;RP1=1, select bank3
  2492  0392  009F               	movwf	??_main^(0+384)
  2493  0393  081F               	movf	??_main^(0+384),w
  2494  0394  1683               	bsf	3,5	;RP0=1, select bank1
  2495  0395  1303               	bcf	3,6	;RP1=0, select bank1
  2496  0396  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2497  0397  3001               	movlw	1
  2498  0398  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2499  039D                     l4122:
  2500                           
  2501                           ;sensor_ctrl_main.c: 252:                 Lcd_Write_String(" ");
  2502  039D  300F               	movlw	(low (((STR_2+4)-__stringbase)| (0+32768)))& (0+255)
  2503  039E  1683               	bsf	3,5	;RP0=1, select bank1
  2504  039F  1303               	bcf	3,6	;RP1=0, select bank1
  2505  03A0  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2506  03A1  3080               	movlw	128
  2507  03A2  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2508  03A3  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2509  03A8                     l4124:
  2510                           
  2511                           ;sensor_ctrl_main.c: 253:                 Lcd_Set_Cursor(1,6);
  2512  03A8  3006               	movlw	6
  2513  03A9  1683               	bsf	3,5	;RP0=1, select bank3
  2514  03AA  1703               	bsf	3,6	;RP1=1, select bank3
  2515  03AB  009F               	movwf	??_main^(0+384)
  2516  03AC  081F               	movf	??_main^(0+384),w
  2517  03AD  1683               	bsf	3,5	;RP0=1, select bank1
  2518  03AE  1303               	bcf	3,6	;RP1=0, select bank1
  2519  03AF  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2520  03B0  3001               	movlw	1
  2521  03B1  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2522                           
  2523                           ;sensor_ctrl_main.c: 254:                 Lcd_Write_String("On");
  2524  03B6  303A               	movlw	(low ((STR_17-__stringbase)| (0+32768)))& (0+255)
  2525  03B7  1683               	bsf	3,5	;RP0=1, select bank1
  2526  03B8  1303               	bcf	3,6	;RP1=0, select bank1
  2527  03B9  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2528  03BA  3080               	movlw	128
  2529  03BB  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2530  03BC  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2531  03C1                     l4126:
  2532                           
  2533                           ;sensor_ctrl_main.c: 258:             Lcd_Set_Cursor(0,10);
  2534  03C1  300A               	movlw	10
  2535  03C2  1683               	bsf	3,5	;RP0=1, select bank3
  2536  03C3  1703               	bsf	3,6	;RP1=1, select bank3
  2537  03C4  009F               	movwf	??_main^(0+384)
  2538  03C5  081F               	movf	??_main^(0+384),w
  2539  03C6  1683               	bsf	3,5	;RP0=1, select bank1
  2540  03C7  1303               	bcf	3,6	;RP1=0, select bank1
  2541  03C8  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2542  03C9  3000               	movlw	0
  2543  03CA  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2544  03CF                     l4128:
  2545                           
  2546                           ;sensor_ctrl_main.c: 259:             Lcd_Write_String("Temp:");
  2547  03CF  3017               	movlw	(low ((STR_18-__stringbase)| (0+32768)))& (0+255)
  2548  03D0  1683               	bsf	3,5	;RP0=1, select bank1
  2549  03D1  1303               	bcf	3,6	;RP1=0, select bank1
  2550  03D2  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2551  03D3  3080               	movlw	128
  2552  03D4  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2553  03D5  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2554                           
  2555                           ;sensor_ctrl_main.c: 260:             Lcd_Set_Cursor(1,12);
  2556  03DA  300C               	movlw	12
  2557  03DB  1683               	bsf	3,5	;RP0=1, select bank3
  2558  03DC  1703               	bsf	3,6	;RP1=1, select bank3
  2559  03DD  009F               	movwf	??_main^(0+384)
  2560  03DE  081F               	movf	??_main^(0+384),w
  2561  03DF  1683               	bsf	3,5	;RP0=1, select bank1
  2562  03E0  1303               	bcf	3,6	;RP1=0, select bank1
  2563  03E1  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2564  03E2  3001               	movlw	1
  2565  03E3  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2566  03E8                     l4130:
  2567                           
  2568                           ;sensor_ctrl_main.c: 261:             Lcd_Write_String(" ");
  2569  03E8  300F               	movlw	(low (((STR_2+4)-__stringbase)| (0+32768)))& (0+255)
  2570  03E9  1683               	bsf	3,5	;RP0=1, select bank1
  2571  03EA  1303               	bcf	3,6	;RP1=0, select bank1
  2572  03EB  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2573  03EC  3080               	movlw	128
  2574  03ED  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2575  03EE  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2576  03F3                     l4132:
  2577                           
  2578                           ;sensor_ctrl_main.c: 262:             if (temperatura != 255){
  2579  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2580  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2581  03F5  0A42               	incf	_temperatura,w
  2582  03F6  0443               	iorwf	_temperatura+1,w
  2583  03F7  1903               	btfsc	3,2
  2584  03F8  2BFA               	goto	u3691
  2585  03F9  2BFB               	goto	u3690
  2586  03FA                     u3691:
  2587  03FA  2C15               	goto	l4138
  2588  03FB                     u3690:
  2589  03FB                     l4134:
  2590                           
  2591                           ;sensor_ctrl_main.c: 263:                 Lcd_Set_Cursor(1,10);
  2592  03FB  300A               	movlw	10
  2593  03FC  1683               	bsf	3,5	;RP0=1, select bank3
  2594  03FD  1703               	bsf	3,6	;RP1=1, select bank3
  2595  03FE  009F               	movwf	??_main^(0+384)
  2596  03FF  081F               	movf	??_main^(0+384),w
  2597  0400  1683               	bsf	3,5	;RP0=1, select bank1
  2598  0401  1303               	bcf	3,6	;RP1=0, select bank1
  2599  0402  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2600  0403  3001               	movlw	1
  2601  0404  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2602  0409                     l4136:
  2603                           
  2604                           ;sensor_ctrl_main.c: 264:                 Lcd_Write_String(temp_str);
  2605  0409  30C4               	movlw	(low (_temp_str| 0))& (0+255)
  2606  040A  1683               	bsf	3,5	;RP0=1, select bank1
  2607  040B  1303               	bcf	3,6	;RP1=0, select bank1
  2608  040C  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2609  040D  3000               	movlw	0
  2610  040E  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2611  040F  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2612                           
  2613                           ;sensor_ctrl_main.c: 265:             }
  2614  0414  2CA3               	goto	l4158
  2615  0415                     l4138:
  2616  0415  0A42               	incf	_temperatura,w
  2617  0416  0443               	iorwf	_temperatura+1,w
  2618  0417  1D03               	btfss	3,2
  2619  0418  2C1A               	goto	u3701
  2620  0419  2C1B               	goto	u3700
  2621  041A                     u3701:
  2622  041A  2CA3               	goto	l4158
  2623  041B                     u3700:
  2624  041B                     l4140:
  2625                           
  2626                           ;sensor_ctrl_main.c: 267:                 temp_flag = 52;
  2627  041B  3034               	movlw	52
  2628  041C  1683               	bsf	3,5	;RP0=1, select bank3
  2629  041D  1703               	bsf	3,6	;RP1=1, select bank3
  2630  041E  009F               	movwf	??_main^(0+384)
  2631  041F  081F               	movf	??_main^(0+384),w
  2632  0420  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0421  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0422  00CA               	movwf	_temp_flag
  2635  0423                     l4142:
  2636                           
  2637                           ;sensor_ctrl_main.c: 268:                 Lcd_Set_Cursor(1,10);
  2638  0423  300A               	movlw	10
  2639  0424  1683               	bsf	3,5	;RP0=1, select bank3
  2640  0425  1703               	bsf	3,6	;RP1=1, select bank3
  2641  0426  009F               	movwf	??_main^(0+384)
  2642  0427  081F               	movf	??_main^(0+384),w
  2643  0428  1683               	bsf	3,5	;RP0=1, select bank1
  2644  0429  1303               	bcf	3,6	;RP1=0, select bank1
  2645  042A  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2646  042B  3001               	movlw	1
  2647  042C  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2648  0431                     l4144:
  2649                           
  2650                           ;sensor_ctrl_main.c: 269:                 Lcd_Write_String("25");
  2651  0431  3034               	movlw	(low ((STR_20-__stringbase)| (0+32768)))& (0+255)
  2652  0432  1683               	bsf	3,5	;RP0=1, select bank1
  2653  0433  1303               	bcf	3,6	;RP1=0, select bank1
  2654  0434  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2655  0435  3080               	movlw	128
  2656  0436  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2657  0437  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2658  043C  2CA3               	goto	l4158
  2659  043D                     l185:	
  2660                           ;sensor_ctrl_main.c: 275:         else if (disp = 1){
  2661                           
  2662  043D  01CC               	clrf	_disp
  2663  043E  0ACC               	incf	_disp,f
  2664  043F                     l4146:
  2665                           
  2666                           ;sensor_ctrl_main.c: 276:             Lcd_Set_Cursor(0,6);
  2667  043F  3006               	movlw	6
  2668  0440  1683               	bsf	3,5	;RP0=1, select bank3
  2669  0441  1703               	bsf	3,6	;RP1=1, select bank3
  2670  0442  009F               	movwf	??_main^(0+384)
  2671  0443  081F               	movf	??_main^(0+384),w
  2672  0444  1683               	bsf	3,5	;RP0=1, select bank1
  2673  0445  1303               	bcf	3,6	;RP1=0, select bank1
  2674  0446  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2675  0447  3000               	movlw	0
  2676  0448  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2677  044D                     l4148:
  2678                           
  2679                           ;sensor_ctrl_main.c: 277:             Lcd_Write_String("Hora:");
  2680  044D  3011               	movlw	(low ((STR_21-__stringbase)| (0+32768)))& (0+255)
  2681  044E  1683               	bsf	3,5	;RP0=1, select bank1
  2682  044F  1303               	bcf	3,6	;RP1=0, select bank1
  2683  0450  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2684  0451  3080               	movlw	128
  2685  0452  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2686  0453  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2687  0458                     l4150:
  2688                           
  2689                           ;sensor_ctrl_main.c: 278:             Lcd_Set_Cursor(1,6);
  2690  0458  3006               	movlw	6
  2691  0459  1683               	bsf	3,5	;RP0=1, select bank3
  2692  045A  1703               	bsf	3,6	;RP1=1, select bank3
  2693  045B  009F               	movwf	??_main^(0+384)
  2694  045C  081F               	movf	??_main^(0+384),w
  2695  045D  1683               	bsf	3,5	;RP0=1, select bank1
  2696  045E  1303               	bcf	3,6	;RP1=0, select bank1
  2697  045F  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2698  0460  3001               	movlw	1
  2699  0461  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2700                           
  2701                           ;sensor_ctrl_main.c: 279:             Lcd_Write_String(RTC_hor_str);
  2702  0466  30A6               	movlw	(low (_RTC_hor_str| 0))& (0+255)
  2703  0467  1683               	bsf	3,5	;RP0=1, select bank1
  2704  0468  1303               	bcf	3,6	;RP1=0, select bank1
  2705  0469  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2706  046A  3000               	movlw	0
  2707  046B  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2708  046C  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2709  0471                     l4152:
  2710                           
  2711                           ;sensor_ctrl_main.c: 280:             Lcd_Set_Cursor(1,8);
  2712  0471  3008               	movlw	8
  2713  0472  1683               	bsf	3,5	;RP0=1, select bank3
  2714  0473  1703               	bsf	3,6	;RP1=1, select bank3
  2715  0474  009F               	movwf	??_main^(0+384)
  2716  0475  081F               	movf	??_main^(0+384),w
  2717  0476  1683               	bsf	3,5	;RP0=1, select bank1
  2718  0477  1303               	bcf	3,6	;RP1=0, select bank1
  2719  0478  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2720  0479  3001               	movlw	1
  2721  047A  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2722  047F                     l4154:
  2723                           
  2724                           ;sensor_ctrl_main.c: 281:             Lcd_Write_String(":");
  2725  047F  3015               	movlw	(low (((STR_21+4)-__stringbase)| (0+32768)))& (0+255)
  2726  0480  1683               	bsf	3,5	;RP0=1, select bank1
  2727  0481  1303               	bcf	3,6	;RP1=0, select bank1
  2728  0482  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2729  0483  3080               	movlw	128
  2730  0484  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2731  0485  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2732                           
  2733                           ;sensor_ctrl_main.c: 282:             Lcd_Set_Cursor(1,9);
  2734  048A  3009               	movlw	9
  2735  048B  1683               	bsf	3,5	;RP0=1, select bank3
  2736  048C  1703               	bsf	3,6	;RP1=1, select bank3
  2737  048D  009F               	movwf	??_main^(0+384)
  2738  048E  081F               	movf	??_main^(0+384),w
  2739  048F  1683               	bsf	3,5	;RP0=1, select bank1
  2740  0490  1303               	bcf	3,6	;RP1=0, select bank1
  2741  0491  00E5               	movwf	Lcd_Set_Cursor@b^(0+128)
  2742  0492  3001               	movlw	1
  2743  0493  120A  158A  257E  120A  118A  	fcall	_Lcd_Set_Cursor
  2744  0498                     l4156:
  2745                           
  2746                           ;sensor_ctrl_main.c: 283:             Lcd_Write_String(RTC_min_str);
  2747  0498  30B0               	movlw	(low (_RTC_min_str| 0))& (0+255)
  2748  0499  1683               	bsf	3,5	;RP0=1, select bank1
  2749  049A  1303               	bcf	3,6	;RP1=0, select bank1
  2750  049B  00E7               	movwf	Lcd_Write_String@a^(0+128)
  2751  049C  3000               	movlw	0
  2752  049D  00E8               	movwf	(Lcd_Write_String@a+1)^(0+128)
  2753  049E  120A  158A  24D3  120A  118A  	fcall	_Lcd_Write_String
  2754  04A3                     l4158:
  2755                           
  2756                           ;sensor_ctrl_main.c: 290:         usartDataWrite(HS_flag);
  2757  04A3  1283               	bcf	3,5	;RP0=0, select bank0
  2758  04A4  1303               	bcf	3,6	;RP1=0, select bank0
  2759  04A5  084E               	movf	_HS_flag,w
  2760  04A6  120A  158A  21BC  120A  118A  	fcall	_usartDataWrite
  2761  04AB                     l4160:
  2762                           
  2763                           ;sensor_ctrl_main.c: 291:         usartDataWrite(spst_flag);
  2764  04AB  1283               	bcf	3,5	;RP0=0, select bank0
  2765  04AC  1303               	bcf	3,6	;RP1=0, select bank0
  2766  04AD  084B               	movf	_spst_flag,w
  2767  04AE  120A  158A  21BC  120A  118A  	fcall	_usartDataWrite
  2768  04B3                     l4162:
  2769                           
  2770                           ;sensor_ctrl_main.c: 292:         usartDataWrite(temp_flag);
  2771  04B3  1283               	bcf	3,5	;RP0=0, select bank0
  2772  04B4  1303               	bcf	3,6	;RP1=0, select bank0
  2773  04B5  084A               	movf	_temp_flag,w
  2774  04B6  120A  158A  21BC  120A  118A  	fcall	_usartDataWrite
  2775  04BB  287E               	goto	l3992
  2776  04BC  120A  118A  2812   	ljmp	start
  2777  04BF                     __end_of_main:
  2778                           
  2779                           	psect	text1
  2780  0969                     __ptext1:	
  2781 ;; *************** function _usartInitTransmit *****************
  2782 ;; Defined at:
  2783 ;;		line 18 in file "USART.c"
  2784 ;; Parameters:    Size  Location     Type
  2785 ;;		None
  2786 ;; Auto vars:     Size  Location     Type
  2787 ;;		None
  2788 ;; Return value:  Size  Location     Type
  2789 ;;                  1    wreg      void 
  2790 ;; Registers used:
  2791 ;;		wreg, status,2
  2792 ;; Tracked objects:
  2793 ;;		On entry : 0/0
  2794 ;;		On exit  : 0/0
  2795 ;;		Unchanged: 0/0
  2796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2797 ;;      Params:         0       0       0       0       0
  2798 ;;      Locals:         0       0       0       0       0
  2799 ;;      Temps:          0       0       0       0       0
  2800 ;;      Totals:         0       0       0       0       0
  2801 ;;Total ram usage:        0 bytes
  2802 ;; Hardware stack levels used: 1
  2803 ;; Hardware stack levels required when called: 4
  2804 ;; This function calls:
  2805 ;;		Nothing
  2806 ;; This function is called by:
  2807 ;;		_main
  2808 ;; This function uses a non-reentrant model
  2809 ;;
  2810                           
  2811  0969                     _usartInitTransmit:	
  2812                           ;psect for function _usartInitTransmit
  2813                           
  2814  0969                     l3830:	
  2815                           ;incstack = 0
  2816                           ; Regs used in _usartInitTransmit: [wreg+status,2]
  2817                           
  2818                           
  2819                           ;USART.c: 19:     TXSTAbits.TXEN = 1;
  2820  0969  1683               	bsf	3,5	;RP0=1, select bank1
  2821  096A  1303               	bcf	3,6	;RP1=0, select bank1
  2822  096B  1698               	bsf	24,5	;volatile
  2823                           
  2824                           ;USART.c: 20:     TXSTAbits.SYNC = 0;
  2825  096C  1218               	bcf	24,4	;volatile
  2826                           
  2827                           ;USART.c: 21:     RCSTAbits.SPEN = 1;
  2828  096D  1283               	bcf	3,5	;RP0=0, select bank0
  2829  096E  1303               	bcf	3,6	;RP1=0, select bank0
  2830  096F  1798               	bsf	24,7	;volatile
  2831                           
  2832                           ;USART.c: 22:     TXSTAbits.TX9 = 0;
  2833  0970  1683               	bsf	3,5	;RP0=1, select bank1
  2834  0971  1303               	bcf	3,6	;RP1=0, select bank1
  2835  0972  1318               	bcf	24,6	;volatile
  2836                           
  2837                           ;USART.c: 25:     TXSTAbits.BRGH = 1;
  2838  0973  1518               	bsf	24,2	;volatile
  2839                           
  2840                           ;USART.c: 26:     BAUDCTLbits.BRG16 = 1;
  2841  0974  1683               	bsf	3,5	;RP0=1, select bank3
  2842  0975  1703               	bsf	3,6	;RP1=1, select bank3
  2843  0976  1587               	bsf	7,3	;volatile
  2844  0977                     l3832:
  2845                           
  2846                           ;USART.c: 27:     SPBRG = 25;
  2847  0977  3019               	movlw	25
  2848  0978  1683               	bsf	3,5	;RP0=1, select bank1
  2849  0979  1303               	bcf	3,6	;RP1=0, select bank1
  2850  097A  0099               	movwf	25	;volatile
  2851  097B                     l3834:
  2852                           
  2853                           ;USART.c: 28:     SPBRGH = 0;
  2854  097B  019A               	clrf	26	;volatile
  2855  097C                     l3836:
  2856                           
  2857                           ;USART.c: 31:     RCSTAbits.CREN = 1;
  2858  097C  1283               	bcf	3,5	;RP0=0, select bank0
  2859  097D  1303               	bcf	3,6	;RP1=0, select bank0
  2860  097E  1618               	bsf	24,4	;volatile
  2861  097F                     l3838:
  2862                           
  2863                           ;USART.c: 32:     PIE1bits.RCIE = 1;
  2864  097F  1683               	bsf	3,5	;RP0=1, select bank1
  2865  0980  1303               	bcf	3,6	;RP1=0, select bank1
  2866  0981  168C               	bsf	12,5	;volatile
  2867  0982                     l233:
  2868  0982  0008               	return
  2869  0983                     __end_of_usartInitTransmit:
  2870                           
  2871                           	psect	text2
  2872  09BC                     __ptext2:	
  2873 ;; *************** function _usartDataWrite *****************
  2874 ;; Defined at:
  2875 ;;		line 36 in file "USART.c"
  2876 ;; Parameters:    Size  Location     Type
  2877 ;;  msg             1    wreg     unsigned char 
  2878 ;; Auto vars:     Size  Location     Type
  2879 ;;  msg             1    3[BANK1 ] unsigned char 
  2880 ;; Return value:  Size  Location     Type
  2881 ;;                  1    wreg      void 
  2882 ;; Registers used:
  2883 ;;		wreg
  2884 ;; Tracked objects:
  2885 ;;		On entry : 0/0
  2886 ;;		On exit  : 0/0
  2887 ;;		Unchanged: 0/0
  2888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2889 ;;      Params:         0       0       0       0       0
  2890 ;;      Locals:         0       0       1       0       0
  2891 ;;      Temps:          0       0       3       0       0
  2892 ;;      Totals:         0       0       4       0       0
  2893 ;;Total ram usage:        4 bytes
  2894 ;; Hardware stack levels used: 1
  2895 ;; Hardware stack levels required when called: 4
  2896 ;; This function calls:
  2897 ;;		Nothing
  2898 ;; This function is called by:
  2899 ;;		_main
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902                           
  2903  09BC                     _usartDataWrite:	
  2904                           ;psect for function _usartDataWrite
  2905                           
  2906                           
  2907                           ;incstack = 0
  2908                           ; Regs used in _usartDataWrite: [wreg]
  2909                           ;usartDataWrite@msg stored from wreg
  2910  09BC  1683               	bsf	3,5	;RP0=1, select bank1
  2911  09BD  1303               	bcf	3,6	;RP1=0, select bank1
  2912  09BE  00E5               	movwf	usartDataWrite@msg^(0+128)
  2913  09BF                     l3974:
  2914                           
  2915                           ;USART.c: 37:     _delay((unsigned long)((1000)*(1000000/4000.0)));
  2916  09BF  3002               	movlw	2
  2917  09C0  1683               	bsf	3,5	;RP0=1, select bank1
  2918  09C1  1303               	bcf	3,6	;RP1=0, select bank1
  2919  09C2  00E4               	movwf	(??_usartDataWrite^(0+128)+2)
  2920  09C3  3045               	movlw	69
  2921  09C4  00E3               	movwf	(??_usartDataWrite^(0+128)+1)
  2922  09C5  30A9               	movlw	169
  2923  09C6  00E2               	movwf	??_usartDataWrite^(0+128)
  2924  09C7                     u3737:
  2925  09C7  0BE2               	decfsz	??_usartDataWrite^(0+128),f
  2926  09C8  29C7               	goto	u3737
  2927  09C9  0BE3               	decfsz	(??_usartDataWrite^(0+128)+1),f
  2928  09CA  29C7               	goto	u3737
  2929  09CB  0BE4               	decfsz	(??_usartDataWrite^(0+128)+2),f
  2930  09CC  29C7               	goto	u3737
  2931  09CD                     l3976:
  2932                           
  2933                           ;USART.c: 38:     if (PIR1bits.TXIF){
  2934  09CD  1283               	bcf	3,5	;RP0=0, select bank0
  2935  09CE  1303               	bcf	3,6	;RP1=0, select bank0
  2936  09CF  1E0C               	btfss	12,4	;volatile
  2937  09D0  29D2               	goto	u3531
  2938  09D1  29D3               	goto	u3530
  2939  09D2                     u3531:
  2940  09D2  29D9               	goto	l237
  2941  09D3                     u3530:
  2942  09D3                     l3978:
  2943                           
  2944                           ;USART.c: 39:         TXREG = msg;
  2945  09D3  1683               	bsf	3,5	;RP0=1, select bank1
  2946  09D4  1303               	bcf	3,6	;RP1=0, select bank1
  2947  09D5  0865               	movf	usartDataWrite@msg^(0+128),w
  2948  09D6  1283               	bcf	3,5	;RP0=0, select bank0
  2949  09D7  1303               	bcf	3,6	;RP1=0, select bank0
  2950  09D8  0099               	movwf	25	;volatile
  2951  09D9                     l237:
  2952  09D9  0008               	return
  2953  09DA                     __end_of_usartDataWrite:
  2954                           
  2955                           	psect	text3
  2956  04BF                     __ptext3:	
  2957 ;; *************** function _sprintf *****************
  2958 ;; Defined at:
  2959 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
  2960 ;; Parameters:    Size  Location     Type
  2961 ;;  sp              1    wreg     PTR unsigned char 
  2962 ;;		 -> HS_flag_str(10), RTC_hor_str(10), RTC_min_str(10), RTC_sec_str(10), 
  2963 ;;		 -> temp_str(10), HS_str(10), 
  2964 ;;  f               1    0[BANK3 ] PTR const unsigned char 
  2965 ;;		 -> STR_7(3), STR_6(3), STR_5(5), STR_4(5), 
  2966 ;;		 -> STR_3(5), STR_2(6), STR_1(3), 
  2967 ;; Auto vars:     Size  Location     Type
  2968 ;;  sp              1   14[BANK3 ] PTR unsigned char 
  2969 ;;		 -> HS_flag_str(10), RTC_hor_str(10), RTC_min_str(10), RTC_sec_str(10), 
  2970 ;;		 -> temp_str(10), HS_str(10), 
  2971 ;;  tmpval          4    0        struct .
  2972 ;;  width           2   11[BANK3 ] int 
  2973 ;;  val             2    8[BANK3 ] unsigned int 
  2974 ;;  cp              2    0        PTR const unsigned char 
  2975 ;;  len             2    0        unsigned int 
  2976 ;;  c               1   13[BANK3 ] unsigned char 
  2977 ;;  flag            1   10[BANK3 ] unsigned char 
  2978 ;;  prec            1    7[BANK3 ] char 
  2979 ;;  ap              1    6[BANK3 ] PTR void [1]
  2980 ;;		 -> ?_sprintf(2), 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  2    0[BANK3 ] int 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2990 ;;      Params:         0       0       0       3       0
  2991 ;;      Locals:         0       0       0       9       0
  2992 ;;      Temps:          0       0       0       3       0
  2993 ;;      Totals:         0       0       0      15       0
  2994 ;;Total ram usage:       15 bytes
  2995 ;; Hardware stack levels used: 1
  2996 ;; Hardware stack levels required when called: 5
  2997 ;; This function calls:
  2998 ;;		___lwdiv
  2999 ;;		___lwmod
  3000 ;;		___wmul
  3001 ;;		_isdigit
  3002 ;; This function is called by:
  3003 ;;		_main
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007  04BF                     _sprintf:	
  3008                           ;psect for function _sprintf
  3009                           
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3013                           ;sprintf@sp stored from wreg
  3014  04BF  1683               	bsf	3,5	;RP0=1, select bank3
  3015  04C0  1703               	bsf	3,6	;RP1=1, select bank3
  3016  04C1  009E               	movwf	sprintf@sp^(0+384)
  3017  04C2                     l3616:
  3018                           
  3019                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  3020  04C2  3091               	movlw	(low ((?_sprintf| (0+256)+1)))& (0+255)
  3021  04C3  0093               	movwf	??_sprintf^(0+384)
  3022  04C4  0813               	movf	??_sprintf^(0+384),w
  3023  04C5  0096               	movwf	sprintf@ap^(0+384)
  3024                           
  3025                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3026  04C6  2E9A               	goto	l3720
  3027  04C7                     l3618:
  3028                           
  3029                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  3030  04C7  3025               	movlw	37
  3031  04C8  061D               	xorwf	sprintf@c^(0+384),w
  3032  04C9  1903               	btfsc	3,2
  3033  04CA  2CCC               	goto	u3241
  3034  04CB  2CCD               	goto	u3240
  3035  04CC                     u3241:
  3036  04CC  2CD9               	goto	l3624
  3037  04CD                     u3240:
  3038  04CD                     l3620:
  3039                           
  3040                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  3041  04CD  081D               	movf	sprintf@c^(0+384),w
  3042  04CE  0093               	movwf	??_sprintf^(0+384)
  3043  04CF  081E               	movf	sprintf@sp^(0+384),w
  3044  04D0  0084               	movwf	4
  3045  04D1  0813               	movf	??_sprintf^(0+384),w
  3046  04D2  1383               	bcf	3,7	;select IRP bank0
  3047  04D3  0080               	movwf	0
  3048  04D4                     l3622:
  3049  04D4  3001               	movlw	1
  3050  04D5  0093               	movwf	??_sprintf^(0+384)
  3051  04D6  0813               	movf	??_sprintf^(0+384),w
  3052  04D7  079E               	addwf	sprintf@sp^(0+384),f
  3053                           
  3054                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  3055  04D8  2E9A               	goto	l3720
  3056  04D9                     l3624:
  3057                           
  3058                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  3059  04D9  019B               	clrf	sprintf@width^(0+384)
  3060  04DA  019C               	clrf	(sprintf@width+1)^(0+384)
  3061                           
  3062                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  3063  04DB  019A               	clrf	sprintf@flag^(0+384)
  3064  04DC  2CE2               	goto	l3630
  3065  04DD                     l546:	
  3066                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  3067                           
  3068                           
  3069                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  3070  04DD  151A               	bsf	sprintf@flag^(0+384),2
  3071  04DE                     l3626:
  3072                           
  3073                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  3074  04DE  3001               	movlw	1
  3075  04DF  0093               	movwf	??_sprintf^(0+384)
  3076  04E0  0813               	movf	??_sprintf^(0+384),w
  3077  04E1  0790               	addwf	sprintf@f^(0+384),f
  3078  04E2                     l3630:	
  3079                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  3080                           
  3081  04E2  0810               	movf	sprintf@f^(0+384),w
  3082  04E3  0084               	movwf	4
  3083  04E4  120A  158A  200A  120A  118A  	fcall	stringdir
  3084  04E9  0093               	movwf	??_sprintf^(0+384)
  3085  04EA  0194               	clrf	(??_sprintf^(0+384)+1)
  3086                           
  3087                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3088                           ; Switch size 1, requested type "simple"
  3089                           ; Number of cases is 1, Range of values is 0 to 0
  3090                           ; switch strategies available:
  3091                           ; Name         Instructions Cycles
  3092                           ; simple_byte            4     3 (average)
  3093                           ; direct_byte           11     8 (fixed)
  3094                           ; jumptable            260     6 (fixed)
  3095                           ;	Chosen strategy is simple_byte
  3096  04EB  0814               	movf	(??_sprintf+1)^(0+384),w
  3097  04EC  3A00               	xorlw	0	; case 0
  3098  04ED  1903               	skipnz
  3099  04EE  2CF0               	goto	l4358
  3100  04EF  2CF5               	goto	l3632
  3101  04F0                     l4358:
  3102                           
  3103                           ; Switch size 1, requested type "simple"
  3104                           ; Number of cases is 1, Range of values is 48 to 48
  3105                           ; switch strategies available:
  3106                           ; Name         Instructions Cycles
  3107                           ; simple_byte            4     3 (average)
  3108                           ; direct_byte           14    11 (fixed)
  3109                           ; jumptable            263     9 (fixed)
  3110                           ;	Chosen strategy is simple_byte
  3111  04F0  0813               	movf	??_sprintf^(0+384),w
  3112  04F1  3A30               	xorlw	48	; case 48
  3113  04F2  1903               	skipnz
  3114  04F3  2CDD               	goto	l546
  3115  04F4  2CF5               	goto	l3632
  3116  04F5                     l3632:
  3117                           
  3118                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  3119  04F5  0810               	movf	sprintf@f^(0+384),w
  3120  04F6  0084               	movwf	4
  3121  04F7  120A  158A  200A  120A  118A  	fcall	stringdir
  3122  04FC  120A  158A  210D  120A  118A  	fcall	_isdigit
  3123  0501  1C03               	btfss	3,0
  3124  0502  2D04               	goto	u3251
  3125  0503  2D05               	goto	u3250
  3126  0504                     u3251:
  3127  0504  2D53               	goto	l3646
  3128  0505                     u3250:
  3129  0505                     l3634:
  3130                           
  3131                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  3132  0505  1683               	bsf	3,5	;RP0=1, select bank3
  3133  0506  1703               	bsf	3,6	;RP1=1, select bank3
  3134  0507  019B               	clrf	sprintf@width^(0+384)
  3135  0508  019C               	clrf	(sprintf@width+1)^(0+384)
  3136  0509                     l3636:
  3137                           
  3138                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  3139  0509  300A               	movlw	10
  3140  050A  1683               	bsf	3,5	;RP0=1, select bank1
  3141  050B  1303               	bcf	3,6	;RP1=0, select bank1
  3142  050C  00E2               	movwf	___wmul@multiplier^(0+128)
  3143  050D  3000               	movlw	0
  3144  050E  00E3               	movwf	(___wmul@multiplier^(0+128)+1)
  3145  050F  1683               	bsf	3,5	;RP0=1, select bank3
  3146  0510  1703               	bsf	3,6	;RP1=1, select bank3
  3147  0511  081C               	movf	(sprintf@width+1)^(0+384),w
  3148  0512  1683               	bsf	3,5	;RP0=1, select bank1
  3149  0513  1303               	bcf	3,6	;RP1=0, select bank1
  3150  0514  00E5               	movwf	(___wmul@multiplicand+1)^(0+128)
  3151  0515  1683               	bsf	3,5	;RP0=1, select bank3
  3152  0516  1703               	bsf	3,6	;RP1=1, select bank3
  3153  0517  081B               	movf	sprintf@width^(0+384),w
  3154  0518  1683               	bsf	3,5	;RP0=1, select bank1
  3155  0519  1303               	bcf	3,6	;RP1=0, select bank1
  3156  051A  00E4               	movwf	___wmul@multiplicand^(0+128)
  3157  051B  120A  158A  2221  120A  118A  	fcall	___wmul
  3158  0520  1683               	bsf	3,5	;RP0=1, select bank1
  3159  0521  1303               	bcf	3,6	;RP1=0, select bank1
  3160  0522  0863               	movf	(?___wmul+1)^(0+128),w
  3161  0523  1683               	bsf	3,5	;RP0=1, select bank3
  3162  0524  1703               	bsf	3,6	;RP1=1, select bank3
  3163  0525  009C               	movwf	(sprintf@width+1)^(0+384)
  3164  0526  1683               	bsf	3,5	;RP0=1, select bank1
  3165  0527  1303               	bcf	3,6	;RP1=0, select bank1
  3166  0528  0862               	movf	?___wmul^(0+128),w
  3167  0529  1683               	bsf	3,5	;RP0=1, select bank3
  3168  052A  1703               	bsf	3,6	;RP1=1, select bank3
  3169  052B  009B               	movwf	sprintf@width^(0+384)
  3170  052C                     l3638:
  3171                           
  3172                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  3173  052C  0810               	movf	sprintf@f^(0+384),w
  3174  052D  0084               	movwf	4
  3175  052E  120A  158A  200A  120A  118A  	fcall	stringdir
  3176  0533  3ED0               	addlw	208
  3177  0534  0093               	movwf	??_sprintf^(0+384)
  3178  0535  30FF               	movlw	255
  3179  0536  1803               	skipnc
  3180  0537  3000               	movlw	0
  3181  0538  0094               	movwf	(??_sprintf^(0+384)+1)
  3182  0539  0813               	movf	??_sprintf^(0+384),w
  3183  053A  079B               	addwf	sprintf@width^(0+384),f
  3184  053B  1803               	skipnc
  3185  053C  0A9C               	incf	(sprintf@width+1)^(0+384),f
  3186  053D  0814               	movf	(??_sprintf+1)^(0+384),w
  3187  053E  079C               	addwf	(sprintf@width+1)^(0+384),f
  3188  053F                     l3640:
  3189  053F  3001               	movlw	1
  3190  0540  0093               	movwf	??_sprintf^(0+384)
  3191  0541  0813               	movf	??_sprintf^(0+384),w
  3192  0542  0790               	addwf	sprintf@f^(0+384),f
  3193  0543                     l3642:
  3194                           
  3195                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  3196  0543  0810               	movf	sprintf@f^(0+384),w
  3197  0544  0084               	movwf	4
  3198  0545  120A  158A  200A  120A  118A  	fcall	stringdir
  3199  054A  120A  158A  210D  120A  118A  	fcall	_isdigit
  3200  054F  1803               	btfsc	3,0
  3201  0550  2D52               	goto	u3261
  3202  0551  2D53               	goto	u3260
  3203  0552                     u3261:
  3204  0552  2D09               	goto	l3636
  3205  0553                     u3260:
  3206  0553                     l3646:
  3207  0553  3001               	movlw	1
  3208  0554  1683               	bsf	3,5	;RP0=1, select bank3
  3209  0555  1703               	bsf	3,6	;RP1=1, select bank3
  3210  0556  0790               	addwf	sprintf@f^(0+384),f
  3211  0557  30FF               	movlw	-1
  3212  0558  0710               	addwf	sprintf@f^(0+384),w
  3213  0559  0084               	movwf	4
  3214  055A  120A  158A  200A  120A  118A  	fcall	stringdir
  3215  055F  009D               	movwf	sprintf@c^(0+384)
  3216  0560  0093               	movwf	??_sprintf^(0+384)
  3217  0561  0194               	clrf	(??_sprintf^(0+384)+1)
  3218                           
  3219                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3220                           ; Switch size 1, requested type "simple"
  3221                           ; Number of cases is 1, Range of values is 0 to 0
  3222                           ; switch strategies available:
  3223                           ; Name         Instructions Cycles
  3224                           ; simple_byte            4     3 (average)
  3225                           ; direct_byte           11     8 (fixed)
  3226                           ; jumptable            260     6 (fixed)
  3227                           ;	Chosen strategy is simple_byte
  3228  0562  0814               	movf	(??_sprintf+1)^(0+384),w
  3229  0563  3A00               	xorlw	0	; case 0
  3230  0564  1903               	skipnz
  3231  0565  2D67               	goto	l4360
  3232  0566  2E9A               	goto	l3720
  3233  0567                     l4360:
  3234                           
  3235                           ; Switch size 1, requested type "simple"
  3236                           ; Number of cases is 3, Range of values is 0 to 105
  3237                           ; switch strategies available:
  3238                           ; Name         Instructions Cycles
  3239                           ; simple_byte           10     6 (average)
  3240                           ; jumptable            260     6 (fixed)
  3241                           ;	Chosen strategy is simple_byte
  3242  0567  0813               	movf	??_sprintf^(0+384),w
  3243  0568  3A00               	xorlw	0	; case 0
  3244  0569  1903               	skipnz
  3245  056A  2EAC               	goto	l3722
  3246  056B  3A64               	xorlw	100	; case 100
  3247  056C  1903               	skipnz
  3248  056D  2D72               	goto	l3648
  3249  056E  3A0D               	xorlw	13	; case 105
  3250  056F  1903               	skipnz
  3251  0570  2D72               	goto	l3648
  3252  0571  2E9A               	goto	l3720
  3253  0572                     l3648:
  3254                           
  3255                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  3256  0572  0816               	movf	sprintf@ap^(0+384),w
  3257  0573  0084               	movwf	4
  3258  0574  1783               	bsf	3,7	;select IRP bank2
  3259  0575  0800               	movf	0,w
  3260  0576  0098               	movwf	sprintf@val^(0+384)
  3261  0577  0A84               	incf	4,f
  3262  0578  0800               	movf	0,w
  3263  0579  0099               	movwf	(sprintf@val+1)^(0+384)
  3264  057A                     l3650:
  3265  057A  3002               	movlw	2
  3266  057B  0093               	movwf	??_sprintf^(0+384)
  3267  057C  0813               	movf	??_sprintf^(0+384),w
  3268  057D  0796               	addwf	sprintf@ap^(0+384),f
  3269  057E                     l3652:
  3270                           
  3271                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  3272  057E  1F99               	btfss	(sprintf@val+1)^(0+384),7
  3273  057F  2D81               	goto	u3271
  3274  0580  2D82               	goto	u3270
  3275  0581                     u3271:
  3276  0581  2D8B               	goto	l3658
  3277  0582                     u3270:
  3278  0582                     l3654:
  3279                           
  3280                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  3281  0582  3003               	movlw	3
  3282  0583  0093               	movwf	??_sprintf^(0+384)
  3283  0584  0813               	movf	??_sprintf^(0+384),w
  3284  0585  049A               	iorwf	sprintf@flag^(0+384),f
  3285  0586                     l3656:
  3286                           
  3287                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  3288  0586  0998               	comf	sprintf@val^(0+384),f
  3289  0587  0999               	comf	(sprintf@val+1)^(0+384),f
  3290  0588  0A98               	incf	sprintf@val^(0+384),f
  3291  0589  1903               	skipnz
  3292  058A  0A99               	incf	(sprintf@val+1)^(0+384),f
  3293  058B                     l3658:
  3294                           
  3295                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  3296  058B  019D               	clrf	sprintf@c^(0+384)
  3297  058C  0A9D               	incf	sprintf@c^(0+384),f
  3298  058D                     l3664:
  3299                           
  3300                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  3301  058D  081D               	movf	sprintf@c^(0+384),w
  3302  058E  0093               	movwf	??_sprintf^(0+384)
  3303  058F  0713               	addwf	??_sprintf^(0+384),w
  3304  0590  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3305  0591  0084               	movwf	4
  3306  0592  120A  158A  200A  120A  118A  	fcall	stringdir
  3307  0597  0094               	movwf	(??_sprintf+1)^(0+384)
  3308  0598  120A  158A  200A  120A  118A  	fcall	stringdir
  3309  059D  0095               	movwf	((??_sprintf+1)^(0+384)+1)
  3310  059E  0815               	movf	(??_sprintf+2)^(0+384),w
  3311  059F  0219               	subwf	(sprintf@val+1)^(0+384),w
  3312  05A0  1D03               	skipz
  3313  05A1  2DA4               	goto	u3285
  3314  05A2  0814               	movf	(??_sprintf+1)^(0+384),w
  3315  05A3  0218               	subwf	sprintf@val^(0+384),w
  3316  05A4                     u3285:
  3317  05A4  1803               	skipnc
  3318  05A5  2DA7               	goto	u3281
  3319  05A6  2DA8               	goto	u3280
  3320  05A7                     u3281:
  3321  05A7  2DA9               	goto	l3668
  3322  05A8                     u3280:
  3323  05A8  2DB3               	goto	l3670
  3324  05A9                     l3668:
  3325  05A9  3001               	movlw	1
  3326  05AA  0093               	movwf	??_sprintf^(0+384)
  3327  05AB  0813               	movf	??_sprintf^(0+384),w
  3328  05AC  079D               	addwf	sprintf@c^(0+384),f
  3329  05AD  3005               	movlw	5
  3330  05AE  061D               	xorwf	sprintf@c^(0+384),w
  3331  05AF  1D03               	btfss	3,2
  3332  05B0  2DB2               	goto	u3291
  3333  05B1  2DB3               	goto	u3290
  3334  05B2                     u3291:
  3335  05B2  2D8D               	goto	l3664
  3336  05B3                     u3290:
  3337  05B3                     l3670:
  3338                           
  3339                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  3340  05B3  081B               	movf	sprintf@width^(0+384),w
  3341  05B4  041C               	iorwf	(sprintf@width+1)^(0+384),w
  3342  05B5  1903               	btfsc	3,2
  3343  05B6  2DB8               	goto	u3301
  3344  05B7  2DB9               	goto	u3300
  3345  05B8                     u3301:
  3346  05B8  2DC5               	goto	l564
  3347  05B9                     u3300:
  3348  05B9                     l3672:
  3349  05B9  081A               	movf	sprintf@flag^(0+384),w
  3350  05BA  3903               	andlw	3
  3351  05BB  1903               	btfsc	3,2
  3352  05BC  2DBE               	goto	u3311
  3353  05BD  2DBF               	goto	u3310
  3354  05BE                     u3311:
  3355  05BE  2DC5               	goto	l564
  3356  05BF                     u3310:
  3357  05BF                     l3674:
  3358                           
  3359                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  3360  05BF  30FF               	movlw	255
  3361  05C0  079B               	addwf	sprintf@width^(0+384),f
  3362  05C1  1803               	skipnc
  3363  05C2  0A9C               	incf	(sprintf@width+1)^(0+384),f
  3364  05C3  30FF               	movlw	255
  3365  05C4  079C               	addwf	(sprintf@width+1)^(0+384),f
  3366  05C5                     l564:
  3367                           
  3368                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  3369  05C5  081C               	movf	(sprintf@width+1)^(0+384),w
  3370  05C6  3A80               	xorlw	128
  3371  05C7  3C80               	sublw	128
  3372  05C8  1D03               	skipz
  3373  05C9  2DCC               	goto	u3325
  3374  05CA  081B               	movf	sprintf@width^(0+384),w
  3375  05CB  021D               	subwf	sprintf@c^(0+384),w
  3376  05CC                     u3325:
  3377  05CC  1803               	skipnc
  3378  05CD  2DCF               	goto	u3321
  3379  05CE  2DD0               	goto	u3320
  3380  05CF                     u3321:
  3381  05CF  2DDC               	goto	l3678
  3382  05D0                     u3320:
  3383  05D0                     l3676:
  3384                           
  3385                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  3386  05D0  1683               	bsf	3,5	;RP0=1, select bank3
  3387  05D1  1703               	bsf	3,6	;RP1=1, select bank3
  3388  05D2  081D               	movf	sprintf@c^(0+384),w
  3389  05D3  0093               	movwf	??_sprintf^(0+384)
  3390  05D4  0194               	clrf	(??_sprintf^(0+384)+1)
  3391  05D5  0813               	movf	??_sprintf^(0+384),w
  3392  05D6  029B               	subwf	sprintf@width^(0+384),f
  3393  05D7  0814               	movf	(??_sprintf+1)^(0+384),w
  3394  05D8  1C03               	skipc
  3395  05D9  039C               	decf	(sprintf@width+1)^(0+384),f
  3396  05DA  029C               	subwf	(sprintf@width+1)^(0+384),f
  3397  05DB  2DE0               	goto	l3680
  3398  05DC                     l3678:
  3399                           
  3400                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  3401  05DC  1683               	bsf	3,5	;RP0=1, select bank3
  3402  05DD  1703               	bsf	3,6	;RP1=1, select bank3
  3403  05DE  019B               	clrf	sprintf@width^(0+384)
  3404  05DF  019C               	clrf	(sprintf@width+1)^(0+384)
  3405  05E0                     l3680:
  3406                           
  3407                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  3408  05E0  1D1A               	btfss	sprintf@flag^(0+384),2
  3409  05E1  2DE3               	goto	u3331
  3410  05E2  2DE4               	goto	u3330
  3411  05E3                     u3331:
  3412  05E3  2E13               	goto	l3696
  3413  05E4                     u3330:
  3414  05E4                     l3682:
  3415                           
  3416                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  3417  05E4  081A               	movf	sprintf@flag^(0+384),w
  3418  05E5  3903               	andlw	3
  3419  05E6  1903               	btfsc	3,2
  3420  05E7  2DE9               	goto	u3341
  3421  05E8  2DEA               	goto	u3340
  3422  05E9                     u3341:
  3423  05E9  2DF5               	goto	l3688
  3424  05EA                     u3340:
  3425  05EA                     l3684:
  3426                           
  3427                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  3428  05EA  302D               	movlw	45
  3429  05EB  0093               	movwf	??_sprintf^(0+384)
  3430  05EC  081E               	movf	sprintf@sp^(0+384),w
  3431  05ED  0084               	movwf	4
  3432  05EE  0813               	movf	??_sprintf^(0+384),w
  3433  05EF  1383               	bcf	3,7	;select IRP bank0
  3434  05F0  0080               	movwf	0
  3435  05F1                     l3686:
  3436  05F1  3001               	movlw	1
  3437  05F2  0093               	movwf	??_sprintf^(0+384)
  3438  05F3  0813               	movf	??_sprintf^(0+384),w
  3439  05F4  079E               	addwf	sprintf@sp^(0+384),f
  3440  05F5                     l3688:
  3441                           
  3442                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  3443  05F5  081B               	movf	sprintf@width^(0+384),w
  3444  05F6  041C               	iorwf	(sprintf@width+1)^(0+384),w
  3445  05F7  1903               	btfsc	3,2
  3446  05F8  2DFA               	goto	u3351
  3447  05F9  2DFB               	goto	u3350
  3448  05FA                     u3351:
  3449  05FA  2E41               	goto	l3710
  3450  05FB                     u3350:
  3451  05FB                     l3690:
  3452                           
  3453                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  3454  05FB  3030               	movlw	48
  3455  05FC  0093               	movwf	??_sprintf^(0+384)
  3456  05FD  081E               	movf	sprintf@sp^(0+384),w
  3457  05FE  0084               	movwf	4
  3458  05FF  0813               	movf	??_sprintf^(0+384),w
  3459  0600  1383               	bcf	3,7	;select IRP bank0
  3460  0601  0080               	movwf	0
  3461  0602                     l3692:
  3462  0602  3001               	movlw	1
  3463  0603  0093               	movwf	??_sprintf^(0+384)
  3464  0604  0813               	movf	??_sprintf^(0+384),w
  3465  0605  079E               	addwf	sprintf@sp^(0+384),f
  3466  0606                     l3694:
  3467  0606  30FF               	movlw	255
  3468  0607  079B               	addwf	sprintf@width^(0+384),f
  3469  0608  1803               	skipnc
  3470  0609  0A9C               	incf	(sprintf@width+1)^(0+384),f
  3471  060A  30FF               	movlw	255
  3472  060B  079C               	addwf	(sprintf@width+1)^(0+384),f
  3473  060C  081B               	movf	sprintf@width^(0+384),w
  3474  060D  041C               	iorwf	(sprintf@width+1)^(0+384),w
  3475  060E  1D03               	btfss	3,2
  3476  060F  2E11               	goto	u3361
  3477  0610  2E12               	goto	u3360
  3478  0611                     u3361:
  3479  0611  2DFB               	goto	l3690
  3480  0612                     u3360:
  3481  0612  2E41               	goto	l3710
  3482  0613                     l3696:
  3483                           
  3484                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  3485  0613  081B               	movf	sprintf@width^(0+384),w
  3486  0614  041C               	iorwf	(sprintf@width+1)^(0+384),w
  3487  0615  1903               	btfsc	3,2
  3488  0616  2E18               	goto	u3371
  3489  0617  2E19               	goto	u3370
  3490  0618                     u3371:
  3491  0618  2E30               	goto	l3704
  3492  0619                     u3370:
  3493  0619                     l3698:
  3494                           
  3495                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  3496  0619  3020               	movlw	32
  3497  061A  0093               	movwf	??_sprintf^(0+384)
  3498  061B  081E               	movf	sprintf@sp^(0+384),w
  3499  061C  0084               	movwf	4
  3500  061D  0813               	movf	??_sprintf^(0+384),w
  3501  061E  1383               	bcf	3,7	;select IRP bank0
  3502  061F  0080               	movwf	0
  3503  0620                     l3700:
  3504  0620  3001               	movlw	1
  3505  0621  0093               	movwf	??_sprintf^(0+384)
  3506  0622  0813               	movf	??_sprintf^(0+384),w
  3507  0623  079E               	addwf	sprintf@sp^(0+384),f
  3508  0624                     l3702:
  3509  0624  30FF               	movlw	255
  3510  0625  079B               	addwf	sprintf@width^(0+384),f
  3511  0626  1803               	skipnc
  3512  0627  0A9C               	incf	(sprintf@width+1)^(0+384),f
  3513  0628  30FF               	movlw	255
  3514  0629  079C               	addwf	(sprintf@width+1)^(0+384),f
  3515  062A  081B               	movf	sprintf@width^(0+384),w
  3516  062B  041C               	iorwf	(sprintf@width+1)^(0+384),w
  3517  062C  1D03               	btfss	3,2
  3518  062D  2E2F               	goto	u3381
  3519  062E  2E30               	goto	u3380
  3520  062F                     u3381:
  3521  062F  2E19               	goto	l3698
  3522  0630                     u3380:
  3523  0630                     l3704:
  3524                           
  3525                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  3526  0630  081A               	movf	sprintf@flag^(0+384),w
  3527  0631  3903               	andlw	3
  3528  0632  1903               	btfsc	3,2
  3529  0633  2E35               	goto	u3391
  3530  0634  2E36               	goto	u3390
  3531  0635                     u3391:
  3532  0635  2E41               	goto	l3710
  3533  0636                     u3390:
  3534  0636                     l3706:
  3535                           
  3536                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  3537  0636  302D               	movlw	45
  3538  0637  0093               	movwf	??_sprintf^(0+384)
  3539  0638  081E               	movf	sprintf@sp^(0+384),w
  3540  0639  0084               	movwf	4
  3541  063A  0813               	movf	??_sprintf^(0+384),w
  3542  063B  1383               	bcf	3,7	;select IRP bank0
  3543  063C  0080               	movwf	0
  3544  063D                     l3708:
  3545  063D  3001               	movlw	1
  3546  063E  0093               	movwf	??_sprintf^(0+384)
  3547  063F  0813               	movf	??_sprintf^(0+384),w
  3548  0640  079E               	addwf	sprintf@sp^(0+384),f
  3549  0641                     l3710:
  3550                           
  3551                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  3552  0641  081D               	movf	sprintf@c^(0+384),w
  3553  0642  0093               	movwf	??_sprintf^(0+384)
  3554  0643  0813               	movf	??_sprintf^(0+384),w
  3555  0644  0097               	movwf	sprintf@prec^(0+384)
  3556                           
  3557                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  3558  0645  2E91               	goto	l3718
  3559  0646                     l3712:
  3560                           
  3561                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  3562  0646  300A               	movlw	10
  3563  0647  1683               	bsf	3,5	;RP0=1, select bank1
  3564  0648  1303               	bcf	3,6	;RP1=0, select bank1
  3565  0649  00EA               	movwf	___lwmod@divisor^(0+128)
  3566  064A  3000               	movlw	0
  3567  064B  00EB               	movwf	(___lwmod@divisor^(0+128)+1)
  3568  064C  1683               	bsf	3,5	;RP0=1, select bank3
  3569  064D  1703               	bsf	3,6	;RP1=1, select bank3
  3570  064E  0817               	movf	sprintf@prec^(0+384),w
  3571  064F  0093               	movwf	??_sprintf^(0+384)
  3572  0650  0713               	addwf	??_sprintf^(0+384),w
  3573  0651  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  3574  0652  0084               	movwf	4
  3575  0653  120A  158A  200A  120A  118A  	fcall	stringdir
  3576  0658  1683               	bsf	3,5	;RP0=1, select bank1
  3577  0659  1303               	bcf	3,6	;RP1=0, select bank1
  3578  065A  00E2               	movwf	___lwdiv@divisor^(0+128)
  3579  065B  120A  158A  200A  120A  118A  	fcall	stringdir
  3580  0660  00E3               	movwf	(___lwdiv@divisor+1)^(0+128)
  3581  0661  1683               	bsf	3,5	;RP0=1, select bank3
  3582  0662  1703               	bsf	3,6	;RP1=1, select bank3
  3583  0663  0819               	movf	(sprintf@val+1)^(0+384),w
  3584  0664  1683               	bsf	3,5	;RP0=1, select bank1
  3585  0665  1303               	bcf	3,6	;RP1=0, select bank1
  3586  0666  00E5               	movwf	(___lwdiv@dividend+1)^(0+128)
  3587  0667  1683               	bsf	3,5	;RP0=1, select bank3
  3588  0668  1703               	bsf	3,6	;RP1=1, select bank3
  3589  0669  0818               	movf	sprintf@val^(0+384),w
  3590  066A  1683               	bsf	3,5	;RP0=1, select bank1
  3591  066B  1303               	bcf	3,6	;RP1=0, select bank1
  3592  066C  00E4               	movwf	___lwdiv@dividend^(0+128)
  3593  066D  120A  158A  243D  120A  118A  	fcall	___lwdiv
  3594  0672  1683               	bsf	3,5	;RP0=1, select bank1
  3595  0673  1303               	bcf	3,6	;RP1=0, select bank1
  3596  0674  0863               	movf	(?___lwdiv+1)^(0+128),w
  3597  0675  00ED               	movwf	(___lwmod@dividend+1)^(0+128)
  3598  0676  0862               	movf	?___lwdiv^(0+128),w
  3599  0677  00EC               	movwf	___lwmod@dividend^(0+128)
  3600  0678  120A  118A  27C0  120A  118A  	fcall	___lwmod
  3601  067D  1683               	bsf	3,5	;RP0=1, select bank1
  3602  067E  1303               	bcf	3,6	;RP1=0, select bank1
  3603  067F  086A               	movf	?___lwmod^(0+128),w
  3604  0680  3E30               	addlw	48
  3605  0681  1683               	bsf	3,5	;RP0=1, select bank3
  3606  0682  1703               	bsf	3,6	;RP1=1, select bank3
  3607  0683  0094               	movwf	(??_sprintf+1)^(0+384)
  3608  0684  0814               	movf	(??_sprintf+1)^(0+384),w
  3609  0685  009D               	movwf	sprintf@c^(0+384)
  3610  0686                     l3714:
  3611                           
  3612                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  3613  0686  081D               	movf	sprintf@c^(0+384),w
  3614  0687  0093               	movwf	??_sprintf^(0+384)
  3615  0688  081E               	movf	sprintf@sp^(0+384),w
  3616  0689  0084               	movwf	4
  3617  068A  0813               	movf	??_sprintf^(0+384),w
  3618  068B  1383               	bcf	3,7	;select IRP bank0
  3619  068C  0080               	movwf	0
  3620  068D                     l3716:
  3621  068D  3001               	movlw	1
  3622  068E  0093               	movwf	??_sprintf^(0+384)
  3623  068F  0813               	movf	??_sprintf^(0+384),w
  3624  0690  079E               	addwf	sprintf@sp^(0+384),f
  3625  0691                     l3718:
  3626                           
  3627                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  3628  0691  30FF               	movlw	255
  3629  0692  0093               	movwf	??_sprintf^(0+384)
  3630  0693  0813               	movf	??_sprintf^(0+384),w
  3631  0694  0797               	addwf	sprintf@prec^(0+384),f
  3632  0695  0A17               	incf	sprintf@prec^(0+384),w
  3633  0696  1D03               	btfss	3,2
  3634  0697  2E99               	goto	u3401
  3635  0698  2E9A               	goto	u3400
  3636  0699                     u3401:
  3637  0699  2E46               	goto	l3712
  3638  069A                     u3400:
  3639  069A                     l3720:
  3640                           
  3641                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  3642  069A  3001               	movlw	1
  3643  069B  0790               	addwf	sprintf@f^(0+384),f
  3644  069C  30FF               	movlw	-1
  3645  069D  0710               	addwf	sprintf@f^(0+384),w
  3646  069E  0084               	movwf	4
  3647  069F  120A  158A  200A  120A  118A  	fcall	stringdir
  3648  06A4  0093               	movwf	??_sprintf^(0+384)
  3649  06A5  0813               	movf	??_sprintf^(0+384),w
  3650  06A6  009D               	movwf	sprintf@c^(0+384)
  3651  06A7  081D               	movf	sprintf@c^(0+384),w
  3652  06A8  1D03               	btfss	3,2
  3653  06A9  2EAB               	goto	u3411
  3654  06AA  2EAC               	goto	u3410
  3655  06AB                     u3411:
  3656  06AB  2CC7               	goto	l3618
  3657  06AC                     u3410:
  3658  06AC                     l3722:
  3659                           
  3660                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  3661  06AC  081E               	movf	sprintf@sp^(0+384),w
  3662  06AD  0084               	movwf	4
  3663  06AE  1383               	bcf	3,7	;select IRP bank0
  3664  06AF  0180               	clrf	0
  3665  06B0                     l581:
  3666  06B0  0008               	return
  3667  06B1                     __end_of_sprintf:
  3668                           
  3669                           	psect	text4
  3670  090D                     __ptext4:	
  3671 ;; *************** function _isdigit *****************
  3672 ;; Defined at:
  3673 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;  c               1    wreg     unsigned char 
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;  c               1    1[BANK1 ] unsigned char 
  3678 ;; Return value:  Size  Location     Type
  3679 ;;		None               void
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3687 ;;      Params:         0       0       0       0       0
  3688 ;;      Locals:         0       0       2       0       0
  3689 ;;      Temps:          0       0       0       0       0
  3690 ;;      Totals:         0       0       2       0       0
  3691 ;;Total ram usage:        2 bytes
  3692 ;; Hardware stack levels used: 1
  3693 ;; Hardware stack levels required when called: 4
  3694 ;; This function calls:
  3695 ;;		Nothing
  3696 ;; This function is called by:
  3697 ;;		_sprintf
  3698 ;; This function uses a non-reentrant model
  3699 ;;
  3700                           
  3701  090D                     _isdigit:	
  3702                           ;psect for function _isdigit
  3703                           
  3704                           
  3705                           ;incstack = 0
  3706                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  3707                           ;isdigit@c stored from wreg
  3708  090D  1683               	bsf	3,5	;RP0=1, select bank1
  3709  090E  1303               	bcf	3,6	;RP1=0, select bank1
  3710  090F  00E3               	movwf	isdigit@c^(0+128)
  3711  0910                     l3504:
  3712  0910  01E2               	clrf	_isdigit$1515^(0+128)
  3713  0911                     l3506:
  3714  0911  303A               	movlw	58
  3715  0912  0263               	subwf	isdigit@c^(0+128),w
  3716  0913  1803               	skipnc
  3717  0914  2916               	goto	u2961
  3718  0915  2917               	goto	u2960
  3719  0916                     u2961:
  3720  0916  291F               	goto	l3512
  3721  0917                     u2960:
  3722  0917                     l3508:
  3723  0917  3030               	movlw	48
  3724  0918  0263               	subwf	isdigit@c^(0+128),w
  3725  0919  1C03               	skipc
  3726  091A  291C               	goto	u2971
  3727  091B  291D               	goto	u2970
  3728  091C                     u2971:
  3729  091C  291F               	goto	l3512
  3730  091D                     u2970:
  3731  091D                     l3510:
  3732  091D  01E2               	clrf	_isdigit$1515^(0+128)
  3733  091E  0AE2               	incf	_isdigit$1515^(0+128),f
  3734  091F                     l3512:
  3735  091F  0C62               	rrf	_isdigit$1515^(0+128),w
  3736  0920                     l1038:
  3737  0920  0008               	return
  3738  0921                     __end_of_isdigit:
  3739                           
  3740                           	psect	text5
  3741  0A21                     __ptext5:	
  3742 ;; *************** function ___wmul *****************
  3743 ;; Defined at:
  3744 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  3745 ;; Parameters:    Size  Location     Type
  3746 ;;  multiplier      2    0[BANK1 ] unsigned int 
  3747 ;;  multiplicand    2    2[BANK1 ] unsigned int 
  3748 ;; Auto vars:     Size  Location     Type
  3749 ;;  product         2    4[BANK1 ] unsigned int 
  3750 ;; Return value:  Size  Location     Type
  3751 ;;                  2    0[BANK1 ] unsigned int 
  3752 ;; Registers used:
  3753 ;;		wreg, status,2, status,0
  3754 ;; Tracked objects:
  3755 ;;		On entry : 0/0
  3756 ;;		On exit  : 0/0
  3757 ;;		Unchanged: 0/0
  3758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3759 ;;      Params:         0       0       4       0       0
  3760 ;;      Locals:         0       0       2       0       0
  3761 ;;      Temps:          0       0       0       0       0
  3762 ;;      Totals:         0       0       6       0       0
  3763 ;;Total ram usage:        6 bytes
  3764 ;; Hardware stack levels used: 1
  3765 ;; Hardware stack levels required when called: 4
  3766 ;; This function calls:
  3767 ;;		Nothing
  3768 ;; This function is called by:
  3769 ;;		_sprintf
  3770 ;; This function uses a non-reentrant model
  3771 ;;
  3772                           
  3773  0A21                     ___wmul:	
  3774                           ;psect for function ___wmul
  3775                           
  3776  0A21                     l3516:	
  3777                           ;incstack = 0
  3778                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3779                           
  3780  0A21  1683               	bsf	3,5	;RP0=1, select bank1
  3781  0A22  1303               	bcf	3,6	;RP1=0, select bank1
  3782  0A23  01E6               	clrf	___wmul@product^(0+128)
  3783  0A24  01E7               	clrf	(___wmul@product+1)^(0+128)
  3784  0A25                     l3518:
  3785  0A25  1C62               	btfss	___wmul@multiplier^(0+128),0
  3786  0A26  2A28               	goto	u2981
  3787  0A27  2A29               	goto	u2980
  3788  0A28                     u2981:
  3789  0A28  2A2F               	goto	l585
  3790  0A29                     u2980:
  3791  0A29                     l3520:
  3792  0A29  0864               	movf	___wmul@multiplicand^(0+128),w
  3793  0A2A  07E6               	addwf	___wmul@product^(0+128),f
  3794  0A2B  1803               	skipnc
  3795  0A2C  0AE7               	incf	(___wmul@product+1)^(0+128),f
  3796  0A2D  0865               	movf	(___wmul@multiplicand+1)^(0+128),w
  3797  0A2E  07E7               	addwf	(___wmul@product+1)^(0+128),f
  3798  0A2F                     l585:
  3799  0A2F  3001               	movlw	1
  3800  0A30                     u2995:
  3801  0A30  1003               	clrc
  3802  0A31  0DE4               	rlf	___wmul@multiplicand^(0+128),f
  3803  0A32  0DE5               	rlf	(___wmul@multiplicand+1)^(0+128),f
  3804  0A33  3EFF               	addlw	-1
  3805  0A34  1D03               	skipz
  3806  0A35  2A30               	goto	u2995
  3807  0A36                     l3522:
  3808  0A36  3001               	movlw	1
  3809  0A37                     u3005:
  3810  0A37  1003               	clrc
  3811  0A38  0CE3               	rrf	(___wmul@multiplier+1)^(0+128),f
  3812  0A39  0CE2               	rrf	___wmul@multiplier^(0+128),f
  3813  0A3A  3EFF               	addlw	-1
  3814  0A3B  1D03               	skipz
  3815  0A3C  2A37               	goto	u3005
  3816  0A3D                     l3524:
  3817  0A3D  0862               	movf	___wmul@multiplier^(0+128),w
  3818  0A3E  0463               	iorwf	(___wmul@multiplier+1)^(0+128),w
  3819  0A3F  1D03               	btfss	3,2
  3820  0A40  2A42               	goto	u3011
  3821  0A41  2A43               	goto	u3010
  3822  0A42                     u3011:
  3823  0A42  2A25               	goto	l3518
  3824  0A43                     u3010:
  3825  0A43                     l3526:
  3826  0A43  0867               	movf	(___wmul@product+1)^(0+128),w
  3827  0A44  00E3               	movwf	(?___wmul+1)^(0+128)
  3828  0A45  0866               	movf	___wmul@product^(0+128),w
  3829  0A46  00E2               	movwf	?___wmul^(0+128)
  3830  0A47                     l587:
  3831  0A47  0008               	return
  3832  0A48                     __end_of___wmul:
  3833                           
  3834                           	psect	text6
  3835  07C0                     __ptext6:	
  3836 ;; *************** function ___lwmod *****************
  3837 ;; Defined at:
  3838 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  3839 ;; Parameters:    Size  Location     Type
  3840 ;;  divisor         2    8[BANK1 ] unsigned int 
  3841 ;;  dividend        2   10[BANK1 ] unsigned int 
  3842 ;; Auto vars:     Size  Location     Type
  3843 ;;  counter         1   13[BANK1 ] unsigned char 
  3844 ;; Return value:  Size  Location     Type
  3845 ;;                  2    8[BANK1 ] unsigned int 
  3846 ;; Registers used:
  3847 ;;		wreg, status,2, status,0
  3848 ;; Tracked objects:
  3849 ;;		On entry : 0/0
  3850 ;;		On exit  : 0/0
  3851 ;;		Unchanged: 0/0
  3852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3853 ;;      Params:         0       0       4       0       0
  3854 ;;      Locals:         0       0       1       0       0
  3855 ;;      Temps:          0       0       1       0       0
  3856 ;;      Totals:         0       0       6       0       0
  3857 ;;Total ram usage:        6 bytes
  3858 ;; Hardware stack levels used: 1
  3859 ;; Hardware stack levels required when called: 4
  3860 ;; This function calls:
  3861 ;;		Nothing
  3862 ;; This function is called by:
  3863 ;;		_sprintf
  3864 ;; This function uses a non-reentrant model
  3865 ;;
  3866                           
  3867  07C0                     ___lwmod:	
  3868                           ;psect for function ___lwmod
  3869                           
  3870  07C0                     l3594:	
  3871                           ;incstack = 0
  3872                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  3873                           
  3874  07C0  1683               	bsf	3,5	;RP0=1, select bank1
  3875  07C1  1303               	bcf	3,6	;RP1=0, select bank1
  3876  07C2  086A               	movf	___lwmod@divisor^(0+128),w
  3877  07C3  046B               	iorwf	(___lwmod@divisor+1)^(0+128),w
  3878  07C4  1903               	btfsc	3,2
  3879  07C5  2FC7               	goto	u3181
  3880  07C6  2FC8               	goto	u3180
  3881  07C7                     u3181:
  3882  07C7  2FF7               	goto	l3612
  3883  07C8                     u3180:
  3884  07C8                     l3596:
  3885  07C8  01EF               	clrf	___lwmod@counter^(0+128)
  3886  07C9  0AEF               	incf	___lwmod@counter^(0+128),f
  3887  07CA  2FD6               	goto	l3602
  3888  07CB                     l3598:
  3889  07CB  3001               	movlw	1
  3890  07CC                     u3195:
  3891  07CC  1003               	clrc
  3892  07CD  0DEA               	rlf	___lwmod@divisor^(0+128),f
  3893  07CE  0DEB               	rlf	(___lwmod@divisor+1)^(0+128),f
  3894  07CF  3EFF               	addlw	-1
  3895  07D0  1D03               	skipz
  3896  07D1  2FCC               	goto	u3195
  3897  07D2                     l3600:
  3898  07D2  3001               	movlw	1
  3899  07D3  00EE               	movwf	??___lwmod^(0+128)
  3900  07D4  086E               	movf	??___lwmod^(0+128),w
  3901  07D5  07EF               	addwf	___lwmod@counter^(0+128),f
  3902  07D6                     l3602:
  3903  07D6  1FEB               	btfss	(___lwmod@divisor+1)^(0+128),7
  3904  07D7  2FD9               	goto	u3201
  3905  07D8  2FDA               	goto	u3200
  3906  07D9                     u3201:
  3907  07D9  2FCB               	goto	l3598
  3908  07DA                     u3200:
  3909  07DA                     l3604:
  3910  07DA  086B               	movf	(___lwmod@divisor+1)^(0+128),w
  3911  07DB  026D               	subwf	(___lwmod@dividend+1)^(0+128),w
  3912  07DC  1D03               	skipz
  3913  07DD  2FE0               	goto	u3215
  3914  07DE  086A               	movf	___lwmod@divisor^(0+128),w
  3915  07DF  026C               	subwf	___lwmod@dividend^(0+128),w
  3916  07E0                     u3215:
  3917  07E0  1C03               	skipc
  3918  07E1  2FE3               	goto	u3211
  3919  07E2  2FE4               	goto	u3210
  3920  07E3                     u3211:
  3921  07E3  2FEA               	goto	l3608
  3922  07E4                     u3210:
  3923  07E4                     l3606:
  3924  07E4  086A               	movf	___lwmod@divisor^(0+128),w
  3925  07E5  02EC               	subwf	___lwmod@dividend^(0+128),f
  3926  07E6  086B               	movf	(___lwmod@divisor+1)^(0+128),w
  3927  07E7  1C03               	skipc
  3928  07E8  03ED               	decf	(___lwmod@dividend+1)^(0+128),f
  3929  07E9  02ED               	subwf	(___lwmod@dividend+1)^(0+128),f
  3930  07EA                     l3608:
  3931  07EA  3001               	movlw	1
  3932  07EB                     u3225:
  3933  07EB  1003               	clrc
  3934  07EC  0CEB               	rrf	(___lwmod@divisor+1)^(0+128),f
  3935  07ED  0CEA               	rrf	___lwmod@divisor^(0+128),f
  3936  07EE  3EFF               	addlw	-1
  3937  07EF  1D03               	skipz
  3938  07F0  2FEB               	goto	u3225
  3939  07F1                     l3610:
  3940  07F1  3001               	movlw	1
  3941  07F2  02EF               	subwf	___lwmod@counter^(0+128),f
  3942  07F3  1D03               	btfss	3,2
  3943  07F4  2FF6               	goto	u3231
  3944  07F5  2FF7               	goto	u3230
  3945  07F6                     u3231:
  3946  07F6  2FDA               	goto	l3604
  3947  07F7                     u3230:
  3948  07F7                     l3612:
  3949  07F7  086D               	movf	(___lwmod@dividend+1)^(0+128),w
  3950  07F8  00EB               	movwf	(?___lwmod+1)^(0+128)
  3951  07F9  086C               	movf	___lwmod@dividend^(0+128),w
  3952  07FA  00EA               	movwf	?___lwmod^(0+128)
  3953  07FB                     l867:
  3954  07FB  0008               	return
  3955  07FC                     __end_of___lwmod:
  3956                           
  3957                           	psect	text7
  3958  0C3D                     __ptext7:	
  3959 ;; *************** function ___lwdiv *****************
  3960 ;; Defined at:
  3961 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  3962 ;; Parameters:    Size  Location     Type
  3963 ;;  divisor         2    0[BANK1 ] unsigned int 
  3964 ;;  dividend        2    2[BANK1 ] unsigned int 
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;  quotient        2    6[BANK1 ] unsigned int 
  3967 ;;  counter         1    5[BANK1 ] unsigned char 
  3968 ;; Return value:  Size  Location     Type
  3969 ;;                  2    0[BANK1 ] unsigned int 
  3970 ;; Registers used:
  3971 ;;		wreg, status,2, status,0
  3972 ;; Tracked objects:
  3973 ;;		On entry : 0/0
  3974 ;;		On exit  : 0/0
  3975 ;;		Unchanged: 0/0
  3976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3977 ;;      Params:         0       0       4       0       0
  3978 ;;      Locals:         0       0       3       0       0
  3979 ;;      Temps:          0       0       1       0       0
  3980 ;;      Totals:         0       0       8       0       0
  3981 ;;Total ram usage:        8 bytes
  3982 ;; Hardware stack levels used: 1
  3983 ;; Hardware stack levels required when called: 4
  3984 ;; This function calls:
  3985 ;;		Nothing
  3986 ;; This function is called by:
  3987 ;;		_sprintf
  3988 ;; This function uses a non-reentrant model
  3989 ;;
  3990                           
  3991  0C3D                     ___lwdiv:	
  3992                           ;psect for function ___lwdiv
  3993                           
  3994  0C3D                     l3568:	
  3995                           ;incstack = 0
  3996                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  3997                           
  3998  0C3D  1683               	bsf	3,5	;RP0=1, select bank1
  3999  0C3E  1303               	bcf	3,6	;RP1=0, select bank1
  4000  0C3F  01E8               	clrf	___lwdiv@quotient^(0+128)
  4001  0C40  01E9               	clrf	(___lwdiv@quotient+1)^(0+128)
  4002  0C41                     l3570:
  4003  0C41  0862               	movf	___lwdiv@divisor^(0+128),w
  4004  0C42  0463               	iorwf	(___lwdiv@divisor+1)^(0+128),w
  4005  0C43  1903               	btfsc	3,2
  4006  0C44  2C46               	goto	u3111
  4007  0C45  2C47               	goto	u3110
  4008  0C46                     u3111:
  4009  0C46  2C7E               	goto	l3590
  4010  0C47                     u3110:
  4011  0C47                     l3572:
  4012  0C47  01E7               	clrf	___lwdiv@counter^(0+128)
  4013  0C48  0AE7               	incf	___lwdiv@counter^(0+128),f
  4014  0C49  2C55               	goto	l3578
  4015  0C4A                     l3574:
  4016  0C4A  3001               	movlw	1
  4017  0C4B                     u3125:
  4018  0C4B  1003               	clrc
  4019  0C4C  0DE2               	rlf	___lwdiv@divisor^(0+128),f
  4020  0C4D  0DE3               	rlf	(___lwdiv@divisor+1)^(0+128),f
  4021  0C4E  3EFF               	addlw	-1
  4022  0C4F  1D03               	skipz
  4023  0C50  2C4B               	goto	u3125
  4024  0C51                     l3576:
  4025  0C51  3001               	movlw	1
  4026  0C52  00E6               	movwf	??___lwdiv^(0+128)
  4027  0C53  0866               	movf	??___lwdiv^(0+128),w
  4028  0C54  07E7               	addwf	___lwdiv@counter^(0+128),f
  4029  0C55                     l3578:
  4030  0C55  1FE3               	btfss	(___lwdiv@divisor+1)^(0+128),7
  4031  0C56  2C58               	goto	u3131
  4032  0C57  2C59               	goto	u3130
  4033  0C58                     u3131:
  4034  0C58  2C4A               	goto	l3574
  4035  0C59                     u3130:
  4036  0C59                     l3580:
  4037  0C59  3001               	movlw	1
  4038  0C5A                     u3145:
  4039  0C5A  1003               	clrc
  4040  0C5B  0DE8               	rlf	___lwdiv@quotient^(0+128),f
  4041  0C5C  0DE9               	rlf	(___lwdiv@quotient+1)^(0+128),f
  4042  0C5D  3EFF               	addlw	-1
  4043  0C5E  1D03               	skipz
  4044  0C5F  2C5A               	goto	u3145
  4045  0C60  0863               	movf	(___lwdiv@divisor+1)^(0+128),w
  4046  0C61  0265               	subwf	(___lwdiv@dividend+1)^(0+128),w
  4047  0C62  1D03               	skipz
  4048  0C63  2C66               	goto	u3155
  4049  0C64  0862               	movf	___lwdiv@divisor^(0+128),w
  4050  0C65  0264               	subwf	___lwdiv@dividend^(0+128),w
  4051  0C66                     u3155:
  4052  0C66  1C03               	skipc
  4053  0C67  2C69               	goto	u3151
  4054  0C68  2C6A               	goto	u3150
  4055  0C69                     u3151:
  4056  0C69  2C71               	goto	l3586
  4057  0C6A                     u3150:
  4058  0C6A                     l3582:
  4059  0C6A  0862               	movf	___lwdiv@divisor^(0+128),w
  4060  0C6B  02E4               	subwf	___lwdiv@dividend^(0+128),f
  4061  0C6C  0863               	movf	(___lwdiv@divisor+1)^(0+128),w
  4062  0C6D  1C03               	skipc
  4063  0C6E  03E5               	decf	(___lwdiv@dividend+1)^(0+128),f
  4064  0C6F  02E5               	subwf	(___lwdiv@dividend+1)^(0+128),f
  4065  0C70                     l3584:
  4066  0C70  1468               	bsf	___lwdiv@quotient^(0+128),0
  4067  0C71                     l3586:
  4068  0C71  3001               	movlw	1
  4069  0C72                     u3165:
  4070  0C72  1003               	clrc
  4071  0C73  0CE3               	rrf	(___lwdiv@divisor+1)^(0+128),f
  4072  0C74  0CE2               	rrf	___lwdiv@divisor^(0+128),f
  4073  0C75  3EFF               	addlw	-1
  4074  0C76  1D03               	skipz
  4075  0C77  2C72               	goto	u3165
  4076  0C78                     l3588:
  4077  0C78  3001               	movlw	1
  4078  0C79  02E7               	subwf	___lwdiv@counter^(0+128),f
  4079  0C7A  1D03               	btfss	3,2
  4080  0C7B  2C7D               	goto	u3171
  4081  0C7C  2C7E               	goto	u3170
  4082  0C7D                     u3171:
  4083  0C7D  2C59               	goto	l3580
  4084  0C7E                     u3170:
  4085  0C7E                     l3590:
  4086  0C7E  0869               	movf	(___lwdiv@quotient+1)^(0+128),w
  4087  0C7F  00E3               	movwf	(?___lwdiv+1)^(0+128)
  4088  0C80  0868               	movf	___lwdiv@quotient^(0+128),w
  4089  0C81  00E2               	movwf	?___lwdiv^(0+128)
  4090  0C82                     l857:
  4091  0C82  0008               	return
  4092  0C83                     __end_of___lwdiv:
  4093                           
  4094                           	psect	text8
  4095  0A48                     __ptext8:	
  4096 ;; *************** function _setup *****************
  4097 ;; Defined at:
  4098 ;;		line 301 in file "sensor_ctrl_main.c"
  4099 ;; Parameters:    Size  Location     Type
  4100 ;;		None
  4101 ;; Auto vars:     Size  Location     Type
  4102 ;;		None
  4103 ;; Return value:  Size  Location     Type
  4104 ;;                  1    wreg      void 
  4105 ;; Registers used:
  4106 ;;		wreg, status,2, status,0
  4107 ;; Tracked objects:
  4108 ;;		On entry : 0/0
  4109 ;;		On exit  : 0/0
  4110 ;;		Unchanged: 0/0
  4111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4112 ;;      Params:         0       0       0       0       0
  4113 ;;      Locals:         0       0       0       0       0
  4114 ;;      Temps:          0       0       0       0       0
  4115 ;;      Totals:         0       0       0       0       0
  4116 ;;Total ram usage:        0 bytes
  4117 ;; Hardware stack levels used: 1
  4118 ;; Hardware stack levels required when called: 4
  4119 ;; This function calls:
  4120 ;;		Nothing
  4121 ;; This function is called by:
  4122 ;;		_main
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126  0A48                     _setup:	
  4127                           ;psect for function _setup
  4128                           
  4129  0A48                     l3738:	
  4130                           ;incstack = 0
  4131                           ; Regs used in _setup: [wreg+status,2+status,0]
  4132                           
  4133                           
  4134                           ;sensor_ctrl_main.c: 303:     ANSEL = 0b00000001;
  4135  0A48  3001               	movlw	1
  4136  0A49  1683               	bsf	3,5	;RP0=1, select bank3
  4137  0A4A  1703               	bsf	3,6	;RP1=1, select bank3
  4138  0A4B  0088               	movwf	8	;volatile
  4139  0A4C                     l3740:
  4140                           
  4141                           ;sensor_ctrl_main.c: 304:     ANSELH = 0;
  4142  0A4C  0189               	clrf	9	;volatile
  4143  0A4D                     l3742:
  4144                           
  4145                           ;sensor_ctrl_main.c: 307:     TRISA = 0b00000001;
  4146  0A4D  3001               	movlw	1
  4147  0A4E  1683               	bsf	3,5	;RP0=1, select bank1
  4148  0A4F  1303               	bcf	3,6	;RP1=0, select bank1
  4149  0A50  0085               	movwf	5	;volatile
  4150  0A51                     l3744:
  4151                           
  4152                           ;sensor_ctrl_main.c: 310:     TRISB = 0b00000011;
  4153  0A51  3003               	movlw	3
  4154  0A52  0086               	movwf	6	;volatile
  4155  0A53                     l3746:
  4156                           
  4157                           ;sensor_ctrl_main.c: 311:     OPTION_REGbits.nRBPU = 0;
  4158  0A53  1381               	bcf	1,7	;volatile
  4159  0A54                     l3748:
  4160                           
  4161                           ;sensor_ctrl_main.c: 312:     WPUB = 0b00000011;
  4162  0A54  3003               	movlw	3
  4163  0A55  0095               	movwf	21	;volatile
  4164  0A56                     l3750:
  4165                           
  4166                           ;sensor_ctrl_main.c: 313:     IOCBbits.IOCB0 = 1;
  4167  0A56  1416               	bsf	22,0	;volatile
  4168  0A57                     l3752:
  4169                           
  4170                           ;sensor_ctrl_main.c: 314:     IOCBbits.IOCB1 = 1;
  4171  0A57  1496               	bsf	22,1	;volatile
  4172  0A58                     l3754:
  4173                           
  4174                           ;sensor_ctrl_main.c: 316:     TRISCbits.TRISC3 = 1;
  4175  0A58  1587               	bsf	7,3	;volatile
  4176  0A59                     l3756:
  4177                           
  4178                           ;sensor_ctrl_main.c: 317:     TRISCbits.TRISC4 = 1;
  4179  0A59  1607               	bsf	7,4	;volatile
  4180                           
  4181                           ;sensor_ctrl_main.c: 318:     TRISD = 0;
  4182  0A5A  0188               	clrf	8	;volatile
  4183                           
  4184                           ;sensor_ctrl_main.c: 319:     PORTA = 0;
  4185  0A5B  1283               	bcf	3,5	;RP0=0, select bank0
  4186  0A5C  1303               	bcf	3,6	;RP1=0, select bank0
  4187  0A5D  0185               	clrf	5	;volatile
  4188                           
  4189                           ;sensor_ctrl_main.c: 320:     PORTB = 0;
  4190  0A5E  0186               	clrf	6	;volatile
  4191                           
  4192                           ;sensor_ctrl_main.c: 321:     PORTD = 0;
  4193  0A5F  0188               	clrf	8	;volatile
  4194  0A60                     l3758:
  4195                           
  4196                           ;sensor_ctrl_main.c: 324:     SSPADD = ((1000000)/(4*100000)) - 1;
  4197  0A60  3001               	movlw	1
  4198  0A61  1683               	bsf	3,5	;RP0=1, select bank1
  4199  0A62  1303               	bcf	3,6	;RP1=0, select bank1
  4200  0A63  0093               	movwf	19	;volatile
  4201  0A64                     l3760:
  4202                           
  4203                           ;sensor_ctrl_main.c: 325:     SSPSTATbits.SMP = 1;
  4204  0A64  1794               	bsf	20,7	;volatile
  4205  0A65                     l3762:
  4206                           
  4207                           ;sensor_ctrl_main.c: 326:     SSPCONbits.SSPM = 0b1000;
  4208  0A65  1283               	bcf	3,5	;RP0=0, select bank0
  4209  0A66  1303               	bcf	3,6	;RP1=0, select bank0
  4210  0A67  0814               	movf	20,w	;volatile
  4211  0A68  39F0               	andlw	-16
  4212  0A69  3808               	iorlw	8
  4213  0A6A  0094               	movwf	20	;volatile
  4214  0A6B                     l3764:
  4215                           
  4216                           ;sensor_ctrl_main.c: 327:     SSPCONbits.SSPEN = 1;
  4217  0A6B  1694               	bsf	20,5	;volatile
  4218  0A6C                     l3766:
  4219                           
  4220                           ;sensor_ctrl_main.c: 328:     PIR1bits.SSPIF = 0;
  4221  0A6C  118C               	bcf	12,3	;volatile
  4222  0A6D                     l3768:
  4223                           
  4224                           ;sensor_ctrl_main.c: 331:     INTCONbits.GIE = 1;
  4225  0A6D  178B               	bsf	11,7	;volatile
  4226  0A6E                     l3770:
  4227                           
  4228                           ;sensor_ctrl_main.c: 332:     INTCONbits.PEIE = 1;
  4229  0A6E  170B               	bsf	11,6	;volatile
  4230  0A6F                     l3772:
  4231                           
  4232                           ;sensor_ctrl_main.c: 333:     INTCONbits.RBIE = 1;
  4233  0A6F  158B               	bsf	11,3	;volatile
  4234  0A70                     l3774:
  4235                           
  4236                           ;sensor_ctrl_main.c: 334:     INTCONbits.RBIF = 0;
  4237  0A70  100B               	bcf	11,0	;volatile
  4238  0A71                     l204:
  4239  0A71  0008               	return
  4240  0A72                     __end_of_setup:
  4241                           
  4242                           	psect	text9
  4243  0DD5                     __ptext9:	
  4244 ;; *************** function _initTmr0 *****************
  4245 ;; Defined at:
  4246 ;;		line 14 in file "tmr0_config.c"
  4247 ;; Parameters:    Size  Location     Type
  4248 ;;  prescaler       2    0[BANK1 ] int 
  4249 ;; Auto vars:     Size  Location     Type
  4250 ;;		None
  4251 ;; Return value:  Size  Location     Type
  4252 ;;                  1    wreg      void 
  4253 ;; Registers used:
  4254 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4255 ;; Tracked objects:
  4256 ;;		On entry : 0/0
  4257 ;;		On exit  : 0/0
  4258 ;;		Unchanged: 0/0
  4259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4260 ;;      Params:         0       0       2       0       0
  4261 ;;      Locals:         0       0       0       0       0
  4262 ;;      Temps:          0       0       0       0       0
  4263 ;;      Totals:         0       0       2       0       0
  4264 ;;Total ram usage:        2 bytes
  4265 ;; Hardware stack levels used: 1
  4266 ;; Hardware stack levels required when called: 4
  4267 ;; This function calls:
  4268 ;;		Nothing
  4269 ;; This function is called by:
  4270 ;;		_main
  4271 ;; This function uses a non-reentrant model
  4272 ;;
  4273                           
  4274  0DD5                     _initTmr0:	
  4275                           ;psect for function _initTmr0
  4276                           
  4277  0DD5                     l3798:	
  4278                           ;incstack = 0
  4279                           ; Regs used in _initTmr0: [wreg-fsr0h+status,2+status,0]
  4280                           
  4281                           
  4282                           ;tmr0_config.c: 15:     switch(prescaler){
  4283  0DD5  2DFA               	goto	l3818
  4284  0DD6                     l3800:
  4285                           
  4286                           ;tmr0_config.c: 19:             OPTION_REGbits.PS = 0b000;
  4287  0DD6  30F8               	movlw	-8
  4288  0DD7  0581               	andwf	1,f	;volatile
  4289                           
  4290                           ;tmr0_config.c: 20:             break;
  4291  0DD8  2E23               	goto	l269
  4292  0DD9                     l3802:
  4293                           
  4294                           ;tmr0_config.c: 22:             OPTION_REGbits.PS = 0b001;
  4295  0DD9  0801               	movf	1,w	;volatile
  4296  0DDA  39F8               	andlw	-8
  4297  0DDB  3801               	iorlw	1
  4298  0DDC  0081               	movwf	1	;volatile
  4299                           
  4300                           ;tmr0_config.c: 23:             break;
  4301  0DDD  2E23               	goto	l269
  4302  0DDE                     l3804:
  4303                           
  4304                           ;tmr0_config.c: 25:             OPTION_REGbits.PS = 0b010;
  4305  0DDE  0801               	movf	1,w	;volatile
  4306  0DDF  39F8               	andlw	-8
  4307  0DE0  3802               	iorlw	2
  4308  0DE1  0081               	movwf	1	;volatile
  4309                           
  4310                           ;tmr0_config.c: 26:             break;
  4311  0DE2  2E23               	goto	l269
  4312  0DE3                     l3806:
  4313                           
  4314                           ;tmr0_config.c: 28:             OPTION_REGbits.PS = 0b011;
  4315  0DE3  0801               	movf	1,w	;volatile
  4316  0DE4  39F8               	andlw	-8
  4317  0DE5  3803               	iorlw	3
  4318  0DE6  0081               	movwf	1	;volatile
  4319                           
  4320                           ;tmr0_config.c: 29:             break;
  4321  0DE7  2E23               	goto	l269
  4322  0DE8                     l3808:
  4323                           
  4324                           ;tmr0_config.c: 31:             OPTION_REGbits.PS = 0b100;
  4325  0DE8  0801               	movf	1,w	;volatile
  4326  0DE9  39F8               	andlw	-8
  4327  0DEA  3804               	iorlw	4
  4328  0DEB  0081               	movwf	1	;volatile
  4329                           
  4330                           ;tmr0_config.c: 32:             break;
  4331  0DEC  2E23               	goto	l269
  4332  0DED                     l3810:
  4333                           
  4334                           ;tmr0_config.c: 34:             OPTION_REGbits.PS = 0b101;
  4335  0DED  0801               	movf	1,w	;volatile
  4336  0DEE  39F8               	andlw	-8
  4337  0DEF  3805               	iorlw	5
  4338  0DF0  0081               	movwf	1	;volatile
  4339                           
  4340                           ;tmr0_config.c: 35:             break;
  4341  0DF1  2E23               	goto	l269
  4342  0DF2                     l3812:
  4343                           
  4344                           ;tmr0_config.c: 37:             OPTION_REGbits.PS = 0b110;
  4345  0DF2  0801               	movf	1,w	;volatile
  4346  0DF3  39F8               	andlw	-8
  4347  0DF4  3806               	iorlw	6
  4348  0DF5  0081               	movwf	1	;volatile
  4349                           
  4350                           ;tmr0_config.c: 38:             break;
  4351  0DF6  2E23               	goto	l269
  4352  0DF7                     l3814:
  4353                           
  4354                           ;tmr0_config.c: 40:             OPTION_REGbits.PS = 0b111;
  4355  0DF7  3007               	movlw	7
  4356  0DF8  0481               	iorwf	1,f	;volatile
  4357                           
  4358                           ;tmr0_config.c: 41:             break;
  4359  0DF9  2E23               	goto	l269
  4360  0DFA                     l3818:
  4361                           
  4362                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  4363                           ; Switch size 1, requested type "simple"
  4364                           ; Number of cases is 2, Range of values is 0 to 1
  4365                           ; switch strategies available:
  4366                           ; Name         Instructions Cycles
  4367                           ; simple_byte            7     4 (average)
  4368                           ; direct_byte           14     8 (fixed)
  4369                           ; jumptable            260     6 (fixed)
  4370                           ;	Chosen strategy is simple_byte
  4371  0DFA  1683               	bsf	3,5	;RP0=1, select bank1
  4372  0DFB  1303               	bcf	3,6	;RP1=0, select bank1
  4373  0DFC  0863               	movf	(initTmr0@prescaler+1)^(0+128),w
  4374  0DFD  3A00               	xorlw	0	; case 0
  4375  0DFE  1903               	skipnz
  4376  0DFF  2E04               	goto	l4362
  4377  0E00  3A01               	xorlw	1	; case 1
  4378  0E01  1903               	skipnz
  4379  0E02  2E1E               	goto	l4364
  4380  0E03  2E23               	goto	l269
  4381  0E04                     l4362:
  4382                           
  4383                           ; Switch size 1, requested type "simple"
  4384                           ; Number of cases is 8, Range of values is 0 to 128
  4385                           ; switch strategies available:
  4386                           ; Name         Instructions Cycles
  4387                           ; simple_byte           25    13 (average)
  4388                           ; jumptable            260     6 (fixed)
  4389                           ;	Chosen strategy is simple_byte
  4390  0E04  0862               	movf	initTmr0@prescaler^(0+128),w
  4391  0E05  3A00               	xorlw	0	; case 0
  4392  0E06  1903               	skipnz
  4393  0E07  2E23               	goto	l269
  4394  0E08  3A02               	xorlw	2	; case 2
  4395  0E09  1903               	skipnz
  4396  0E0A  2DD6               	goto	l3800
  4397  0E0B  3A06               	xorlw	6	; case 4
  4398  0E0C  1903               	skipnz
  4399  0E0D  2DD9               	goto	l3802
  4400  0E0E  3A0C               	xorlw	12	; case 8
  4401  0E0F  1903               	skipnz
  4402  0E10  2DDE               	goto	l3804
  4403  0E11  3A18               	xorlw	24	; case 16
  4404  0E12  1903               	skipnz
  4405  0E13  2DE3               	goto	l3806
  4406  0E14  3A30               	xorlw	48	; case 32
  4407  0E15  1903               	skipnz
  4408  0E16  2DE8               	goto	l3808
  4409  0E17  3A60               	xorlw	96	; case 64
  4410  0E18  1903               	skipnz
  4411  0E19  2DED               	goto	l3810
  4412  0E1A  3AC0               	xorlw	192	; case 128
  4413  0E1B  1903               	skipnz
  4414  0E1C  2DF2               	goto	l3812
  4415  0E1D  2E23               	goto	l269
  4416  0E1E                     l4364:
  4417                           
  4418                           ; Switch size 1, requested type "simple"
  4419                           ; Number of cases is 1, Range of values is 0 to 0
  4420                           ; switch strategies available:
  4421                           ; Name         Instructions Cycles
  4422                           ; simple_byte            4     3 (average)
  4423                           ; direct_byte           11     8 (fixed)
  4424                           ; jumptable            260     6 (fixed)
  4425                           ;	Chosen strategy is simple_byte
  4426  0E1E  0862               	movf	initTmr0@prescaler^(0+128),w
  4427  0E1F  3A00               	xorlw	0	; case 0
  4428  0E20  1903               	skipnz
  4429  0E21  2DF7               	goto	l3814
  4430  0E22  2E23               	goto	l269
  4431  0E23                     l269:
  4432                           
  4433                           ;tmr0_config.c: 46:     OPTION_REGbits.T0CS = 0;
  4434  0E23  1281               	bcf	1,5	;volatile
  4435                           
  4436                           ;tmr0_config.c: 47:     OPTION_REGbits.PSA = 0;
  4437  0E24  1181               	bcf	1,3	;volatile
  4438                           
  4439                           ;tmr0_config.c: 48:     INTCONbits.T0IE = 1;
  4440  0E25  168B               	bsf	11,5	;volatile
  4441                           
  4442                           ;tmr0_config.c: 49:     INTCONbits.T0IF = 0;
  4443  0E26  110B               	bcf	11,2	;volatile
  4444  0E27                     l3820:
  4445                           
  4446                           ;tmr0_config.c: 50:     TMR0 = 178;
  4447  0E27  30B2               	movlw	178
  4448  0E28  1283               	bcf	3,5	;RP0=0, select bank0
  4449  0E29  1303               	bcf	3,6	;RP1=0, select bank0
  4450  0E2A  0081               	movwf	1	;volatile
  4451  0E2B                     l279:
  4452  0E2B  0008               	return
  4453  0E2C                     __end_of_initTmr0:
  4454                           
  4455                           	psect	text10
  4456  0ACB                     __ptext10:	
  4457 ;; *************** function _initOscFreq *****************
  4458 ;; Defined at:
  4459 ;;		line 13 in file "osc_config.c"
  4460 ;; Parameters:    Size  Location     Type
  4461 ;;  freq            1    wreg     unsigned char 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  freq            1    2[BANK1 ] unsigned char 
  4464 ;; Return value:  Size  Location     Type
  4465 ;;                  1    wreg      void 
  4466 ;; Registers used:
  4467 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4468 ;; Tracked objects:
  4469 ;;		On entry : 0/0
  4470 ;;		On exit  : 0/0
  4471 ;;		Unchanged: 0/0
  4472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4473 ;;      Params:         0       0       0       0       0
  4474 ;;      Locals:         0       0       1       0       0
  4475 ;;      Temps:          0       0       2       0       0
  4476 ;;      Totals:         0       0       3       0       0
  4477 ;;Total ram usage:        3 bytes
  4478 ;; Hardware stack levels used: 1
  4479 ;; Hardware stack levels required when called: 4
  4480 ;; This function calls:
  4481 ;;		Nothing
  4482 ;; This function is called by:
  4483 ;;		_main
  4484 ;; This function uses a non-reentrant model
  4485 ;;
  4486                           
  4487  0ACB                     _initOscFreq:	
  4488                           ;psect for function _initOscFreq
  4489                           
  4490                           
  4491                           ;incstack = 0
  4492                           ; Regs used in _initOscFreq: [wreg-fsr0h+status,2+status,0]
  4493                           ;initOscFreq@freq stored from wreg
  4494  0ACB  1683               	bsf	3,5	;RP0=1, select bank1
  4495  0ACC  1303               	bcf	3,6	;RP1=0, select bank1
  4496  0ACD  00E4               	movwf	initOscFreq@freq^(0+128)
  4497  0ACE                     l3776:
  4498                           
  4499                           ;osc_config.c: 14:     switch (freq){
  4500  0ACE  2AE6               	goto	l3790
  4501  0ACF                     l3778:
  4502                           
  4503                           ;osc_config.c: 16:             OSCCONbits.IRCF = 0b100;
  4504  0ACF  080F               	movf	15,w	;volatile
  4505  0AD0  398F               	andlw	-113
  4506  0AD1  3840               	iorlw	64
  4507  0AD2  008F               	movwf	15	;volatile
  4508                           
  4509                           ;osc_config.c: 17:             break;
  4510  0AD3  2AFC               	goto	l253
  4511  0AD4                     l3780:
  4512                           
  4513                           ;osc_config.c: 19:             OSCCONbits.IRCF = 0b101;
  4514  0AD4  080F               	movf	15,w	;volatile
  4515  0AD5  398F               	andlw	-113
  4516  0AD6  3850               	iorlw	80
  4517  0AD7  008F               	movwf	15	;volatile
  4518                           
  4519                           ;osc_config.c: 20:             break;
  4520  0AD8  2AFC               	goto	l253
  4521  0AD9                     l3782:
  4522                           
  4523                           ;osc_config.c: 22:             OSCCONbits.IRCF = 0b110;
  4524  0AD9  080F               	movf	15,w	;volatile
  4525  0ADA  398F               	andlw	-113
  4526  0ADB  3860               	iorlw	96
  4527  0ADC  008F               	movwf	15	;volatile
  4528                           
  4529                           ;osc_config.c: 23:             break;
  4530  0ADD  2AFC               	goto	l253
  4531  0ADE                     l3784:
  4532                           
  4533                           ;osc_config.c: 25:             OSCCONbits.IRCF = 0b111;
  4534  0ADE  3070               	movlw	112
  4535  0ADF  048F               	iorwf	15,f	;volatile
  4536                           
  4537                           ;osc_config.c: 26:             break;
  4538  0AE0  2AFC               	goto	l253
  4539  0AE1                     l3786:
  4540                           
  4541                           ;osc_config.c: 28:             OSCCONbits.IRCF = 0b110;
  4542  0AE1  080F               	movf	15,w	;volatile
  4543  0AE2  398F               	andlw	-113
  4544  0AE3  3860               	iorlw	96
  4545  0AE4  008F               	movwf	15	;volatile
  4546                           
  4547                           ;osc_config.c: 29:             break;
  4548  0AE5  2AFC               	goto	l253
  4549  0AE6                     l3790:
  4550  0AE6  0864               	movf	initOscFreq@freq^(0+128),w
  4551  0AE7  00E2               	movwf	??_initOscFreq^(0+128)
  4552  0AE8  01E3               	clrf	(??_initOscFreq^(0+128)+1)
  4553                           
  4554                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4555                           ; Switch size 1, requested type "simple"
  4556                           ; Number of cases is 1, Range of values is 0 to 0
  4557                           ; switch strategies available:
  4558                           ; Name         Instructions Cycles
  4559                           ; simple_byte            4     3 (average)
  4560                           ; direct_byte           11     8 (fixed)
  4561                           ; jumptable            260     6 (fixed)
  4562                           ;	Chosen strategy is simple_byte
  4563  0AE9  0863               	movf	(??_initOscFreq+1)^(0+128),w
  4564  0AEA  3A00               	xorlw	0	; case 0
  4565  0AEB  1903               	skipnz
  4566  0AEC  2AEE               	goto	l4366
  4567  0AED  2AE1               	goto	l3786
  4568  0AEE                     l4366:
  4569                           
  4570                           ; Switch size 1, requested type "simple"
  4571                           ; Number of cases is 4, Range of values is 1 to 8
  4572                           ; switch strategies available:
  4573                           ; Name         Instructions Cycles
  4574                           ; simple_byte           13     7 (average)
  4575                           ; direct_byte           35    11 (fixed)
  4576                           ; jumptable            263     9 (fixed)
  4577                           ;	Chosen strategy is simple_byte
  4578  0AEE  0862               	movf	??_initOscFreq^(0+128),w
  4579  0AEF  3A01               	xorlw	1	; case 1
  4580  0AF0  1903               	skipnz
  4581  0AF1  2ACF               	goto	l3778
  4582  0AF2  3A03               	xorlw	3	; case 2
  4583  0AF3  1903               	skipnz
  4584  0AF4  2AD4               	goto	l3780
  4585  0AF5  3A06               	xorlw	6	; case 4
  4586  0AF6  1903               	skipnz
  4587  0AF7  2AD9               	goto	l3782
  4588  0AF8  3A0C               	xorlw	12	; case 8
  4589  0AF9  1903               	skipnz
  4590  0AFA  2ADE               	goto	l3784
  4591  0AFB  2AE1               	goto	l3786
  4592  0AFC                     l253:
  4593                           
  4594                           ;osc_config.c: 31:     OSCCONbits.SCS = 1;
  4595  0AFC  140F               	bsf	15,0	;volatile
  4596  0AFD                     l258:
  4597  0AFD  0008               	return
  4598  0AFE                     __end_of_initOscFreq:
  4599                           
  4600                           	psect	text11
  4601  0C83                     __ptext11:	
  4602 ;; *************** function _initAdc *****************
  4603 ;; Defined at:
  4604 ;;		line 18 in file "adc_config.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  adc_s           1    wreg     unsigned char 
  4607 ;;  vref_pos        1    0[BANK1 ] unsigned char 
  4608 ;;  vref_neg        1    1[BANK1 ] unsigned char 
  4609 ;; Auto vars:     Size  Location     Type
  4610 ;;  adc_s           1    4[BANK1 ] unsigned char 
  4611 ;; Return value:  Size  Location     Type
  4612 ;;                  1    wreg      void 
  4613 ;; Registers used:
  4614 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4615 ;; Tracked objects:
  4616 ;;		On entry : 0/0
  4617 ;;		On exit  : 0/0
  4618 ;;		Unchanged: 0/0
  4619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4620 ;;      Params:         0       0       2       0       0
  4621 ;;      Locals:         0       0       1       0       0
  4622 ;;      Temps:          0       0       2       0       0
  4623 ;;      Totals:         0       0       5       0       0
  4624 ;;Total ram usage:        5 bytes
  4625 ;; Hardware stack levels used: 1
  4626 ;; Hardware stack levels required when called: 4
  4627 ;; This function calls:
  4628 ;;		Nothing
  4629 ;; This function is called by:
  4630 ;;		_main
  4631 ;; This function uses a non-reentrant model
  4632 ;;
  4633                           
  4634  0C83                     _initAdc:	
  4635                           ;psect for function _initAdc
  4636                           
  4637                           
  4638                           ;incstack = 0
  4639                           ; Regs used in _initAdc: [wreg-fsr0h+status,2+status,0]
  4640                           ;initAdc@adc_s stored from wreg
  4641  0C83  1683               	bsf	3,5	;RP0=1, select bank1
  4642  0C84  1303               	bcf	3,6	;RP1=0, select bank1
  4643  0C85  00E6               	movwf	initAdc@adc_s^(0+128)
  4644  0C86                     l3840:
  4645                           
  4646                           ;adc_config.c: 19:     PIR1bits.ADIF = 0;
  4647  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  4648  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  4649  0C88  130C               	bcf	12,6	;volatile
  4650                           
  4651                           ;adc_config.c: 20:     PIE1bits.ADIE = 1;
  4652  0C89  1683               	bsf	3,5	;RP0=1, select bank1
  4653  0C8A  1303               	bcf	3,6	;RP1=0, select bank1
  4654  0C8B  170C               	bsf	12,6	;volatile
  4655  0C8C                     l3842:
  4656                           
  4657                           ;adc_config.c: 22:     ADCON1bits.VCFG0 = vref_pos;
  4658  0C8C  0C62               	rrf	initAdc@vref_pos^(0+128),w
  4659  0C8D  1C03               	skipc
  4660  0C8E  121F               	bcf	31,4	;volatile
  4661  0C8F  1803               	skipnc
  4662  0C90  161F               	bsf	31,4	;volatile
  4663                           
  4664                           ;adc_config.c: 23:     ADCON1bits.VCFG1 = vref_neg;
  4665  0C91  0C63               	rrf	initAdc@vref_neg^(0+128),w
  4666  0C92  1C03               	skipc
  4667  0C93  129F               	bcf	31,5	;volatile
  4668  0C94  1803               	skipnc
  4669  0C95  169F               	bsf	31,5	;volatile
  4670  0C96                     l3844:
  4671                           
  4672                           ;adc_config.c: 24:     ADCON1bits.ADFM = 1;
  4673  0C96  179F               	bsf	31,7	;volatile
  4674  0C97                     l3846:
  4675                           
  4676                           ;adc_config.c: 25:     ADCON0bits.ADON = 1;
  4677  0C97  1283               	bcf	3,5	;RP0=0, select bank0
  4678  0C98  1303               	bcf	3,6	;RP1=0, select bank0
  4679  0C99  141F               	bsf	31,0	;volatile
  4680  0C9A                     l3848:
  4681                           
  4682                           ;adc_config.c: 26:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  4683  0C9A  3002               	movlw	2
  4684  0C9B  1683               	bsf	3,5	;RP0=1, select bank1
  4685  0C9C  1303               	bcf	3,6	;RP1=0, select bank1
  4686  0C9D  00E4               	movwf	??_initAdc^(0+128)
  4687  0C9E                     u3747:
  4688  0C9E  0BE4               	decfsz	??_initAdc^(0+128),f
  4689  0C9F  2C9E               	goto	u3747
  4690  0CA0  0000               	nop
  4691                           
  4692                           ;adc_config.c: 29:     switch(adc_s){
  4693  0CA1  2CBA               	goto	l3860
  4694  0CA2                     l3850:
  4695                           
  4696                           ;adc_config.c: 31:             ADCON0bits.ADCS = 0b00;
  4697  0CA2  303F               	movlw	-193
  4698  0CA3  1283               	bcf	3,5	;RP0=0, select bank0
  4699  0CA4  1303               	bcf	3,6	;RP1=0, select bank0
  4700  0CA5  059F               	andwf	31,f	;volatile
  4701                           
  4702                           ;adc_config.c: 32:             break;
  4703  0CA6  2CD2               	goto	l305
  4704  0CA7                     l3852:
  4705                           
  4706                           ;adc_config.c: 34:             ADCON0bits.ADCS = 0b01;
  4707  0CA7  1283               	bcf	3,5	;RP0=0, select bank0
  4708  0CA8  1303               	bcf	3,6	;RP1=0, select bank0
  4709  0CA9  081F               	movf	31,w	;volatile
  4710  0CAA  393F               	andlw	-193
  4711  0CAB  3840               	iorlw	64
  4712  0CAC  009F               	movwf	31	;volatile
  4713                           
  4714                           ;adc_config.c: 35:             break;
  4715  0CAD  2CD2               	goto	l305
  4716  0CAE                     l3854:
  4717                           
  4718                           ;adc_config.c: 37:             ADCON0bits.ADCS = 0b10;
  4719  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
  4720  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
  4721  0CB0  081F               	movf	31,w	;volatile
  4722  0CB1  393F               	andlw	-193
  4723  0CB2  3880               	iorlw	128
  4724  0CB3  009F               	movwf	31	;volatile
  4725                           
  4726                           ;adc_config.c: 38:             break;
  4727  0CB4  2CD2               	goto	l305
  4728  0CB5                     l3856:
  4729                           
  4730                           ;adc_config.c: 40:             ADCON0bits.ADCS = 0b11;
  4731  0CB5  30C0               	movlw	192
  4732  0CB6  1283               	bcf	3,5	;RP0=0, select bank0
  4733  0CB7  1303               	bcf	3,6	;RP1=0, select bank0
  4734  0CB8  049F               	iorwf	31,f	;volatile
  4735                           
  4736                           ;adc_config.c: 41:             break;
  4737  0CB9  2CD2               	goto	l305
  4738  0CBA                     l3860:
  4739  0CBA  1683               	bsf	3,5	;RP0=1, select bank1
  4740  0CBB  1303               	bcf	3,6	;RP1=0, select bank1
  4741  0CBC  0866               	movf	initAdc@adc_s^(0+128),w
  4742  0CBD  00E4               	movwf	??_initAdc^(0+128)
  4743  0CBE  01E5               	clrf	(??_initAdc^(0+128)+1)
  4744                           
  4745                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4746                           ; Switch size 1, requested type "simple"
  4747                           ; Number of cases is 1, Range of values is 0 to 0
  4748                           ; switch strategies available:
  4749                           ; Name         Instructions Cycles
  4750                           ; simple_byte            4     3 (average)
  4751                           ; direct_byte           11     8 (fixed)
  4752                           ; jumptable            260     6 (fixed)
  4753                           ;	Chosen strategy is simple_byte
  4754  0CBF  0865               	movf	(??_initAdc+1)^(0+128),w
  4755  0CC0  3A00               	xorlw	0	; case 0
  4756  0CC1  1903               	skipnz
  4757  0CC2  2CC4               	goto	l4368
  4758  0CC3  2CD2               	goto	l305
  4759  0CC4                     l4368:
  4760                           
  4761                           ; Switch size 1, requested type "simple"
  4762                           ; Number of cases is 4, Range of values is 2 to 64
  4763                           ; switch strategies available:
  4764                           ; Name         Instructions Cycles
  4765                           ; simple_byte           13     7 (average)
  4766                           ; direct_byte          200    11 (fixed)
  4767                           ; jumptable            263     9 (fixed)
  4768                           ;	Chosen strategy is simple_byte
  4769  0CC4  0864               	movf	??_initAdc^(0+128),w
  4770  0CC5  3A02               	xorlw	2	; case 2
  4771  0CC6  1903               	skipnz
  4772  0CC7  2CA2               	goto	l3850
  4773  0CC8  3A0A               	xorlw	10	; case 8
  4774  0CC9  1903               	skipnz
  4775  0CCA  2CA7               	goto	l3852
  4776  0CCB  3A28               	xorlw	40	; case 32
  4777  0CCC  1903               	skipnz
  4778  0CCD  2CAE               	goto	l3854
  4779  0CCE  3A60               	xorlw	96	; case 64
  4780  0CCF  1903               	skipnz
  4781  0CD0  2CB5               	goto	l3856
  4782  0CD1  2CD2               	goto	l305
  4783  0CD2                     l305:
  4784  0CD2  0008               	return
  4785  0CD3                     __end_of_initAdc:
  4786                           
  4787                           	psect	text12
  4788  0983                     __ptext12:	
  4789 ;; *************** function _binTodec *****************
  4790 ;; Defined at:
  4791 ;;		line 342 in file "sensor_ctrl_main.c"
  4792 ;; Parameters:    Size  Location     Type
  4793 ;;  num             1    wreg     unsigned char 
  4794 ;; Auto vars:     Size  Location     Type
  4795 ;;  num             1    7[BANK1 ] unsigned char 
  4796 ;; Return value:  Size  Location     Type
  4797 ;;                  1    wreg      unsigned char 
  4798 ;; Registers used:
  4799 ;;		wreg, status,2, status,0, pclath, cstack
  4800 ;; Tracked objects:
  4801 ;;		On entry : 0/0
  4802 ;;		On exit  : 0/0
  4803 ;;		Unchanged: 0/0
  4804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4805 ;;      Params:         0       0       0       0       0
  4806 ;;      Locals:         0       0       1       0       0
  4807 ;;      Temps:          0       0       3       0       0
  4808 ;;      Totals:         0       0       4       0       0
  4809 ;;Total ram usage:        4 bytes
  4810 ;; Hardware stack levels used: 1
  4811 ;; Hardware stack levels required when called: 5
  4812 ;; This function calls:
  4813 ;;		___bmul
  4814 ;; This function is called by:
  4815 ;;		_main
  4816 ;; This function uses a non-reentrant model
  4817 ;;
  4818                           
  4819  0983                     _binTodec:	
  4820                           ;psect for function _binTodec
  4821                           
  4822                           
  4823                           ;incstack = 0
  4824                           ; Regs used in _binTodec: [wreg+status,2+status,0+pclath+cstack]
  4825                           ;binTodec@num stored from wreg
  4826  0983  1683               	bsf	3,5	;RP0=1, select bank1
  4827  0984  1303               	bcf	3,6	;RP1=0, select bank1
  4828  0985  00E9               	movwf	binTodec@num^(0+128)
  4829  0986                     l3942:
  4830                           
  4831                           ;sensor_ctrl_main.c: 343:     return((num >> 4) * 10 + (num & 0x0F));
  4832  0986  300F               	movlw	15
  4833  0987  0569               	andwf	binTodec@num^(0+128),w
  4834  0988  00E6               	movwf	??_binTodec^(0+128)
  4835  0989  300A               	movlw	10
  4836  098A  00E7               	movwf	(??_binTodec+1)^(0+128)
  4837  098B  0867               	movf	(??_binTodec+1)^(0+128),w
  4838  098C  00E2               	movwf	___bmul@multiplicand^(0+128)
  4839  098D  0869               	movf	binTodec@num^(0+128),w
  4840  098E  00E8               	movwf	(??_binTodec+2)^(0+128)
  4841  098F  3004               	movlw	4
  4842  0990                     u3455:
  4843  0990  1003               	clrc
  4844  0991  0CE8               	rrf	(??_binTodec+2)^(0+128),f
  4845  0992  3EFF               	addlw	-1
  4846  0993  1D03               	skipz
  4847  0994  2990               	goto	u3455
  4848  0995  0868               	movf	(??_binTodec+2)^(0+128),w
  4849  0996  120A  158A  2121  120A  158A  	fcall	___bmul
  4850  099B  1683               	bsf	3,5	;RP0=1, select bank1
  4851  099C  1303               	bcf	3,6	;RP1=0, select bank1
  4852  099D  0766               	addwf	??_binTodec^(0+128),w
  4853  099E                     l210:
  4854  099E  0008               	return
  4855  099F                     __end_of_binTodec:
  4856                           
  4857                           	psect	text13
  4858  0921                     __ptext13:	
  4859 ;; *************** function ___bmul *****************
  4860 ;; Defined at:
  4861 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul8.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  multiplier      1    wreg     unsigned char 
  4864 ;;  multiplicand    1    0[BANK1 ] unsigned char 
  4865 ;; Auto vars:     Size  Location     Type
  4866 ;;  multiplier      1    3[BANK1 ] unsigned char 
  4867 ;;  product         1    2[BANK1 ] unsigned char 
  4868 ;; Return value:  Size  Location     Type
  4869 ;;                  1    wreg      unsigned char 
  4870 ;; Registers used:
  4871 ;;		wreg, status,2, status,0
  4872 ;; Tracked objects:
  4873 ;;		On entry : 0/0
  4874 ;;		On exit  : 0/0
  4875 ;;		Unchanged: 0/0
  4876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4877 ;;      Params:         0       0       1       0       0
  4878 ;;      Locals:         0       0       2       0       0
  4879 ;;      Temps:          0       0       1       0       0
  4880 ;;      Totals:         0       0       4       0       0
  4881 ;;Total ram usage:        4 bytes
  4882 ;; Hardware stack levels used: 1
  4883 ;; Hardware stack levels required when called: 4
  4884 ;; This function calls:
  4885 ;;		Nothing
  4886 ;; This function is called by:
  4887 ;;		_binTodec
  4888 ;; This function uses a non-reentrant model
  4889 ;;
  4890                           
  4891  0921                     ___bmul:	
  4892                           ;psect for function ___bmul
  4893                           
  4894                           
  4895                           ;incstack = 0
  4896                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  4897                           ;___bmul@multiplier stored from wreg
  4898  0921  1683               	bsf	3,5	;RP0=1, select bank1
  4899  0922  1303               	bcf	3,6	;RP1=0, select bank1
  4900  0923  00E5               	movwf	___bmul@multiplier^(0+128)
  4901  0924                     l3530:
  4902  0924  01E4               	clrf	___bmul@product^(0+128)
  4903  0925                     l3532:
  4904  0925  1C65               	btfss	___bmul@multiplier^(0+128),0
  4905  0926  2928               	goto	u3021
  4906  0927  2929               	goto	u3020
  4907  0928                     u3021:
  4908  0928  292D               	goto	l3536
  4909  0929                     u3020:
  4910  0929                     l3534:
  4911  0929  0862               	movf	___bmul@multiplicand^(0+128),w
  4912  092A  00E3               	movwf	??___bmul^(0+128)
  4913  092B  0863               	movf	??___bmul^(0+128),w
  4914  092C  07E4               	addwf	___bmul@product^(0+128),f
  4915  092D                     l3536:
  4916  092D  1003               	clrc
  4917  092E  0DE2               	rlf	___bmul@multiplicand^(0+128),f
  4918  092F                     l3538:
  4919  092F  1003               	clrc
  4920  0930  0CE5               	rrf	___bmul@multiplier^(0+128),f
  4921  0931  0865               	movf	___bmul@multiplier^(0+128),w
  4922  0932  1D03               	btfss	3,2
  4923  0933  2935               	goto	u3031
  4924  0934  2936               	goto	u3030
  4925  0935                     u3031:
  4926  0935  2925               	goto	l3532
  4927  0936                     u3030:
  4928  0936                     l3540:
  4929  0936  0864               	movf	___bmul@product^(0+128),w
  4930  0937                     l611:
  4931  0937  0008               	return
  4932  0938                     __end_of___bmul:
  4933                           
  4934                           	psect	text14
  4935  0950                     __ptext14:	
  4936 ;; *************** function _adcGo *****************
  4937 ;; Defined at:
  4938 ;;		line 46 in file "adc_config.c"
  4939 ;; Parameters:    Size  Location     Type
  4940 ;;  channel         1    wreg     unsigned char 
  4941 ;; Auto vars:     Size  Location     Type
  4942 ;;  channel         1    1[BANK1 ] unsigned char 
  4943 ;; Return value:  Size  Location     Type
  4944 ;;                  1    wreg      void 
  4945 ;; Registers used:
  4946 ;;		wreg, status,2, status,0
  4947 ;; Tracked objects:
  4948 ;;		On entry : 0/0
  4949 ;;		On exit  : 0/0
  4950 ;;		Unchanged: 0/0
  4951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4952 ;;      Params:         0       0       0       0       0
  4953 ;;      Locals:         0       0       1       0       0
  4954 ;;      Temps:          0       0       1       0       0
  4955 ;;      Totals:         0       0       2       0       0
  4956 ;;Total ram usage:        2 bytes
  4957 ;; Hardware stack levels used: 1
  4958 ;; Hardware stack levels required when called: 4
  4959 ;; This function calls:
  4960 ;;		Nothing
  4961 ;; This function is called by:
  4962 ;;		_main
  4963 ;; This function uses a non-reentrant model
  4964 ;;
  4965                           
  4966  0950                     _adcGo:	
  4967                           ;psect for function _adcGo
  4968                           
  4969                           
  4970                           ;incstack = 0
  4971                           ; Regs used in _adcGo: [wreg+status,2+status,0]
  4972                           ;adcGo@channel stored from wreg
  4973  0950  1683               	bsf	3,5	;RP0=1, select bank1
  4974  0951  1303               	bcf	3,6	;RP1=0, select bank1
  4975  0952  00E3               	movwf	adcGo@channel^(0+128)
  4976  0953                     l3904:
  4977                           
  4978                           ;adc_config.c: 47:     ADCON0bits.ADCS = channel;
  4979  0953  0863               	movf	adcGo@channel^(0+128),w
  4980  0954  00E2               	movwf	??_adcGo^(0+128)
  4981  0955  0EE2               	swapf	??_adcGo^(0+128),f
  4982  0956  0DE2               	rlf	??_adcGo^(0+128),f
  4983  0957  0DE2               	rlf	??_adcGo^(0+128),f
  4984  0958  1283               	bcf	3,5	;RP0=0, select bank0
  4985  0959  1303               	bcf	3,6	;RP1=0, select bank0
  4986  095A  081F               	movf	31,w	;volatile
  4987  095B  1683               	bsf	3,5	;RP0=1, select bank1
  4988  095C  1303               	bcf	3,6	;RP1=0, select bank1
  4989  095D  0662               	xorwf	??_adcGo^(0+128),w
  4990  095E  393F               	andlw	-193
  4991  095F  0662               	xorwf	??_adcGo^(0+128),w
  4992  0960  1283               	bcf	3,5	;RP0=0, select bank0
  4993  0961  1303               	bcf	3,6	;RP1=0, select bank0
  4994  0962  009F               	movwf	31	;volatile
  4995  0963                     l3906:
  4996                           
  4997                           ;adc_config.c: 48:     if (ADCON0bits.GO == 0){
  4998  0963  189F               	btfsc	31,1	;volatile
  4999  0964  2966               	goto	u3431
  5000  0965  2967               	goto	u3430
  5001  0966                     u3431:
  5002  0966  2968               	goto	l309
  5003  0967                     u3430:
  5004  0967                     l3908:
  5005                           
  5006                           ;adc_config.c: 49:         ADCON0bits.GO = 1;
  5007  0967  149F               	bsf	31,1	;volatile
  5008  0968                     l309:
  5009  0968  0008               	return
  5010  0969                     __end_of_adcGo:
  5011                           
  5012                           	psect	text15
  5013  0CD3                     __ptext15:	
  5014 ;; *************** function _Lcd_Write_String *****************
  5015 ;; Defined at:
  5016 ;;		line 102 in file "LCD4b.c"
  5017 ;; Parameters:    Size  Location     Type
  5018 ;;  a               2    5[BANK1 ] PTR unsigned char 
  5019 ;;		 -> STR_22(2), STR_21(6), STR_20(3), STR_19(2), 
  5020 ;;		 -> STR_18(6), STR_17(3), STR_16(2), STR_15(4), 
  5021 ;;		 -> STR_14(5), STR_13(2), STR_12(4), STR_11(3), 
  5022 ;;		 -> STR_10(2), STR_9(2), STR_8(5), RTC_hor_str(10), 
  5023 ;;		 -> RTC_min_str(10), temp_str(10), HS_str(10), 
  5024 ;; Auto vars:     Size  Location     Type
  5025 ;;  i               2   10[BANK1 ] int 
  5026 ;; Return value:  Size  Location     Type
  5027 ;;                  1    wreg      void 
  5028 ;; Registers used:
  5029 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5030 ;; Tracked objects:
  5031 ;;		On entry : 0/0
  5032 ;;		On exit  : 0/0
  5033 ;;		Unchanged: 0/0
  5034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5035 ;;      Params:         0       0       2       0       0
  5036 ;;      Locals:         0       0       2       0       0
  5037 ;;      Temps:          0       0       3       0       0
  5038 ;;      Totals:         0       0       7       0       0
  5039 ;;Total ram usage:        7 bytes
  5040 ;; Hardware stack levels used: 1
  5041 ;; Hardware stack levels required when called: 6
  5042 ;; This function calls:
  5043 ;;		_Lcd_Write_Char
  5044 ;; This function is called by:
  5045 ;;		_main
  5046 ;; This function uses a non-reentrant model
  5047 ;;
  5048                           
  5049  0CD3                     _Lcd_Write_String:	
  5050                           ;psect for function _Lcd_Write_String
  5051                           
  5052  0CD3                     l3966:	
  5053                           ;incstack = 0
  5054                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5055                           
  5056                           
  5057                           ;LCD4b.c: 103:     int i;;LCD4b.c: 104:     for (i = 0; a[i] != '\0'; i++)
  5058  0CD3  1683               	bsf	3,5	;RP0=1, select bank1
  5059  0CD4  1303               	bcf	3,6	;RP1=0, select bank1
  5060  0CD5  01EC               	clrf	Lcd_Write_String@i^(0+128)
  5061  0CD6  01ED               	clrf	(Lcd_Write_String@i+1)^(0+128)
  5062  0CD7  2D04               	goto	l3972
  5063  0CD8                     l3968:
  5064                           
  5065                           ;LCD4b.c: 105:         Lcd_Write_Char(a[i]);
  5066  0CD8  1683               	bsf	3,5	;RP0=1, select bank1
  5067  0CD9  1303               	bcf	3,6	;RP1=0, select bank1
  5068  0CDA  086C               	movf	Lcd_Write_String@i^(0+128),w
  5069  0CDB  0767               	addwf	Lcd_Write_String@a^(0+128),w
  5070  0CDC  00EA               	movwf	(??_Lcd_Write_String+1)^(0+128)
  5071  0CDD  0868               	movf	(Lcd_Write_String@a+1)^(0+128),w
  5072  0CDE  00E9               	movwf	??_Lcd_Write_String^(0+128)
  5073  0CDF  1803               	skipnc
  5074  0CE0  0AE9               	incf	??_Lcd_Write_String^(0+128),f
  5075  0CE1  1FEC               	btfss	Lcd_Write_String@i^(0+128),7
  5076  0CE2  2CE4               	goto	u3500
  5077  0CE3  03E9               	decf	??_Lcd_Write_String^(0+128),f
  5078  0CE4                     u3500:
  5079  0CE4  1683               	bsf	3,5	;RP0=1, select bank1
  5080  0CE5  1303               	bcf	3,6	;RP1=0, select bank1
  5081  0CE6  0869               	movf	??_Lcd_Write_String^(0+128),w
  5082  0CE7  00EB               	movwf	((??_Lcd_Write_String+1)^(0+128)+1)
  5083  0CE8  086B               	movf	(??_Lcd_Write_String+2)^(0+128),w
  5084  0CE9  1283               	bcf	3,5	;RP0=0, select bank0
  5085  0CEA  1303               	bcf	3,6	;RP1=0, select bank0
  5086  0CEB  00FF               	movwf	btemp+1
  5087  0CEC  1683               	bsf	3,5	;RP0=1, select bank1
  5088  0CED  1303               	bcf	3,6	;RP1=0, select bank1
  5089  0CEE  086A               	movf	(??_Lcd_Write_String+1)^(0+128),w
  5090  0CEF  0084               	movwf	4
  5091  0CF0  1283               	bcf	3,5	;RP0=0, select bank0
  5092  0CF1  1303               	bcf	3,6	;RP1=0, select bank0
  5093  0CF2  120A  158A  2000  120A  158A  	fcall	stringtab
  5094  0CF7  120A  158A  2370  120A  158A  	fcall	_Lcd_Write_Char
  5095  0CFC                     l3970:
  5096  0CFC  3001               	movlw	1
  5097  0CFD  1683               	bsf	3,5	;RP0=1, select bank1
  5098  0CFE  1303               	bcf	3,6	;RP1=0, select bank1
  5099  0CFF  07EC               	addwf	Lcd_Write_String@i^(0+128),f
  5100  0D00  1803               	skipnc
  5101  0D01  0AED               	incf	(Lcd_Write_String@i+1)^(0+128),f
  5102  0D02  3000               	movlw	0
  5103  0D03  07ED               	addwf	(Lcd_Write_String@i+1)^(0+128),f
  5104  0D04                     l3972:
  5105  0D04  086C               	movf	Lcd_Write_String@i^(0+128),w
  5106  0D05  0767               	addwf	Lcd_Write_String@a^(0+128),w
  5107  0D06  00EA               	movwf	(??_Lcd_Write_String+1)^(0+128)
  5108  0D07  0868               	movf	(Lcd_Write_String@a+1)^(0+128),w
  5109  0D08  00E9               	movwf	??_Lcd_Write_String^(0+128)
  5110  0D09  1803               	skipnc
  5111  0D0A  0AE9               	incf	??_Lcd_Write_String^(0+128),f
  5112  0D0B  1FEC               	btfss	Lcd_Write_String@i^(0+128),7
  5113  0D0C  2D0E               	goto	u3510
  5114  0D0D  03E9               	decf	??_Lcd_Write_String^(0+128),f
  5115  0D0E                     u3510:
  5116  0D0E  1683               	bsf	3,5	;RP0=1, select bank1
  5117  0D0F  1303               	bcf	3,6	;RP1=0, select bank1
  5118  0D10  0869               	movf	??_Lcd_Write_String^(0+128),w
  5119  0D11  00EB               	movwf	((??_Lcd_Write_String+1)^(0+128)+1)
  5120  0D12  086B               	movf	(??_Lcd_Write_String+2)^(0+128),w
  5121  0D13  1283               	bcf	3,5	;RP0=0, select bank0
  5122  0D14  1303               	bcf	3,6	;RP1=0, select bank0
  5123  0D15  00FF               	movwf	btemp+1
  5124  0D16  1683               	bsf	3,5	;RP0=1, select bank1
  5125  0D17  1303               	bcf	3,6	;RP1=0, select bank1
  5126  0D18  086A               	movf	(??_Lcd_Write_String+1)^(0+128),w
  5127  0D19  0084               	movwf	4
  5128  0D1A  1283               	bcf	3,5	;RP0=0, select bank0
  5129  0D1B  1303               	bcf	3,6	;RP1=0, select bank0
  5130  0D1C  120A  158A  2000  120A  158A  	fcall	stringtab
  5131  0D21  3A00               	xorlw	0
  5132  0D22  1D03               	skipz
  5133  0D23  2D25               	goto	u3521
  5134  0D24  2D26               	goto	u3520
  5135  0D25                     u3521:
  5136  0D25  2CD8               	goto	l3968
  5137  0D26                     u3520:
  5138  0D26                     l387:
  5139  0D26  0008               	return
  5140  0D27                     __end_of_Lcd_Write_String:
  5141                           
  5142                           	psect	text16
  5143  0B70                     __ptext16:	
  5144 ;; *************** function _Lcd_Write_Char *****************
  5145 ;; Defined at:
  5146 ;;		line 87 in file "LCD4b.c"
  5147 ;; Parameters:    Size  Location     Type
  5148 ;;  a               1    wreg     unsigned char 
  5149 ;; Auto vars:     Size  Location     Type
  5150 ;;  a               1    4[BANK1 ] unsigned char 
  5151 ;;  y               1    3[BANK1 ] unsigned char 
  5152 ;;  temp            1    2[BANK1 ] unsigned char 
  5153 ;; Return value:  Size  Location     Type
  5154 ;;                  1    wreg      void 
  5155 ;; Registers used:
  5156 ;;		wreg, status,2, status,0, pclath, cstack
  5157 ;; Tracked objects:
  5158 ;;		On entry : 0/0
  5159 ;;		On exit  : 0/0
  5160 ;;		Unchanged: 0/0
  5161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5162 ;;      Params:         0       0       0       0       0
  5163 ;;      Locals:         0       0       3       0       0
  5164 ;;      Temps:          0       0       1       0       0
  5165 ;;      Totals:         0       0       4       0       0
  5166 ;;Total ram usage:        4 bytes
  5167 ;; Hardware stack levels used: 1
  5168 ;; Hardware stack levels required when called: 5
  5169 ;; This function calls:
  5170 ;;		_Lcd_Port
  5171 ;; This function is called by:
  5172 ;;		_Lcd_Write_String
  5173 ;; This function uses a non-reentrant model
  5174 ;;
  5175                           
  5176  0B70                     _Lcd_Write_Char:	
  5177                           ;psect for function _Lcd_Write_Char
  5178                           
  5179                           
  5180                           ;incstack = 0
  5181                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  5182                           ;Lcd_Write_Char@a stored from wreg
  5183  0B70  1683               	bsf	3,5	;RP0=1, select bank1
  5184  0B71  1303               	bcf	3,6	;RP1=0, select bank1
  5185  0B72  00E6               	movwf	Lcd_Write_Char@a^(0+128)
  5186  0B73                     l3480:
  5187                           
  5188                           ;LCD4b.c: 88:     char temp, y;;LCD4b.c: 89:     temp = a & 0x0F;
  5189  0B73  0866               	movf	Lcd_Write_Char@a^(0+128),w
  5190  0B74  390F               	andlw	15
  5191  0B75  00E3               	movwf	??_Lcd_Write_Char^(0+128)
  5192  0B76  0863               	movf	??_Lcd_Write_Char^(0+128),w
  5193  0B77  00E4               	movwf	Lcd_Write_Char@temp^(0+128)
  5194                           
  5195                           ;LCD4b.c: 90:     y = a & 0xF0;
  5196  0B78  0866               	movf	Lcd_Write_Char@a^(0+128),w
  5197  0B79  39F0               	andlw	240
  5198  0B7A  00E3               	movwf	??_Lcd_Write_Char^(0+128)
  5199  0B7B  0863               	movf	??_Lcd_Write_Char^(0+128),w
  5200  0B7C  00E5               	movwf	Lcd_Write_Char@y^(0+128)
  5201  0B7D                     l3482:
  5202                           
  5203                           ;LCD4b.c: 91:     PORTBbits.RB2 = 1;
  5204  0B7D  1283               	bcf	3,5	;RP0=0, select bank0
  5205  0B7E  1303               	bcf	3,6	;RP1=0, select bank0
  5206  0B7F  1506               	bsf	6,2	;volatile
  5207  0B80                     l3484:
  5208                           
  5209                           ;LCD4b.c: 92:     Lcd_Port(y >> 4);
  5210  0B80  1683               	bsf	3,5	;RP0=1, select bank1
  5211  0B81  1303               	bcf	3,6	;RP1=0, select bank1
  5212  0B82  0865               	movf	Lcd_Write_Char@y^(0+128),w
  5213  0B83  00E3               	movwf	??_Lcd_Write_Char^(0+128)
  5214  0B84  3004               	movlw	4
  5215  0B85                     u2935:
  5216  0B85  1003               	clrc
  5217  0B86  0CE3               	rrf	??_Lcd_Write_Char^(0+128),f
  5218  0B87  3EFF               	addlw	-1
  5219  0B88  1D03               	skipz
  5220  0B89  2B85               	goto	u2935
  5221  0B8A  0863               	movf	??_Lcd_Write_Char^(0+128),w
  5222  0B8B  120A  158A  22FE  120A  158A  	fcall	_Lcd_Port
  5223  0B90                     l3486:
  5224                           
  5225                           ;LCD4b.c: 93:     RB3 = 1;
  5226  0B90  1283               	bcf	3,5	;RP0=0, select bank0
  5227  0B91  1303               	bcf	3,6	;RP1=0, select bank0
  5228  0B92  1586               	bsf	6,3	;volatile
  5229  0B93                     l3488:
  5230                           
  5231                           ;LCD4b.c: 94:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  5232  0B93  3002               	movlw	2
  5233  0B94  1683               	bsf	3,5	;RP0=1, select bank1
  5234  0B95  1303               	bcf	3,6	;RP1=0, select bank1
  5235  0B96  00E3               	movwf	??_Lcd_Write_Char^(0+128)
  5236  0B97                     u3757:
  5237  0B97  0BE3               	decfsz	??_Lcd_Write_Char^(0+128),f
  5238  0B98  2B97               	goto	u3757
  5239  0B99  0000               	nop
  5240  0B9A                     l3490:
  5241                           
  5242                           ;LCD4b.c: 95:     RB3 = 0;
  5243  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  5244  0B9B  1303               	bcf	3,6	;RP1=0, select bank0
  5245  0B9C  1186               	bcf	6,3	;volatile
  5246  0B9D                     l3492:
  5247                           
  5248                           ;LCD4b.c: 96:     Lcd_Port(temp);
  5249  0B9D  1683               	bsf	3,5	;RP0=1, select bank1
  5250  0B9E  1303               	bcf	3,6	;RP1=0, select bank1
  5251  0B9F  0864               	movf	Lcd_Write_Char@temp^(0+128),w
  5252  0BA0  120A  158A  22FE  120A  158A  	fcall	_Lcd_Port
  5253  0BA5                     l3494:
  5254                           
  5255                           ;LCD4b.c: 97:     RB3 = 1;
  5256  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
  5257  0BA6  1303               	bcf	3,6	;RP1=0, select bank0
  5258  0BA7  1586               	bsf	6,3	;volatile
  5259  0BA8                     l3496:
  5260                           
  5261                           ;LCD4b.c: 98:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  5262  0BA8  3002               	movlw	2
  5263  0BA9  1683               	bsf	3,5	;RP0=1, select bank1
  5264  0BAA  1303               	bcf	3,6	;RP1=0, select bank1
  5265  0BAB  00E3               	movwf	??_Lcd_Write_Char^(0+128)
  5266  0BAC                     u3767:
  5267  0BAC  0BE3               	decfsz	??_Lcd_Write_Char^(0+128),f
  5268  0BAD  2BAC               	goto	u3767
  5269  0BAE  0000               	nop
  5270  0BAF                     l3498:
  5271                           
  5272                           ;LCD4b.c: 99:     RB3 = 0;
  5273  0BAF  1283               	bcf	3,5	;RP0=0, select bank0
  5274  0BB0  1303               	bcf	3,6	;RP1=0, select bank0
  5275  0BB1  1186               	bcf	6,3	;volatile
  5276  0BB2                     l381:
  5277  0BB2  0008               	return
  5278  0BB3                     __end_of_Lcd_Write_Char:
  5279                           
  5280                           	psect	text17
  5281  0D7E                     __ptext17:	
  5282 ;; *************** function _Lcd_Set_Cursor *****************
  5283 ;; Defined at:
  5284 ;;		line 51 in file "LCD4b.c"
  5285 ;; Parameters:    Size  Location     Type
  5286 ;;  a               1    wreg     unsigned char 
  5287 ;;  b               1    3[BANK1 ] unsigned char 
  5288 ;; Auto vars:     Size  Location     Type
  5289 ;;  a               1    6[BANK1 ] unsigned char 
  5290 ;;  temp            1    9[BANK1 ] unsigned char 
  5291 ;;  y               1    8[BANK1 ] unsigned char 
  5292 ;;  z               1    7[BANK1 ] unsigned char 
  5293 ;; Return value:  Size  Location     Type
  5294 ;;                  1    wreg      void 
  5295 ;; Registers used:
  5296 ;;		wreg, status,2, status,0, pclath, cstack
  5297 ;; Tracked objects:
  5298 ;;		On entry : 0/0
  5299 ;;		On exit  : 0/0
  5300 ;;		Unchanged: 0/0
  5301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5302 ;;      Params:         0       0       1       0       0
  5303 ;;      Locals:         0       0       4       0       0
  5304 ;;      Temps:          0       0       2       0       0
  5305 ;;      Totals:         0       0       7       0       0
  5306 ;;Total ram usage:        7 bytes
  5307 ;; Hardware stack levels used: 1
  5308 ;; Hardware stack levels required when called: 6
  5309 ;; This function calls:
  5310 ;;		_Lcd_Cmd
  5311 ;; This function is called by:
  5312 ;;		_main
  5313 ;; This function uses a non-reentrant model
  5314 ;;
  5315                           
  5316  0D7E                     _Lcd_Set_Cursor:	
  5317                           ;psect for function _Lcd_Set_Cursor
  5318                           
  5319                           
  5320                           ;incstack = 0
  5321                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  5322                           ;Lcd_Set_Cursor@a stored from wreg
  5323  0D7E  1683               	bsf	3,5	;RP0=1, select bank1
  5324  0D7F  1303               	bcf	3,6	;RP1=0, select bank1
  5325  0D80  00E8               	movwf	Lcd_Set_Cursor@a^(0+128)
  5326  0D81                     l3946:
  5327                           
  5328                           ;LCD4b.c: 51: void Lcd_Set_Cursor(char a, char b);LCD4b.c: 52: {;LCD4b.c: 53:     char t
      +                          emp, z, y;;LCD4b.c: 54:     if (a == 0) {
  5329  0D81  0868               	movf	Lcd_Set_Cursor@a^(0+128),w
  5330  0D82  1D03               	btfss	3,2
  5331  0D83  2D85               	goto	u3461
  5332  0D84  2D86               	goto	u3460
  5333  0D85                     u3461:
  5334  0D85  2DAB               	goto	l3956
  5335  0D86                     u3460:
  5336  0D86                     l3948:
  5337                           
  5338                           ;LCD4b.c: 55:         temp = 0x80 + b;
  5339  0D86  0865               	movf	Lcd_Set_Cursor@b^(0+128),w
  5340  0D87  3E80               	addlw	128
  5341  0D88  00E6               	movwf	??_Lcd_Set_Cursor^(0+128)
  5342  0D89  0866               	movf	??_Lcd_Set_Cursor^(0+128),w
  5343  0D8A  00EB               	movwf	Lcd_Set_Cursor@temp^(0+128)
  5344                           
  5345                           ;LCD4b.c: 56:         z = temp >> 4;
  5346  0D8B  086B               	movf	Lcd_Set_Cursor@temp^(0+128),w
  5347  0D8C  00E6               	movwf	??_Lcd_Set_Cursor^(0+128)
  5348  0D8D  3004               	movlw	4
  5349  0D8E                     u3475:
  5350  0D8E  1003               	clrc
  5351  0D8F  0CE6               	rrf	??_Lcd_Set_Cursor^(0+128),f
  5352  0D90  3EFF               	addlw	-1
  5353  0D91  1D03               	skipz
  5354  0D92  2D8E               	goto	u3475
  5355  0D93  0866               	movf	??_Lcd_Set_Cursor^(0+128),w
  5356  0D94  00E7               	movwf	(??_Lcd_Set_Cursor+1)^(0+128)
  5357  0D95  0867               	movf	(??_Lcd_Set_Cursor+1)^(0+128),w
  5358  0D96  00E9               	movwf	Lcd_Set_Cursor@z^(0+128)
  5359  0D97                     l3950:
  5360                           
  5361                           ;LCD4b.c: 57:         y = temp & 0x0F;
  5362  0D97  086B               	movf	Lcd_Set_Cursor@temp^(0+128),w
  5363  0D98  390F               	andlw	15
  5364  0D99  00E6               	movwf	??_Lcd_Set_Cursor^(0+128)
  5365  0D9A  0866               	movf	??_Lcd_Set_Cursor^(0+128),w
  5366  0D9B  00EA               	movwf	Lcd_Set_Cursor@y^(0+128)
  5367  0D9C                     l3952:
  5368                           
  5369                           ;LCD4b.c: 58:         Lcd_Cmd(z);
  5370  0D9C  0869               	movf	Lcd_Set_Cursor@z^(0+128),w
  5371  0D9D  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5372  0DA2                     l3954:
  5373                           
  5374                           ;LCD4b.c: 59:         Lcd_Cmd(y);
  5375  0DA2  1683               	bsf	3,5	;RP0=1, select bank1
  5376  0DA3  1303               	bcf	3,6	;RP1=0, select bank1
  5377  0DA4  086A               	movf	Lcd_Set_Cursor@y^(0+128),w
  5378  0DA5  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5379                           
  5380                           ;LCD4b.c: 60:     } else if (a == 1) {
  5381  0DAA  2DD4               	goto	l375
  5382  0DAB                     l3956:
  5383  0DAB  0368               	decf	Lcd_Set_Cursor@a^(0+128),w
  5384  0DAC  1D03               	btfss	3,2
  5385  0DAD  2DAF               	goto	u3481
  5386  0DAE  2DB0               	goto	u3480
  5387  0DAF                     u3481:
  5388  0DAF  2DD4               	goto	l375
  5389  0DB0                     u3480:
  5390  0DB0                     l3958:
  5391                           
  5392                           ;LCD4b.c: 61:         temp = 0xC0 + b;
  5393  0DB0  0865               	movf	Lcd_Set_Cursor@b^(0+128),w
  5394  0DB1  3EC0               	addlw	192
  5395  0DB2  00E6               	movwf	??_Lcd_Set_Cursor^(0+128)
  5396  0DB3  0866               	movf	??_Lcd_Set_Cursor^(0+128),w
  5397  0DB4  00EB               	movwf	Lcd_Set_Cursor@temp^(0+128)
  5398                           
  5399                           ;LCD4b.c: 62:         z = temp >> 4;
  5400  0DB5  086B               	movf	Lcd_Set_Cursor@temp^(0+128),w
  5401  0DB6  00E6               	movwf	??_Lcd_Set_Cursor^(0+128)
  5402  0DB7  3004               	movlw	4
  5403  0DB8                     u3495:
  5404  0DB8  1003               	clrc
  5405  0DB9  0CE6               	rrf	??_Lcd_Set_Cursor^(0+128),f
  5406  0DBA  3EFF               	addlw	-1
  5407  0DBB  1D03               	skipz
  5408  0DBC  2DB8               	goto	u3495
  5409  0DBD  0866               	movf	??_Lcd_Set_Cursor^(0+128),w
  5410  0DBE  00E7               	movwf	(??_Lcd_Set_Cursor+1)^(0+128)
  5411  0DBF  0867               	movf	(??_Lcd_Set_Cursor+1)^(0+128),w
  5412  0DC0  00E9               	movwf	Lcd_Set_Cursor@z^(0+128)
  5413  0DC1                     l3960:
  5414                           
  5415                           ;LCD4b.c: 63:         y = temp & 0x0F;
  5416  0DC1  086B               	movf	Lcd_Set_Cursor@temp^(0+128),w
  5417  0DC2  390F               	andlw	15
  5418  0DC3  00E6               	movwf	??_Lcd_Set_Cursor^(0+128)
  5419  0DC4  0866               	movf	??_Lcd_Set_Cursor^(0+128),w
  5420  0DC5  00EA               	movwf	Lcd_Set_Cursor@y^(0+128)
  5421  0DC6                     l3962:
  5422                           
  5423                           ;LCD4b.c: 64:         Lcd_Cmd(z);
  5424  0DC6  0869               	movf	Lcd_Set_Cursor@z^(0+128),w
  5425  0DC7  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5426  0DCC                     l3964:
  5427                           
  5428                           ;LCD4b.c: 65:         Lcd_Cmd(y);
  5429  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
  5430  0DCD  1303               	bcf	3,6	;RP1=0, select bank1
  5431  0DCE  086A               	movf	Lcd_Set_Cursor@y^(0+128),w
  5432  0DCF  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5433  0DD4                     l375:
  5434  0DD4  0008               	return
  5435  0DD5                     __end_of_Lcd_Set_Cursor:
  5436                           
  5437                           	psect	text18
  5438  0D27                     __ptext18:	
  5439 ;; *************** function _Lcd_Init *****************
  5440 ;; Defined at:
  5441 ;;		line 69 in file "LCD4b.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;		None
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;		None
  5446 ;; Return value:  Size  Location     Type
  5447 ;;                  1    wreg      void 
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0, pclath, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5455 ;;      Params:         0       0       0       0       0
  5456 ;;      Locals:         0       0       0       0       0
  5457 ;;      Temps:          0       0       2       0       0
  5458 ;;      Totals:         0       0       2       0       0
  5459 ;;Total ram usage:        2 bytes
  5460 ;; Hardware stack levels used: 1
  5461 ;; Hardware stack levels required when called: 6
  5462 ;; This function calls:
  5463 ;;		_Lcd_Cmd
  5464 ;;		_Lcd_Port
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470  0D27                     _Lcd_Init:	
  5471                           ;psect for function _Lcd_Init
  5472                           
  5473  0D27                     l3866:	
  5474                           ;incstack = 0
  5475                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  5476                           
  5477                           
  5478                           ;LCD4b.c: 70:     Lcd_Port(0x00);
  5479  0D27  3000               	movlw	0
  5480  0D28  120A  158A  22FE  120A  158A  	fcall	_Lcd_Port
  5481  0D2D                     l3868:
  5482                           
  5483                           ;LCD4b.c: 71:     _delay((unsigned long)((20)*(1000000/4000.0)));
  5484  0D2D  3007               	movlw	7
  5485  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
  5486  0D2F  1303               	bcf	3,6	;RP1=0, select bank1
  5487  0D30  00E6               	movwf	(??_Lcd_Init^(0+128)+1)
  5488  0D31  307C               	movlw	124
  5489  0D32  00E5               	movwf	??_Lcd_Init^(0+128)
  5490  0D33                     u3777:
  5491  0D33  0BE5               	decfsz	??_Lcd_Init^(0+128),f
  5492  0D34  2D33               	goto	u3777
  5493  0D35  0BE6               	decfsz	(??_Lcd_Init^(0+128)+1),f
  5494  0D36  2D33               	goto	u3777
  5495  0D37  0000               	nop
  5496  0D38                     l3870:
  5497                           
  5498                           ;LCD4b.c: 72:     Lcd_Cmd(0x03);
  5499  0D38  3003               	movlw	3
  5500  0D39  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5501                           
  5502                           ;LCD4b.c: 73:     _delay((unsigned long)((5)*(1000000/4000.0)));
  5503  0D3E  30F9               	movlw	249
  5504  0D3F  1683               	bsf	3,5	;RP0=1, select bank1
  5505  0D40  1303               	bcf	3,6	;RP1=0, select bank1
  5506  0D41  00E5               	movwf	??_Lcd_Init^(0+128)
  5507  0D42                     u3787:
  5508  0D42  2D43               	nop2
  5509  0D43  0BE5               	decfsz	??_Lcd_Init^(0+128),f
  5510  0D44  2D42               	goto	u3787
  5511  0D45  2D46               	nop2
  5512  0D46                     l3872:
  5513                           
  5514                           ;LCD4b.c: 74:     Lcd_Cmd(0x03);
  5515  0D46  3003               	movlw	3
  5516  0D47  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5517  0D4C                     l3874:
  5518                           
  5519                           ;LCD4b.c: 75:     _delay((unsigned long)((11)*(1000000/4000000.0)));
  5520  0D4C  2D4D               	nop2	;2 cycle nop
  5521  0D4D                     l3876:
  5522                           
  5523                           ;LCD4b.c: 76:     Lcd_Cmd(0x03);
  5524  0D4D  3003               	movlw	3
  5525  0D4E  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5526  0D53                     l3878:
  5527                           
  5528                           ;LCD4b.c: 78:     Lcd_Cmd(0x02);
  5529  0D53  3002               	movlw	2
  5530  0D54  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5531  0D59                     l3880:
  5532                           
  5533                           ;LCD4b.c: 79:     Lcd_Cmd(0x02);
  5534  0D59  3002               	movlw	2
  5535  0D5A  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5536  0D5F                     l3882:
  5537                           
  5538                           ;LCD4b.c: 80:     Lcd_Cmd(0x08);
  5539  0D5F  3008               	movlw	8
  5540  0D60  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5541  0D65                     l3884:
  5542                           
  5543                           ;LCD4b.c: 81:     Lcd_Cmd(0x00);
  5544  0D65  3000               	movlw	0
  5545  0D66  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5546  0D6B                     l3886:
  5547                           
  5548                           ;LCD4b.c: 82:     Lcd_Cmd(0x0C);
  5549  0D6B  300C               	movlw	12
  5550  0D6C  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5551  0D71                     l3888:
  5552                           
  5553                           ;LCD4b.c: 83:     Lcd_Cmd(0x00);
  5554  0D71  3000               	movlw	0
  5555  0D72  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5556  0D77                     l3890:
  5557                           
  5558                           ;LCD4b.c: 84:     Lcd_Cmd(0x06);
  5559  0D77  3006               	movlw	6
  5560  0D78  120A  158A  219F  120A  158A  	fcall	_Lcd_Cmd
  5561  0D7D                     l378:
  5562  0D7D  0008               	return
  5563  0D7E                     __end_of_Lcd_Init:
  5564                           
  5565                           	psect	text19
  5566  099F                     __ptext19:	
  5567 ;; *************** function _Lcd_Cmd *****************
  5568 ;; Defined at:
  5569 ;;		line 36 in file "LCD4b.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;  a               1    wreg     unsigned char 
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  a               1    2[BANK1 ] unsigned char 
  5574 ;; Return value:  Size  Location     Type
  5575 ;;                  1    wreg      void 
  5576 ;; Registers used:
  5577 ;;		wreg, status,2, status,0, pclath, cstack
  5578 ;; Tracked objects:
  5579 ;;		On entry : 0/0
  5580 ;;		On exit  : 0/0
  5581 ;;		Unchanged: 0/0
  5582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5583 ;;      Params:         0       0       0       0       0
  5584 ;;      Locals:         0       0       1       0       0
  5585 ;;      Temps:          0       0       1       0       0
  5586 ;;      Totals:         0       0       2       0       0
  5587 ;;Total ram usage:        2 bytes
  5588 ;; Hardware stack levels used: 1
  5589 ;; Hardware stack levels required when called: 5
  5590 ;; This function calls:
  5591 ;;		_Lcd_Port
  5592 ;; This function is called by:
  5593 ;;		_Lcd_Set_Cursor
  5594 ;;		_Lcd_Init
  5595 ;;		_Lcd_Shift_Right
  5596 ;;		_Lcd_Shift_Left
  5597 ;; This function uses a non-reentrant model
  5598 ;;
  5599                           
  5600  099F                     _Lcd_Cmd:	
  5601                           ;psect for function _Lcd_Cmd
  5602                           
  5603                           
  5604                           ;incstack = 0
  5605                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  5606                           ;Lcd_Cmd@a stored from wreg
  5607  099F  1683               	bsf	3,5	;RP0=1, select bank1
  5608  09A0  1303               	bcf	3,6	;RP1=0, select bank1
  5609  09A1  00E4               	movwf	Lcd_Cmd@a^(0+128)
  5610  09A2                     l3470:
  5611                           
  5612                           ;LCD4b.c: 36: void Lcd_Cmd(char a);LCD4b.c: 37: {;LCD4b.c: 38:     PORTBbits.RB2 = 0;
  5613  09A2  1283               	bcf	3,5	;RP0=0, select bank0
  5614  09A3  1303               	bcf	3,6	;RP1=0, select bank0
  5615  09A4  1106               	bcf	6,2	;volatile
  5616  09A5                     l3472:
  5617                           
  5618                           ;LCD4b.c: 39:     Lcd_Port(a);
  5619  09A5  1683               	bsf	3,5	;RP0=1, select bank1
  5620  09A6  1303               	bcf	3,6	;RP1=0, select bank1
  5621  09A7  0864               	movf	Lcd_Cmd@a^(0+128),w
  5622  09A8  120A  158A  22FE  120A  158A  	fcall	_Lcd_Port
  5623  09AD                     l3474:
  5624                           
  5625                           ;LCD4b.c: 40:     RB3 = 1;
  5626  09AD  1283               	bcf	3,5	;RP0=0, select bank0
  5627  09AE  1303               	bcf	3,6	;RP1=0, select bank0
  5628  09AF  1586               	bsf	6,3	;volatile
  5629  09B0                     l3476:
  5630                           
  5631                           ;LCD4b.c: 41:     _delay((unsigned long)((4)*(1000000/4000.0)));
  5632  09B0  30C7               	movlw	199
  5633  09B1  1683               	bsf	3,5	;RP0=1, select bank1
  5634  09B2  1303               	bcf	3,6	;RP1=0, select bank1
  5635  09B3  00E3               	movwf	??_Lcd_Cmd^(0+128)
  5636  09B4                     u3797:
  5637  09B4  29B5               	nop2
  5638  09B5  0BE3               	decfsz	??_Lcd_Cmd^(0+128),f
  5639  09B6  29B4               	goto	u3797
  5640  09B7  29B8               	nop2
  5641  09B8                     l3478:
  5642                           
  5643                           ;LCD4b.c: 42:     RB3 = 0;
  5644  09B8  1283               	bcf	3,5	;RP0=0, select bank0
  5645  09B9  1303               	bcf	3,6	;RP1=0, select bank0
  5646  09BA  1186               	bcf	6,3	;volatile
  5647  09BB                     l366:
  5648  09BB  0008               	return
  5649  09BC                     __end_of_Lcd_Cmd:
  5650                           
  5651                           	psect	text20
  5652  0AFE                     __ptext20:	
  5653 ;; *************** function _Lcd_Port *****************
  5654 ;; Defined at:
  5655 ;;		line 13 in file "LCD4b.c"
  5656 ;; Parameters:    Size  Location     Type
  5657 ;;  a               1    wreg     unsigned char 
  5658 ;; Auto vars:     Size  Location     Type
  5659 ;;  a               1    0[BANK1 ] unsigned char 
  5660 ;; Return value:  Size  Location     Type
  5661 ;;                  1    wreg      void 
  5662 ;; Registers used:
  5663 ;;		wreg
  5664 ;; Tracked objects:
  5665 ;;		On entry : 0/0
  5666 ;;		On exit  : 0/0
  5667 ;;		Unchanged: 0/0
  5668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5669 ;;      Params:         0       0       0       0       0
  5670 ;;      Locals:         0       0       1       0       0
  5671 ;;      Temps:          0       0       0       0       0
  5672 ;;      Totals:         0       0       1       0       0
  5673 ;;Total ram usage:        1 bytes
  5674 ;; Hardware stack levels used: 1
  5675 ;; Hardware stack levels required when called: 4
  5676 ;; This function calls:
  5677 ;;		Nothing
  5678 ;; This function is called by:
  5679 ;;		_Lcd_Cmd
  5680 ;;		_Lcd_Init
  5681 ;;		_Lcd_Write_Char
  5682 ;; This function uses a non-reentrant model
  5683 ;;
  5684                           
  5685  0AFE                     _Lcd_Port:	
  5686                           ;psect for function _Lcd_Port
  5687                           
  5688                           
  5689                           ;incstack = 0
  5690                           ; Regs used in _Lcd_Port: [wreg]
  5691                           ;Lcd_Port@a stored from wreg
  5692  0AFE  1683               	bsf	3,5	;RP0=1, select bank1
  5693  0AFF  1303               	bcf	3,6	;RP1=0, select bank1
  5694  0B00  00E2               	movwf	Lcd_Port@a^(0+128)
  5695  0B01                     l3460:
  5696                           
  5697                           ;LCD4b.c: 13: void Lcd_Port(char a);LCD4b.c: 14: {;LCD4b.c: 15:     if (a & 1)
  5698  0B01  1C62               	btfss	Lcd_Port@a^(0+128),0
  5699  0B02  2B04               	goto	u2891
  5700  0B03  2B05               	goto	u2890
  5701  0B04                     u2891:
  5702  0B04  2B09               	goto	l355
  5703  0B05                     u2890:
  5704  0B05                     l3462:
  5705                           
  5706                           ;LCD4b.c: 16:         RB4 = 1;
  5707  0B05  1283               	bcf	3,5	;RP0=0, select bank0
  5708  0B06  1303               	bcf	3,6	;RP1=0, select bank0
  5709  0B07  1606               	bsf	6,4	;volatile
  5710  0B08  2B0C               	goto	l356
  5711  0B09                     l355:	
  5712                           ;LCD4b.c: 17:     else
  5713                           
  5714                           
  5715                           ;LCD4b.c: 18:         RB4 = 0;
  5716  0B09  1283               	bcf	3,5	;RP0=0, select bank0
  5717  0B0A  1303               	bcf	3,6	;RP1=0, select bank0
  5718  0B0B  1206               	bcf	6,4	;volatile
  5719  0B0C                     l356:
  5720                           
  5721                           ;LCD4b.c: 20:     if (a & 2)
  5722  0B0C  1683               	bsf	3,5	;RP0=1, select bank1
  5723  0B0D  1303               	bcf	3,6	;RP1=0, select bank1
  5724  0B0E  1CE2               	btfss	Lcd_Port@a^(0+128),1
  5725  0B0F  2B11               	goto	u2901
  5726  0B10  2B12               	goto	u2900
  5727  0B11                     u2901:
  5728  0B11  2B16               	goto	l357
  5729  0B12                     u2900:
  5730  0B12                     l3464:
  5731                           
  5732                           ;LCD4b.c: 21:         RB5 = 1;
  5733  0B12  1283               	bcf	3,5	;RP0=0, select bank0
  5734  0B13  1303               	bcf	3,6	;RP1=0, select bank0
  5735  0B14  1686               	bsf	6,5	;volatile
  5736  0B15  2B19               	goto	l358
  5737  0B16                     l357:	
  5738                           ;LCD4b.c: 22:     else
  5739                           
  5740                           
  5741                           ;LCD4b.c: 23:         RB5 = 0;
  5742  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  5743  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  5744  0B18  1286               	bcf	6,5	;volatile
  5745  0B19                     l358:
  5746                           
  5747                           ;LCD4b.c: 25:     if (a & 4)
  5748  0B19  1683               	bsf	3,5	;RP0=1, select bank1
  5749  0B1A  1303               	bcf	3,6	;RP1=0, select bank1
  5750  0B1B  1D62               	btfss	Lcd_Port@a^(0+128),2
  5751  0B1C  2B1E               	goto	u2911
  5752  0B1D  2B1F               	goto	u2910
  5753  0B1E                     u2911:
  5754  0B1E  2B23               	goto	l359
  5755  0B1F                     u2910:
  5756  0B1F                     l3466:
  5757                           
  5758                           ;LCD4b.c: 26:         RB6 = 1;
  5759  0B1F  1283               	bcf	3,5	;RP0=0, select bank0
  5760  0B20  1303               	bcf	3,6	;RP1=0, select bank0
  5761  0B21  1706               	bsf	6,6	;volatile
  5762  0B22  2B26               	goto	l360
  5763  0B23                     l359:	
  5764                           ;LCD4b.c: 27:     else
  5765                           
  5766                           
  5767                           ;LCD4b.c: 28:         RB6 = 0;
  5768  0B23  1283               	bcf	3,5	;RP0=0, select bank0
  5769  0B24  1303               	bcf	3,6	;RP1=0, select bank0
  5770  0B25  1306               	bcf	6,6	;volatile
  5771  0B26                     l360:
  5772                           
  5773                           ;LCD4b.c: 30:     if (a & 8)
  5774  0B26  1683               	bsf	3,5	;RP0=1, select bank1
  5775  0B27  1303               	bcf	3,6	;RP1=0, select bank1
  5776  0B28  1DE2               	btfss	Lcd_Port@a^(0+128),3
  5777  0B29  2B2B               	goto	u2921
  5778  0B2A  2B2C               	goto	u2920
  5779  0B2B                     u2921:
  5780  0B2B  2B30               	goto	l361
  5781  0B2C                     u2920:
  5782  0B2C                     l3468:
  5783                           
  5784                           ;LCD4b.c: 31:         RB7 = 1;
  5785  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
  5786  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
  5787  0B2E  1786               	bsf	6,7	;volatile
  5788  0B2F  2B33               	goto	l363
  5789  0B30                     l361:	
  5790                           ;LCD4b.c: 32:     else
  5791                           
  5792                           
  5793                           ;LCD4b.c: 33:         RB7 = 0;
  5794  0B30  1283               	bcf	3,5	;RP0=0, select bank0
  5795  0B31  1303               	bcf	3,6	;RP1=0, select bank0
  5796  0B32  1386               	bcf	6,7	;volatile
  5797  0B33                     l363:
  5798  0B33  0008               	return
  5799  0B34                     __end_of_Lcd_Port:
  5800                           
  5801                           	psect	text21
  5802  08C8                     __ptext21:	
  5803 ;; *************** function _I2C_Master_Write *****************
  5804 ;; Defined at:
  5805 ;;		line 47 in file "I2C.c"
  5806 ;; Parameters:    Size  Location     Type
  5807 ;;  d               2    0[BANK1 ] unsigned int 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0, pclath, cstack
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5819 ;;      Params:         0       0       2       0       0
  5820 ;;      Locals:         0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0
  5822 ;;      Totals:         0       0       2       0       0
  5823 ;;Total ram usage:        2 bytes
  5824 ;; Hardware stack levels used: 1
  5825 ;; Hardware stack levels required when called: 5
  5826 ;; This function calls:
  5827 ;;		_I2C_Master_Wait
  5828 ;; This function is called by:
  5829 ;;		_main
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833  08C8                     _I2C_Master_Write:	
  5834                           ;psect for function _I2C_Master_Write
  5835                           
  5836  08C8                     l3914:	
  5837                           ;incstack = 0
  5838                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5839                           
  5840                           
  5841                           ;I2C.c: 47: void I2C_Master_Write(unsigned d);I2C.c: 48: {;I2C.c: 49:     I2C_Master_Wai
      +                          t();
  5842  08C8  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  5843  08CD                     l3916:
  5844                           
  5845                           ;I2C.c: 50:     SSPBUF = d;
  5846  08CD  1683               	bsf	3,5	;RP0=1, select bank1
  5847  08CE  1303               	bcf	3,6	;RP1=0, select bank1
  5848  08CF  0862               	movf	I2C_Master_Write@d^(0+128),w
  5849  08D0  1283               	bcf	3,5	;RP0=0, select bank0
  5850  08D1  1303               	bcf	3,6	;RP1=0, select bank0
  5851  08D2  0093               	movwf	19	;volatile
  5852  08D3                     l440:
  5853  08D3  0008               	return
  5854  08D4                     __end_of_I2C_Master_Write:
  5855                           
  5856                           	psect	text22
  5857  08BF                     __ptext22:	
  5858 ;; *************** function _I2C_Master_Stop *****************
  5859 ;; Defined at:
  5860 ;;		line 41 in file "I2C.c"
  5861 ;; Parameters:    Size  Location     Type
  5862 ;;		None
  5863 ;; Auto vars:     Size  Location     Type
  5864 ;;		None
  5865 ;; Return value:  Size  Location     Type
  5866 ;;                  1    wreg      void 
  5867 ;; Registers used:
  5868 ;;		wreg, status,2, status,0, pclath, cstack
  5869 ;; Tracked objects:
  5870 ;;		On entry : 0/0
  5871 ;;		On exit  : 0/0
  5872 ;;		Unchanged: 0/0
  5873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5874 ;;      Params:         0       0       0       0       0
  5875 ;;      Locals:         0       0       0       0       0
  5876 ;;      Temps:          0       0       0       0       0
  5877 ;;      Totals:         0       0       0       0       0
  5878 ;;Total ram usage:        0 bytes
  5879 ;; Hardware stack levels used: 1
  5880 ;; Hardware stack levels required when called: 5
  5881 ;; This function calls:
  5882 ;;		_I2C_Master_Wait
  5883 ;; This function is called by:
  5884 ;;		_main
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888  08BF                     _I2C_Master_Stop:	
  5889                           ;psect for function _I2C_Master_Stop
  5890                           
  5891  08BF                     l3938:	
  5892                           ;incstack = 0
  5893                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+pclath+cstack]
  5894                           
  5895                           
  5896                           ;I2C.c: 43:     I2C_Master_Wait();
  5897  08BF  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  5898  08C4                     l3940:
  5899                           
  5900                           ;I2C.c: 44:     SSPCON2bits.PEN = 1;
  5901  08C4  1683               	bsf	3,5	;RP0=1, select bank1
  5902  08C5  1303               	bcf	3,6	;RP1=0, select bank1
  5903  08C6  1511               	bsf	17,2	;volatile
  5904  08C7                     l437:
  5905  08C7  0008               	return
  5906  08C8                     __end_of_I2C_Master_Stop:
  5907                           
  5908                           	psect	text23
  5909  08B6                     __ptext23:	
  5910 ;; *************** function _I2C_Master_Start *****************
  5911 ;; Defined at:
  5912 ;;		line 29 in file "I2C.c"
  5913 ;; Parameters:    Size  Location     Type
  5914 ;;		None
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;		None
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      void 
  5919 ;; Registers used:
  5920 ;;		wreg, status,2, status,0, pclath, cstack
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/0
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5926 ;;      Params:         0       0       0       0       0
  5927 ;;      Locals:         0       0       0       0       0
  5928 ;;      Temps:          0       0       0       0       0
  5929 ;;      Totals:         0       0       0       0       0
  5930 ;;Total ram usage:        0 bytes
  5931 ;; Hardware stack levels used: 1
  5932 ;; Hardware stack levels required when called: 5
  5933 ;; This function calls:
  5934 ;;		_I2C_Master_Wait
  5935 ;; This function is called by:
  5936 ;;		_main
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940  08B6                     _I2C_Master_Start:	
  5941                           ;psect for function _I2C_Master_Start
  5942                           
  5943  08B6                     l3910:	
  5944                           ;incstack = 0
  5945                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+pclath+cstack]
  5946                           
  5947                           
  5948                           ;I2C.c: 31:     I2C_Master_Wait();
  5949  08B6  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  5950  08BB                     l3912:
  5951                           
  5952                           ;I2C.c: 32:     SSPCON2bits.SEN = 1;
  5953  08BB  1683               	bsf	3,5	;RP0=1, select bank1
  5954  08BC  1303               	bcf	3,6	;RP1=0, select bank1
  5955  08BD  1411               	bsf	17,0	;volatile
  5956  08BE                     l431:
  5957  08BE  0008               	return
  5958  08BF                     __end_of_I2C_Master_Start:
  5959                           
  5960                           	psect	text24
  5961  08AD                     __ptext24:	
  5962 ;; *************** function _I2C_Master_RepeatedStart *****************
  5963 ;; Defined at:
  5964 ;;		line 35 in file "I2C.c"
  5965 ;; Parameters:    Size  Location     Type
  5966 ;;		None
  5967 ;; Auto vars:     Size  Location     Type
  5968 ;;		None
  5969 ;; Return value:  Size  Location     Type
  5970 ;;                  1    wreg      void 
  5971 ;; Registers used:
  5972 ;;		wreg, status,2, status,0, pclath, cstack
  5973 ;; Tracked objects:
  5974 ;;		On entry : 0/0
  5975 ;;		On exit  : 0/0
  5976 ;;		Unchanged: 0/0
  5977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5978 ;;      Params:         0       0       0       0       0
  5979 ;;      Locals:         0       0       0       0       0
  5980 ;;      Temps:          0       0       0       0       0
  5981 ;;      Totals:         0       0       0       0       0
  5982 ;;Total ram usage:        0 bytes
  5983 ;; Hardware stack levels used: 1
  5984 ;; Hardware stack levels required when called: 5
  5985 ;; This function calls:
  5986 ;;		_I2C_Master_Wait
  5987 ;; This function is called by:
  5988 ;;		_main
  5989 ;; This function uses a non-reentrant model
  5990 ;;
  5991                           
  5992  08AD                     _I2C_Master_RepeatedStart:	
  5993                           ;psect for function _I2C_Master_RepeatedStart
  5994                           
  5995  08AD                     l3918:	
  5996                           ;incstack = 0
  5997                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+pclath+cstack]
  5998                           
  5999                           
  6000                           ;I2C.c: 37:     I2C_Master_Wait();
  6001  08AD  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  6002  08B2                     l3920:
  6003                           
  6004                           ;I2C.c: 38:     SSPCON2bits.RSEN = 1;
  6005  08B2  1683               	bsf	3,5	;RP0=1, select bank1
  6006  08B3  1303               	bcf	3,6	;RP1=0, select bank1
  6007  08B4  1491               	bsf	17,1	;volatile
  6008  08B5                     l434:
  6009  08B5  0008               	return
  6010  08B6                     __end_of_I2C_Master_RepeatedStart:
  6011                           
  6012                           	psect	text25
  6013  0A9D                     __ptext25:	
  6014 ;; *************** function _I2C_Master_Read *****************
  6015 ;; Defined at:
  6016 ;;		line 53 in file "I2C.c"
  6017 ;; Parameters:    Size  Location     Type
  6018 ;;  a               2    0[BANK1 ] unsigned short 
  6019 ;; Auto vars:     Size  Location     Type
  6020 ;;  temp            2    4[BANK1 ] unsigned short 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  2    0[BANK1 ] unsigned short 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0, pclath, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6030 ;;      Params:         0       0       2       0       0
  6031 ;;      Locals:         0       0       2       0       0
  6032 ;;      Temps:          0       0       2       0       0
  6033 ;;      Totals:         0       0       6       0       0
  6034 ;;Total ram usage:        6 bytes
  6035 ;; Hardware stack levels used: 1
  6036 ;; Hardware stack levels required when called: 5
  6037 ;; This function calls:
  6038 ;;		_I2C_Master_Wait
  6039 ;; This function is called by:
  6040 ;;		_main
  6041 ;; This function uses a non-reentrant model
  6042 ;;
  6043                           
  6044  0A9D                     _I2C_Master_Read:	
  6045                           ;psect for function _I2C_Master_Read
  6046                           
  6047  0A9D                     l3922:	
  6048                           ;incstack = 0
  6049                           ; Regs used in _I2C_Master_Read: [wreg+status,2+status,0+pclath+cstack]
  6050                           
  6051                           
  6052                           ;I2C.c: 53: unsigned short I2C_Master_Read(unsigned short a);I2C.c: 54: {;I2C.c: 55:    
      +                           unsigned short temp;;I2C.c: 56:     I2C_Master_Wait();
  6053  0A9D  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  6054  0AA2                     l3924:
  6055                           
  6056                           ;I2C.c: 57:     SSPCON2bits.RCEN = 1;
  6057  0AA2  1683               	bsf	3,5	;RP0=1, select bank1
  6058  0AA3  1303               	bcf	3,6	;RP1=0, select bank1
  6059  0AA4  1591               	bsf	17,3	;volatile
  6060                           
  6061                           ;I2C.c: 58:     I2C_Master_Wait();
  6062  0AA5  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  6063  0AAA                     l3926:
  6064                           
  6065                           ;I2C.c: 59:     temp = SSPBUF;
  6066  0AAA  1283               	bcf	3,5	;RP0=0, select bank0
  6067  0AAB  1303               	bcf	3,6	;RP1=0, select bank0
  6068  0AAC  0813               	movf	19,w	;volatile
  6069  0AAD  1683               	bsf	3,5	;RP0=1, select bank1
  6070  0AAE  1303               	bcf	3,6	;RP1=0, select bank1
  6071  0AAF  00E4               	movwf	??_I2C_Master_Read^(0+128)
  6072  0AB0  01E5               	clrf	(??_I2C_Master_Read^(0+128)+1)
  6073  0AB1  0864               	movf	??_I2C_Master_Read^(0+128),w
  6074  0AB2  00E6               	movwf	I2C_Master_Read@temp^(0+128)
  6075  0AB3  0865               	movf	(??_I2C_Master_Read+1)^(0+128),w
  6076  0AB4  00E7               	movwf	(I2C_Master_Read@temp+1)^(0+128)
  6077  0AB5                     l3928:
  6078                           
  6079                           ;I2C.c: 60:     I2C_Master_Wait();
  6080  0AB5  120A  158A  20EE  120A  158A  	fcall	_I2C_Master_Wait
  6081  0ABA                     l3930:
  6082                           
  6083                           ;I2C.c: 61:     if(a == 1){
  6084  0ABA  1683               	bsf	3,5	;RP0=1, select bank1
  6085  0ABB  1303               	bcf	3,6	;RP1=0, select bank1
  6086  0ABC  0362               	decf	I2C_Master_Read@a^(0+128),w
  6087  0ABD  0463               	iorwf	(I2C_Master_Read@a+1)^(0+128),w
  6088  0ABE  1D03               	btfss	3,2
  6089  0ABF  2AC1               	goto	u3441
  6090  0AC0  2AC2               	goto	u3440
  6091  0AC1                     u3441:
  6092  0AC1  2AC4               	goto	l443
  6093  0AC2                     u3440:
  6094  0AC2                     l3932:
  6095                           
  6096                           ;I2C.c: 62:         SSPCON2bits.ACKDT = 0;
  6097  0AC2  1291               	bcf	17,5	;volatile
  6098                           
  6099                           ;I2C.c: 63:     }else{
  6100  0AC3  2AC5               	goto	l444
  6101  0AC4                     l443:
  6102                           
  6103                           ;I2C.c: 64:         SSPCON2bits.ACKDT = 1;
  6104  0AC4  1691               	bsf	17,5	;volatile
  6105  0AC5                     l444:	
  6106                           ;I2C.c: 65:     }
  6107                           
  6108                           
  6109                           ;I2C.c: 66:     SSPCON2bits.ACKEN = 1;
  6110  0AC5  1611               	bsf	17,4	;volatile
  6111  0AC6                     l3934:
  6112                           
  6113                           ;I2C.c: 67:     return temp;
  6114  0AC6  0867               	movf	(I2C_Master_Read@temp+1)^(0+128),w
  6115  0AC7  00E3               	movwf	(?_I2C_Master_Read+1)^(0+128)
  6116  0AC8  0866               	movf	I2C_Master_Read@temp^(0+128),w
  6117  0AC9  00E2               	movwf	?_I2C_Master_Read^(0+128)
  6118  0ACA                     l445:
  6119  0ACA  0008               	return
  6120  0ACB                     __end_of_I2C_Master_Read:
  6121                           
  6122                           	psect	text26
  6123  08EE                     __ptext26:	
  6124 ;; *************** function _I2C_Master_Wait *****************
  6125 ;; Defined at:
  6126 ;;		line 24 in file "I2C.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6140 ;;      Params:         0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0
  6143 ;;      Totals:         0       0       0       0       0
  6144 ;;Total ram usage:        0 bytes
  6145 ;; Hardware stack levels used: 1
  6146 ;; Hardware stack levels required when called: 4
  6147 ;; This function calls:
  6148 ;;		Nothing
  6149 ;; This function is called by:
  6150 ;;		_I2C_Master_Start
  6151 ;;		_I2C_Master_RepeatedStart
  6152 ;;		_I2C_Master_Stop
  6153 ;;		_I2C_Master_Write
  6154 ;;		_I2C_Master_Read
  6155 ;; This function uses a non-reentrant model
  6156 ;;
  6157                           
  6158  08EE                     _I2C_Master_Wait:	
  6159                           ;psect for function _I2C_Master_Wait
  6160                           
  6161  08EE                     l3500:	
  6162                           ;incstack = 0
  6163                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6164                           
  6165  08EE                     l425:	
  6166                           ;I2C.c: 26:     while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6167                           
  6168  08EE  1683               	bsf	3,5	;RP0=1, select bank1
  6169  08EF  1303               	bcf	3,6	;RP1=0, select bank1
  6170  08F0  1914               	btfsc	20,2	;volatile
  6171  08F1  28F3               	goto	u2941
  6172  08F2  28F4               	goto	u2940
  6173  08F3                     u2941:
  6174  08F3  28EE               	goto	l425
  6175  08F4                     u2940:
  6176  08F4                     l3502:
  6177  08F4  0811               	movf	17,w	;volatile
  6178  08F5  391F               	andlw	31
  6179  08F6  1D03               	btfss	3,2
  6180  08F7  28F9               	goto	u2951
  6181  08F8  28FA               	goto	u2950
  6182  08F9                     u2951:
  6183  08F9  28EE               	goto	l425
  6184  08FA                     u2950:
  6185  08FA                     l428:
  6186  08FA  0008               	return
  6187  08FB                     __end_of_I2C_Master_Wait:
  6188                           
  6189                           	psect	text27
  6190  0BF7                     __ptext27:	
  6191 ;; *************** function _I2C_Master_Init *****************
  6192 ;; Defined at:
  6193 ;;		line 14 in file "I2C.c"
  6194 ;; Parameters:    Size  Location     Type
  6195 ;;  c               4    0[BANK3 ] const unsigned long 
  6196 ;; Auto vars:     Size  Location     Type
  6197 ;;		None
  6198 ;; Return value:  Size  Location     Type
  6199 ;;                  1    wreg      void 
  6200 ;; Registers used:
  6201 ;;		wreg, status,2, status,0, pclath, cstack
  6202 ;; Tracked objects:
  6203 ;;		On entry : 0/0
  6204 ;;		On exit  : 0/0
  6205 ;;		Unchanged: 0/0
  6206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6207 ;;      Params:         0       0       0       4       0
  6208 ;;      Locals:         0       0       0       0       0
  6209 ;;      Temps:          0       0       0       4       0
  6210 ;;      Totals:         0       0       0       8       0
  6211 ;;Total ram usage:        8 bytes
  6212 ;; Hardware stack levels used: 1
  6213 ;; Hardware stack levels required when called: 5
  6214 ;; This function calls:
  6215 ;;		___lldiv
  6216 ;; This function is called by:
  6217 ;;		_main
  6218 ;; This function uses a non-reentrant model
  6219 ;;
  6220                           
  6221  0BF7                     _I2C_Master_Init:	
  6222                           ;psect for function _I2C_Master_Init
  6223                           
  6224  0BF7                     l3892:	
  6225                           ;incstack = 0
  6226                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+pclath+cstack]
  6227                           
  6228                           
  6229                           ;I2C.c: 14: void I2C_Master_Init(const unsigned long c);I2C.c: 15: {;I2C.c: 16:     SSPC
      +                          ON = 0b00101000;
  6230  0BF7  3028               	movlw	40
  6231  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  6232  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  6233  0BFA  0094               	movwf	20	;volatile
  6234  0BFB                     l3894:
  6235                           
  6236                           ;I2C.c: 17:     SSPCON2 = 0;
  6237  0BFB  1683               	bsf	3,5	;RP0=1, select bank1
  6238  0BFC  1303               	bcf	3,6	;RP1=0, select bank1
  6239  0BFD  0191               	clrf	17	;volatile
  6240  0BFE                     l3896:
  6241                           
  6242                           ;I2C.c: 18:     SSPADD = (8000000/(4*c))-1;
  6243  0BFE  1683               	bsf	3,5	;RP0=1, select bank3
  6244  0BFF  1703               	bsf	3,6	;RP1=1, select bank3
  6245  0C00  0810               	movf	I2C_Master_Init@c^(0+384),w
  6246  0C01  0094               	movwf	??_I2C_Master_Init^(0+384)
  6247  0C02  0811               	movf	(I2C_Master_Init@c+1)^(0+384),w
  6248  0C03  0095               	movwf	(??_I2C_Master_Init^(0+384)+1)
  6249  0C04  0812               	movf	(I2C_Master_Init@c+2)^(0+384),w
  6250  0C05  0096               	movwf	(??_I2C_Master_Init^(0+384)+2)
  6251  0C06  0813               	movf	(I2C_Master_Init@c+3)^(0+384),w
  6252  0C07  0097               	movwf	(??_I2C_Master_Init^(0+384)+3)
  6253  0C08  3002               	movlw	2
  6254  0C09                     u3425:
  6255  0C09  1003               	clrc
  6256  0C0A  0D94               	rlf	??_I2C_Master_Init^(0+384),f
  6257  0C0B  0D95               	rlf	(??_I2C_Master_Init^(0+384)+1),f
  6258  0C0C  0D96               	rlf	(??_I2C_Master_Init^(0+384)+2),f
  6259  0C0D  0D97               	rlf	(??_I2C_Master_Init^(0+384)+3),f
  6260  0C0E                     u3420:
  6261  0C0E  3EFF               	addlw	-1
  6262  0C0F  1D03               	skipz
  6263  0C10  2C09               	goto	u3425
  6264  0C11  0817               	movf	(??_I2C_Master_Init+3)^(0+384),w
  6265  0C12  1683               	bsf	3,5	;RP0=1, select bank1
  6266  0C13  1303               	bcf	3,6	;RP1=0, select bank1
  6267  0C14  00E5               	movwf	(___lldiv@divisor+3)^(0+128)
  6268  0C15  1683               	bsf	3,5	;RP0=1, select bank3
  6269  0C16  1703               	bsf	3,6	;RP1=1, select bank3
  6270  0C17  0816               	movf	(??_I2C_Master_Init+2)^(0+384),w
  6271  0C18  1683               	bsf	3,5	;RP0=1, select bank1
  6272  0C19  1303               	bcf	3,6	;RP1=0, select bank1
  6273  0C1A  00E4               	movwf	(___lldiv@divisor+2)^(0+128)
  6274  0C1B  1683               	bsf	3,5	;RP0=1, select bank3
  6275  0C1C  1703               	bsf	3,6	;RP1=1, select bank3
  6276  0C1D  0815               	movf	(??_I2C_Master_Init+1)^(0+384),w
  6277  0C1E  1683               	bsf	3,5	;RP0=1, select bank1
  6278  0C1F  1303               	bcf	3,6	;RP1=0, select bank1
  6279  0C20  00E3               	movwf	(___lldiv@divisor+1)^(0+128)
  6280  0C21  1683               	bsf	3,5	;RP0=1, select bank3
  6281  0C22  1703               	bsf	3,6	;RP1=1, select bank3
  6282  0C23  0814               	movf	??_I2C_Master_Init^(0+384),w
  6283  0C24  1683               	bsf	3,5	;RP0=1, select bank1
  6284  0C25  1303               	bcf	3,6	;RP1=0, select bank1
  6285  0C26  00E2               	movwf	___lldiv@divisor^(0+128)
  6286  0C27  3000               	movlw	0
  6287  0C28  00E9               	movwf	(___lldiv@dividend+3)^(0+128)
  6288  0C29  307A               	movlw	122
  6289  0C2A  00E8               	movwf	(___lldiv@dividend+2)^(0+128)
  6290  0C2B  3012               	movlw	18
  6291  0C2C  00E7               	movwf	(___lldiv@dividend+1)^(0+128)
  6292  0C2D  3000               	movlw	0
  6293  0C2E  00E6               	movwf	___lldiv@dividend^(0+128)
  6294  0C2F  120A  118A  2758  120A  158A  	fcall	___lldiv
  6295  0C34  1683               	bsf	3,5	;RP0=1, select bank1
  6296  0C35  1303               	bcf	3,6	;RP1=0, select bank1
  6297  0C36  0862               	movf	?___lldiv^(0+128),w
  6298  0C37  3EFF               	addlw	255
  6299  0C38  0093               	movwf	19	;volatile
  6300  0C39                     l3898:
  6301                           
  6302                           ;I2C.c: 19:     SSPSTAT = 0;
  6303  0C39  0194               	clrf	20	;volatile
  6304  0C3A                     l3900:
  6305                           
  6306                           ;I2C.c: 20:     TRISCbits.TRISC3 = 1;
  6307  0C3A  1587               	bsf	7,3	;volatile
  6308  0C3B                     l3902:
  6309                           
  6310                           ;I2C.c: 21:     TRISCbits.TRISC4 = 1;
  6311  0C3B  1607               	bsf	7,4	;volatile
  6312  0C3C                     l422:
  6313  0C3C  0008               	return
  6314  0C3D                     __end_of_I2C_Master_Init:
  6315                           
  6316                           	psect	text28
  6317  0758                     __ptext28:	
  6318 ;; *************** function ___lldiv *****************
  6319 ;; Defined at:
  6320 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\__lldiv.c"
  6321 ;; Parameters:    Size  Location     Type
  6322 ;;  divisor         4    0[BANK1 ] unsigned long 
  6323 ;;  dividend        4    4[BANK1 ] unsigned long 
  6324 ;; Auto vars:     Size  Location     Type
  6325 ;;  quotient        4    9[BANK1 ] unsigned long 
  6326 ;;  counter         1   13[BANK1 ] unsigned char 
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  4    0[BANK1 ] unsigned long 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6336 ;;      Params:         0       0       8       0       0
  6337 ;;      Locals:         0       0       5       0       0
  6338 ;;      Temps:          0       0       1       0       0
  6339 ;;      Totals:         0       0      14       0       0
  6340 ;;Total ram usage:       14 bytes
  6341 ;; Hardware stack levels used: 1
  6342 ;; Hardware stack levels required when called: 4
  6343 ;; This function calls:
  6344 ;;		Nothing
  6345 ;; This function is called by:
  6346 ;;		_I2C_Master_Init
  6347 ;; This function uses a non-reentrant model
  6348 ;;
  6349                           
  6350  0758                     ___lldiv:	
  6351                           ;psect for function ___lldiv
  6352                           
  6353  0758                     l3544:	
  6354                           ;incstack = 0
  6355                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6356                           
  6357  0758  3000               	movlw	0
  6358  0759  1683               	bsf	3,5	;RP0=1, select bank1
  6359  075A  1303               	bcf	3,6	;RP1=0, select bank1
  6360  075B  00EE               	movwf	(___lldiv@quotient+3)^(0+128)
  6361  075C  3000               	movlw	0
  6362  075D  00ED               	movwf	(___lldiv@quotient+2)^(0+128)
  6363  075E  3000               	movlw	0
  6364  075F  00EC               	movwf	(___lldiv@quotient+1)^(0+128)
  6365  0760  3000               	movlw	0
  6366  0761  00EB               	movwf	___lldiv@quotient^(0+128)
  6367  0762  0865               	movf	(___lldiv@divisor+3)^(0+128),w
  6368  0763  0464               	iorwf	(___lldiv@divisor+2)^(0+128),w
  6369  0764  0463               	iorwf	(___lldiv@divisor+1)^(0+128),w
  6370  0765  0462               	iorwf	___lldiv@divisor^(0+128),w
  6371  0766  1903               	skipnz
  6372  0767  2F69               	goto	u3041
  6373  0768  2F6A               	goto	u3040
  6374  0769                     u3041:
  6375  0769  2FB7               	goto	l3564
  6376  076A                     u3040:
  6377  076A                     l3546:
  6378  076A  01EF               	clrf	___lldiv@counter^(0+128)
  6379  076B  0AEF               	incf	___lldiv@counter^(0+128),f
  6380  076C  2F7A               	goto	l3550
  6381  076D                     l3548:
  6382  076D  3001               	movlw	1
  6383  076E  00EA               	movwf	??___lldiv^(0+128)
  6384  076F                     u3055:
  6385  076F  1003               	clrc
  6386  0770  0DE2               	rlf	___lldiv@divisor^(0+128),f
  6387  0771  0DE3               	rlf	(___lldiv@divisor+1)^(0+128),f
  6388  0772  0DE4               	rlf	(___lldiv@divisor+2)^(0+128),f
  6389  0773  0DE5               	rlf	(___lldiv@divisor+3)^(0+128),f
  6390  0774  0BEA               	decfsz	??___lldiv^(0+128),f
  6391  0775  2F6F               	goto	u3055
  6392  0776  3001               	movlw	1
  6393  0777  00EA               	movwf	??___lldiv^(0+128)
  6394  0778  086A               	movf	??___lldiv^(0+128),w
  6395  0779  07EF               	addwf	___lldiv@counter^(0+128),f
  6396  077A                     l3550:
  6397  077A  1FE5               	btfss	(___lldiv@divisor+3)^(0+128),7
  6398  077B  2F7D               	goto	u3061
  6399  077C  2F7E               	goto	u3060
  6400  077D                     u3061:
  6401  077D  2F6D               	goto	l3548
  6402  077E                     u3060:
  6403  077E                     l3552:
  6404  077E  3001               	movlw	1
  6405  077F  00EA               	movwf	??___lldiv^(0+128)
  6406  0780                     u3075:
  6407  0780  1003               	clrc
  6408  0781  0DEB               	rlf	___lldiv@quotient^(0+128),f
  6409  0782  0DEC               	rlf	(___lldiv@quotient+1)^(0+128),f
  6410  0783  0DED               	rlf	(___lldiv@quotient+2)^(0+128),f
  6411  0784  0DEE               	rlf	(___lldiv@quotient+3)^(0+128),f
  6412  0785  0BEA               	decfsz	??___lldiv^(0+128),f
  6413  0786  2F80               	goto	u3075
  6414  0787                     l3554:
  6415  0787  0865               	movf	(___lldiv@divisor+3)^(0+128),w
  6416  0788  0269               	subwf	(___lldiv@dividend+3)^(0+128),w
  6417  0789  1D03               	skipz
  6418  078A  2F95               	goto	u3085
  6419  078B  0864               	movf	(___lldiv@divisor+2)^(0+128),w
  6420  078C  0268               	subwf	(___lldiv@dividend+2)^(0+128),w
  6421  078D  1D03               	skipz
  6422  078E  2F95               	goto	u3085
  6423  078F  0863               	movf	(___lldiv@divisor+1)^(0+128),w
  6424  0790  0267               	subwf	(___lldiv@dividend+1)^(0+128),w
  6425  0791  1D03               	skipz
  6426  0792  2F95               	goto	u3085
  6427  0793  0862               	movf	___lldiv@divisor^(0+128),w
  6428  0794  0266               	subwf	___lldiv@dividend^(0+128),w
  6429  0795                     u3085:
  6430  0795  1C03               	skipc
  6431  0796  2F98               	goto	u3081
  6432  0797  2F99               	goto	u3080
  6433  0798                     u3081:
  6434  0798  2FA8               	goto	l3560
  6435  0799                     u3080:
  6436  0799                     l3556:
  6437  0799  0862               	movf	___lldiv@divisor^(0+128),w
  6438  079A  02E6               	subwf	___lldiv@dividend^(0+128),f
  6439  079B  0863               	movf	(___lldiv@divisor+1)^(0+128),w
  6440  079C  1C03               	skipc
  6441  079D  0F63               	incfsz	(___lldiv@divisor+1)^(0+128),w
  6442  079E  02E7               	subwf	(___lldiv@dividend+1)^(0+128),f
  6443  079F  0864               	movf	(___lldiv@divisor+2)^(0+128),w
  6444  07A0  1C03               	skipc
  6445  07A1  0F64               	incfsz	(___lldiv@divisor+2)^(0+128),w
  6446  07A2  02E8               	subwf	(___lldiv@dividend+2)^(0+128),f
  6447  07A3  0865               	movf	(___lldiv@divisor+3)^(0+128),w
  6448  07A4  1C03               	skipc
  6449  07A5  0F65               	incfsz	(___lldiv@divisor+3)^(0+128),w
  6450  07A6  02E9               	subwf	(___lldiv@dividend+3)^(0+128),f
  6451  07A7                     l3558:
  6452  07A7  146B               	bsf	___lldiv@quotient^(0+128),0
  6453  07A8                     l3560:
  6454  07A8  3001               	movlw	1
  6455  07A9                     u3095:
  6456  07A9  1003               	clrc
  6457  07AA  0CE5               	rrf	(___lldiv@divisor+3)^(0+128),f
  6458  07AB  0CE4               	rrf	(___lldiv@divisor+2)^(0+128),f
  6459  07AC  0CE3               	rrf	(___lldiv@divisor+1)^(0+128),f
  6460  07AD  0CE2               	rrf	___lldiv@divisor^(0+128),f
  6461  07AE  3EFF               	addlw	-1
  6462  07AF  1D03               	skipz
  6463  07B0  2FA9               	goto	u3095
  6464  07B1                     l3562:
  6465  07B1  3001               	movlw	1
  6466  07B2  02EF               	subwf	___lldiv@counter^(0+128),f
  6467  07B3  1D03               	btfss	3,2
  6468  07B4  2FB6               	goto	u3101
  6469  07B5  2FB7               	goto	u3100
  6470  07B6                     u3101:
  6471  07B6  2F7E               	goto	l3552
  6472  07B7                     u3100:
  6473  07B7                     l3564:
  6474  07B7  086E               	movf	(___lldiv@quotient+3)^(0+128),w
  6475  07B8  00E5               	movwf	(?___lldiv+3)^(0+128)
  6476  07B9  086D               	movf	(___lldiv@quotient+2)^(0+128),w
  6477  07BA  00E4               	movwf	(?___lldiv+2)^(0+128)
  6478  07BB  086C               	movf	(___lldiv@quotient+1)^(0+128),w
  6479  07BC  00E3               	movwf	(?___lldiv+1)^(0+128)
  6480  07BD  086B               	movf	___lldiv@quotient^(0+128),w
  6481  07BE  00E2               	movwf	?___lldiv^(0+128)
  6482  07BF                     l621:
  6483  07BF  0008               	return
  6484  07C0                     __end_of___lldiv:
  6485                           
  6486                           	psect	text29
  6487  06B1                     __ptext29:	
  6488 ;; *************** function _isr *****************
  6489 ;; Defined at:
  6490 ;;		line 101 in file "sensor_ctrl_main.c"
  6491 ;; Parameters:    Size  Location     Type
  6492 ;;		None
  6493 ;; Auto vars:     Size  Location     Type
  6494 ;;		None
  6495 ;; Return value:  Size  Location     Type
  6496 ;;                  1    wreg      void 
  6497 ;; Registers used:
  6498 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6499 ;; Tracked objects:
  6500 ;;		On entry : 0/0
  6501 ;;		On exit  : 0/0
  6502 ;;		Unchanged: 0/0
  6503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6504 ;;      Params:         0       0       0       0       0
  6505 ;;      Locals:         0       0       0       0       0
  6506 ;;      Temps:          0       7       0       0       0
  6507 ;;      Totals:         0       7       0       0       0
  6508 ;;Total ram usage:        7 bytes
  6509 ;; Hardware stack levels used: 1
  6510 ;; Hardware stack levels required when called: 3
  6511 ;; This function calls:
  6512 ;;		_Lcd_Clear
  6513 ;;		_adcRead
  6514 ;;		_percent
  6515 ;;		_tmr0Reset
  6516 ;;		i1_sprintf
  6517 ;; This function is called by:
  6518 ;;		Interrupt level 1
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522  06B1                     _isr:	
  6523                           ;psect for function _isr
  6524                           
  6525  06B1                     i1l3062:
  6526                           
  6527                           ;sensor_ctrl_main.c: 105:     if (T0IF){
  6528  06B1  1D0B               	btfss	11,2	;volatile
  6529  06B2  2EB4               	goto	u257_21
  6530  06B3  2EB5               	goto	u257_20
  6531  06B4                     u257_21:
  6532  06B4  2ED8               	goto	i1l3072
  6533  06B5                     u257_20:
  6534  06B5                     i1l3064:
  6535                           
  6536                           ;sensor_ctrl_main.c: 106:         send_cont++;
  6537  06B5  3001               	movlw	1
  6538  06B6  00B5               	movwf	??_isr
  6539  06B7  0835               	movf	??_isr,w
  6540  06B8  07D1               	addwf	_send_cont,f
  6541                           
  6542                           ;sensor_ctrl_main.c: 107:         milis++;
  6543  06B9  3001               	movlw	1
  6544  06BA  00B5               	movwf	??_isr
  6545  06BB  0835               	movf	??_isr,w
  6546  06BC  07D3               	addwf	_milis,f
  6547                           
  6548                           ;sensor_ctrl_main.c: 108:         if (milis == 4){
  6549  06BD  3004               	movlw	4
  6550  06BE  0653               	xorwf	_milis,w
  6551  06BF  1D03               	btfss	3,2
  6552  06C0  2EC2               	goto	u258_21
  6553  06C1  2EC3               	goto	u258_20
  6554  06C2                     u258_21:
  6555  06C2  2ED3               	goto	i1l3070
  6556  06C3                     u258_20:
  6557  06C3                     i1l3066:
  6558                           
  6559                           ;sensor_ctrl_main.c: 109:             pulse = !pulse;
  6560  06C3  0852               	movf	_pulse,w
  6561  06C4  1903               	btfsc	3,2
  6562  06C5  2EC7               	goto	u259_21
  6563  06C6  2EC9               	goto	u259_20
  6564  06C7                     u259_21:
  6565  06C7  3001               	movlw	1
  6566  06C8  2ECA               	goto	u260_20
  6567  06C9                     u259_20:
  6568  06C9  3000               	movlw	0
  6569  06CA                     u260_20:
  6570  06CA  00B5               	movwf	??_isr
  6571  06CB  0835               	movf	??_isr,w
  6572  06CC  00D2               	movwf	_pulse
  6573  06CD                     i1l3068:
  6574                           
  6575                           ;sensor_ctrl_main.c: 110:             PORTDbits.RD6 = pulse;
  6576  06CD  0C52               	rrf	_pulse,w
  6577  06CE  1C03               	skipc
  6578  06CF  1308               	bcf	8,6	;volatile
  6579  06D0  1803               	skipnc
  6580  06D1  1708               	bsf	8,6	;volatile
  6581                           
  6582                           ;sensor_ctrl_main.c: 111:             milis = 0;
  6583  06D2  01D3               	clrf	_milis
  6584  06D3                     i1l3070:
  6585                           
  6586                           ;sensor_ctrl_main.c: 113:         tmr0Reset();
  6587  06D3  120A  158A  209F  120A  118A  	fcall	_tmr0Reset
  6588  06D8                     i1l3072:
  6589                           
  6590                           ;sensor_ctrl_main.c: 120:     if (ADIF){
  6591  06D8  1283               	bcf	3,5	;RP0=0, select bank0
  6592  06D9  1303               	bcf	3,6	;RP1=0, select bank0
  6593  06DA  1F0C               	btfss	12,6	;volatile
  6594  06DB  2EDD               	goto	u261_21
  6595  06DC  2EDE               	goto	u261_20
  6596  06DD                     u261_21:
  6597  06DD  2F1D               	goto	i1l3084
  6598  06DE                     u261_20:
  6599  06DE                     i1l3074:
  6600                           
  6601                           ;sensor_ctrl_main.c: 121:         if (ADCON0bits.CHS == 0){
  6602  06DE  0C1F               	rrf	31,w	;volatile
  6603  06DF  00B5               	movwf	??_isr
  6604  06E0  0C35               	rrf	??_isr,w
  6605  06E1  390F               	andlw	15
  6606  06E2  3A00               	xorlw	0
  6607  06E3  1D03               	skipz
  6608  06E4  2EE6               	goto	u262_21
  6609  06E5  2EE7               	goto	u262_20
  6610  06E6                     u262_21:
  6611  06E6  2F1A               	goto	i1l3082
  6612  06E7                     u262_20:
  6613  06E7                     i1l3076:
  6614                           
  6615                           ;sensor_ctrl_main.c: 122:             HS_val = adcRead();
  6616  06E7  120A  158A  20E1  120A  118A  	fcall	_adcRead
  6617  06EC  0871               	movf	?_adcRead+1,w
  6618  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  6619  06EE  1303               	bcf	3,6	;RP1=0, select bank0
  6620  06EF  00C7               	movwf	_HS_val+1
  6621  06F0  0870               	movf	?_adcRead,w
  6622  06F1  00C6               	movwf	_HS_val
  6623  06F2                     i1l3078:
  6624                           
  6625                           ;sensor_ctrl_main.c: 123:             HS_percent = percent(HS_val, 219, 474);
  6626  06F2  0847               	movf	_HS_val+1,w
  6627  06F3  00A1               	movwf	percent@val+1
  6628  06F4  0846               	movf	_HS_val,w
  6629  06F5  00A0               	movwf	percent@val
  6630  06F6  30DB               	movlw	219
  6631  06F7  00A2               	movwf	percent@water_val
  6632  06F8  3000               	movlw	0
  6633  06F9  00A3               	movwf	percent@water_val+1
  6634  06FA  30DA               	movlw	218
  6635  06FB  00A4               	movwf	percent@air_val
  6636  06FC  3001               	movlw	1
  6637  06FD  00A5               	movwf	percent@air_val+1
  6638  06FE  120A  158A  2272  120A  118A  	fcall	_percent
  6639  0703  1283               	bcf	3,5	;RP0=0, select bank0
  6640  0704  1303               	bcf	3,6	;RP1=0, select bank0
  6641  0705  0820               	movf	?_percent,w
  6642  0706  00B5               	movwf	??_isr
  6643  0707  0835               	movf	??_isr,w
  6644  0708  00CF               	movwf	_HS_percent
  6645  0709                     i1l3080:
  6646                           
  6647                           ;sensor_ctrl_main.c: 124:             sprintf(HS_str, "%d", HS_percent);
  6648  0709  3037               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  6649  070A  00B5               	movwf	??_isr
  6650  070B  0835               	movf	??_isr,w
  6651  070C  00A6               	movwf	i1sprintf@f
  6652  070D  084F               	movf	_HS_percent,w
  6653  070E  00B6               	movwf	??_isr+1
  6654  070F  01B7               	clrf	??_isr+2
  6655  0710  0836               	movf	??_isr+1,w
  6656  0711  00A7               	movwf	?i1_sprintf+1
  6657  0712  0837               	movf	??_isr+2,w
  6658  0713  00A8               	movwf	?i1_sprintf+2
  6659  0714  30D8               	movlw	(low (_HS_str| 0))& (0+255)
  6660  0715  120A  158A  262C  120A  118A  	fcall	i1_sprintf
  6661  071A                     i1l3082:
  6662                           
  6663                           ;sensor_ctrl_main.c: 126:         PIR1bits.ADIF = 0;
  6664  071A  1283               	bcf	3,5	;RP0=0, select bank0
  6665  071B  1303               	bcf	3,6	;RP1=0, select bank0
  6666  071C  130C               	bcf	12,6	;volatile
  6667  071D                     i1l3084:
  6668                           
  6669                           ;sensor_ctrl_main.c: 130:     if (RBIF){
  6670  071D  1C0B               	btfss	11,0	;volatile
  6671  071E  2F20               	goto	u263_21
  6672  071F  2F21               	goto	u263_20
  6673  0720                     u263_21:
  6674  0720  2F4D               	goto	i1l170
  6675  0721                     u263_20:
  6676  0721                     i1l3086:
  6677                           
  6678                           ;sensor_ctrl_main.c: 131:         if (!PORTBbits.RB0){
  6679  0721  1806               	btfsc	6,0	;volatile
  6680  0722  2F24               	goto	u264_21
  6681  0723  2F25               	goto	u264_20
  6682  0724                     u264_21:
  6683  0724  2F33               	goto	i1l3092
  6684  0725                     u264_20:
  6685  0725                     i1l163:
  6686  0725  1C06               	btfss	6,0	;volatile
  6687  0726  2F28               	goto	u265_21
  6688  0727  2F29               	goto	u265_20
  6689  0728                     u265_21:
  6690  0728  2F25               	goto	i1l163
  6691  0729                     u265_20:
  6692  0729                     i1l3090:
  6693                           
  6694                           ;sensor_ctrl_main.c: 133:             spst = !spst;
  6695  0729  084D               	movf	_spst,w
  6696  072A  1903               	btfsc	3,2
  6697  072B  2F2D               	goto	u266_21
  6698  072C  2F2F               	goto	u266_20
  6699  072D                     u266_21:
  6700  072D  3001               	movlw	1
  6701  072E  2F30               	goto	u267_20
  6702  072F                     u266_20:
  6703  072F  3000               	movlw	0
  6704  0730                     u267_20:
  6705  0730  00B5               	movwf	??_isr
  6706  0731  0835               	movf	??_isr,w
  6707  0732  00CD               	movwf	_spst
  6708  0733                     i1l3092:
  6709                           
  6710                           ;sensor_ctrl_main.c: 135:         if (!PORTBbits.RB1){
  6711  0733  1886               	btfsc	6,1	;volatile
  6712  0734  2F36               	goto	u268_21
  6713  0735  2F37               	goto	u268_20
  6714  0736                     u268_21:
  6715  0736  2F4C               	goto	i1l3100
  6716  0737                     u268_20:
  6717  0737                     i1l167:
  6718  0737  1C86               	btfss	6,1	;volatile
  6719  0738  2F3A               	goto	u269_21
  6720  0739  2F3B               	goto	u269_20
  6721  073A                     u269_21:
  6722  073A  2F37               	goto	i1l167
  6723  073B                     u269_20:
  6724  073B                     i1l3096:
  6725                           
  6726                           ;sensor_ctrl_main.c: 137:             Lcd_Clear();
  6727  073B  120A  158A  20D4  120A  118A  	fcall	_Lcd_Clear
  6728  0740                     i1l3098:
  6729                           
  6730                           ;sensor_ctrl_main.c: 138:             disp = !disp;
  6731  0740  1283               	bcf	3,5	;RP0=0, select bank0
  6732  0741  1303               	bcf	3,6	;RP1=0, select bank0
  6733  0742  084C               	movf	_disp,w
  6734  0743  1903               	btfsc	3,2
  6735  0744  2F46               	goto	u270_21
  6736  0745  2F48               	goto	u270_20
  6737  0746                     u270_21:
  6738  0746  3001               	movlw	1
  6739  0747  2F49               	goto	u271_20
  6740  0748                     u270_20:
  6741  0748  3000               	movlw	0
  6742  0749                     u271_20:
  6743  0749  00B5               	movwf	??_isr
  6744  074A  0835               	movf	??_isr,w
  6745  074B  00CC               	movwf	_disp
  6746  074C                     i1l3100:
  6747                           
  6748                           ;sensor_ctrl_main.c: 140:         INTCONbits.RBIF = 0;
  6749  074C  100B               	bcf	11,0	;volatile
  6750  074D                     i1l170:
  6751  074D  083B               	movf	??_isr+6,w
  6752  074E  00FF               	movwf	btemp+1
  6753  074F  083A               	movf	??_isr+5,w
  6754  0750  008A               	movwf	10
  6755  0751  0839               	movf	??_isr+4,w
  6756  0752  0084               	movwf	4
  6757  0753  0E38               	swapf	??_isr+3,w
  6758  0754  0083               	movwf	3
  6759  0755  0EFE               	swapf	btemp,f
  6760  0756  0E7E               	swapf	btemp,w
  6761  0757  0009               	retfie
  6762  0758                     __end_of_isr:
  6763                           
  6764                           	psect	intentry
  6765  0004                     __pintentry:	
  6766                           ;incstack = 0
  6767                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6768                           
  6769  0004                     interrupt_function:
  6770  007E                     saved_w	set	btemp
  6771  0004  00FE               	movwf	btemp
  6772  0005  0E03               	swapf	3,w
  6773  0006  1283               	bcf	3,5	;RP0=0, select bank0
  6774  0007  1303               	bcf	3,6	;RP1=0, select bank0
  6775  0008  00B8               	movwf	??_isr+3
  6776  0009  0804               	movf	4,w
  6777  000A  00B9               	movwf	??_isr+4
  6778  000B  080A               	movf	10,w
  6779  000C  00BA               	movwf	??_isr+5
  6780  000D  087F               	movf	btemp+1,w
  6781  000E  00BB               	movwf	??_isr+6
  6782  000F  120A  118A  2EB1   	ljmp	_isr
  6783                           
  6784                           	psect	text30
  6785  0E2C                     __ptext30:	
  6786 ;; *************** function i1_sprintf *****************
  6787 ;; Defined at:
  6788 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;  sp              1    wreg     PTR unsigned char 
  6791 ;;		 -> HS_flag_str(10), RTC_hor_str(10), RTC_min_str(10), RTC_sec_str(10), 
  6792 ;;		 -> temp_str(10), HS_str(10), 
  6793 ;;  f               1    6[BANK0 ] PTR const unsigned char 
  6794 ;;		 -> STR_7(3), STR_6(3), STR_5(5), STR_4(5), 
  6795 ;;		 -> STR_3(5), STR_2(6), STR_1(3), 
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;  sp              1   19[BANK0 ] PTR unsigned char 
  6798 ;;		 -> HS_flag_str(10), RTC_hor_str(10), RTC_min_str(10), RTC_sec_str(10), 
  6799 ;;		 -> temp_str(10), HS_str(10), 
  6800 ;;  tmpval          4    0        struct .
  6801 ;;  width           2   17[BANK0 ] int 
  6802 ;;  val             2   14[BANK0 ] unsigned int 
  6803 ;;  cp              2    0        PTR const unsigned char 
  6804 ;;  len             2    0        unsigned int 
  6805 ;;  c               1   20[BANK0 ] unsigned char 
  6806 ;;  flag            1   16[BANK0 ] unsigned char 
  6807 ;;  prec            1   13[BANK0 ] char 
  6808 ;;  ap              1   12[BANK0 ] PTR void [1]
  6809 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  6810 ;; Return value:  Size  Location     Type
  6811 ;;                  2    6[BANK0 ] int 
  6812 ;; Registers used:
  6813 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6814 ;; Tracked objects:
  6815 ;;		On entry : 0/0
  6816 ;;		On exit  : 0/0
  6817 ;;		Unchanged: 0/0
  6818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6819 ;;      Params:         0       3       0       0       0
  6820 ;;      Locals:         0       9       0       0       0
  6821 ;;      Temps:          0       3       0       0       0
  6822 ;;      Totals:         0      15       0       0       0
  6823 ;;Total ram usage:       15 bytes
  6824 ;; Hardware stack levels used: 1
  6825 ;; Hardware stack levels required when called: 1
  6826 ;; This function calls:
  6827 ;;		i1___lwdiv
  6828 ;;		i1___lwmod
  6829 ;;		i1___wmul
  6830 ;;		i1_isdigit
  6831 ;; This function is called by:
  6832 ;;		_isr
  6833 ;; This function uses a non-reentrant model
  6834 ;;
  6835                           
  6836  0E2C                     i1_sprintf:	
  6837                           ;psect for function i1_sprintf
  6838                           
  6839                           
  6840                           ;incstack = 0
  6841                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6842                           ;i1sprintf@sp stored from wreg
  6843  0E2C  1283               	bcf	3,5	;RP0=0, select bank0
  6844  0E2D  1303               	bcf	3,6	;RP1=0, select bank0
  6845  0E2E  00B3               	movwf	i1sprintf@sp
  6846  0E2F                     i1l2944:
  6847                           
  6848                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 514: 
      +                           int width;;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 521:  
      +                          signed char prec;
  6849  0E2F  3027               	movlw	(low ((?i1_sprintf| 0+1)))& (0+255)
  6850  0E30  00A9               	movwf	??i1_sprintf
  6851  0E31  0829               	movf	??i1_sprintf,w
  6852  0E32  00AC               	movwf	i1sprintf@ap
  6853                           
  6854                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  6855  0E33  2FE9               	goto	i1l3048
  6856  0E34                     i1l2946:
  6857                           
  6858                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  6859  0E34  3025               	movlw	37
  6860  0E35  0634               	xorwf	i1sprintf@c,w
  6861  0E36  1903               	btfsc	3,2
  6862  0E37  2E39               	goto	u239_21
  6863  0E38  2E3A               	goto	u239_20
  6864  0E39                     u239_21:
  6865  0E39  2E46               	goto	i1l2952
  6866  0E3A                     u239_20:
  6867  0E3A                     i1l2948:
  6868                           
  6869                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  6870  0E3A  0834               	movf	i1sprintf@c,w
  6871  0E3B  00A9               	movwf	??i1_sprintf
  6872  0E3C  0833               	movf	i1sprintf@sp,w
  6873  0E3D  0084               	movwf	4
  6874  0E3E  0829               	movf	??i1_sprintf,w
  6875  0E3F  1383               	bcf	3,7	;select IRP bank0
  6876  0E40  0080               	movwf	0
  6877  0E41                     i1l2950:
  6878  0E41  3001               	movlw	1
  6879  0E42  00A9               	movwf	??i1_sprintf
  6880  0E43  0829               	movf	??i1_sprintf,w
  6881  0E44  07B3               	addwf	i1sprintf@sp,f
  6882                           
  6883                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 559:    continue;
  6884  0E45  2FE9               	goto	i1l3048
  6885  0E46                     i1l2952:
  6886                           
  6887                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 563:   width = 0;
  6888  0E46  01B1               	clrf	i1sprintf@width
  6889  0E47  01B2               	clrf	i1sprintf@width+1
  6890                           
  6891                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  6892  0E48  01B0               	clrf	i1sprintf@flag
  6893  0E49  2E4F               	goto	i1l2958
  6894  0E4A                     i1l546:	
  6895                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 596:    case '0':
  6896                           
  6897                           
  6898                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 597:     flag |= 
      +                          0x04;
  6899  0E4A  1530               	bsf	i1sprintf@flag,2
  6900  0E4B                     i1l2954:
  6901                           
  6902                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 598:     f++;
  6903  0E4B  3001               	movlw	1
  6904  0E4C  00A9               	movwf	??i1_sprintf
  6905  0E4D  0829               	movf	??i1_sprintf,w
  6906  0E4E  07A6               	addwf	i1sprintf@f,f
  6907  0E4F                     i1l2958:	
  6908                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 599:     continue
      +                          ;
  6909                           
  6910  0E4F  0826               	movf	i1sprintf@f,w
  6911  0E50  0084               	movwf	4
  6912  0E51  120A  158A  200A  120A  158A  	fcall	stringdir
  6913  0E56  00A9               	movwf	??i1_sprintf
  6914  0E57  01AA               	clrf	??i1_sprintf+1
  6915                           
  6916                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6917                           ; Switch size 1, requested type "simple"
  6918                           ; Number of cases is 1, Range of values is 0 to 0
  6919                           ; switch strategies available:
  6920                           ; Name         Instructions Cycles
  6921                           ; simple_byte            4     3 (average)
  6922                           ; direct_byte           11     8 (fixed)
  6923                           ; jumptable            260     6 (fixed)
  6924                           ;	Chosen strategy is simple_byte
  6925  0E58  082A               	movf	??i1_sprintf+1,w
  6926  0E59  3A00               	xorlw	0	; case 0
  6927  0E5A  1903               	skipnz
  6928  0E5B  2E5D               	goto	i1l4370
  6929  0E5C  2E62               	goto	i1l2960
  6930  0E5D                     i1l4370:
  6931                           
  6932                           ; Switch size 1, requested type "simple"
  6933                           ; Number of cases is 1, Range of values is 48 to 48
  6934                           ; switch strategies available:
  6935                           ; Name         Instructions Cycles
  6936                           ; simple_byte            4     3 (average)
  6937                           ; direct_byte           14    11 (fixed)
  6938                           ; jumptable            263     9 (fixed)
  6939                           ;	Chosen strategy is simple_byte
  6940  0E5D  0829               	movf	??i1_sprintf,w
  6941  0E5E  3A30               	xorlw	48	; case 48
  6942  0E5F  1903               	skipnz
  6943  0E60  2E4A               	goto	i1l546
  6944  0E61  2E62               	goto	i1l2960
  6945  0E62                     i1l2960:
  6946                           
  6947                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 614:   if(isdigit
      +                          ((unsigned)*f)) {
  6948  0E62  0826               	movf	i1sprintf@f,w
  6949  0E63  0084               	movwf	4
  6950  0E64  120A  158A  200A  120A  158A  	fcall	stringdir
  6951  0E69  120A  158A  20FB  120A  158A  	fcall	i1_isdigit
  6952  0E6E  1C03               	btfss	3,0
  6953  0E6F  2E71               	goto	u240_21
  6954  0E70  2E72               	goto	u240_20
  6955  0E71                     u240_21:
  6956  0E71  2EB2               	goto	i1l2974
  6957  0E72                     u240_20:
  6958  0E72                     i1l2962:
  6959                           
  6960                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 615:    width = 0
      +                          ;
  6961  0E72  1283               	bcf	3,5	;RP0=0, select bank0
  6962  0E73  1303               	bcf	3,6	;RP1=0, select bank0
  6963  0E74  01B1               	clrf	i1sprintf@width
  6964  0E75  01B2               	clrf	i1sprintf@width+1
  6965  0E76                     i1l2964:
  6966                           
  6967                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 617:     width *=
      +                           10;
  6968  0E76  300A               	movlw	10
  6969  0E77  00F0               	movwf	i1___wmul@multiplier
  6970  0E78  3000               	movlw	0
  6971  0E79  00F1               	movwf	i1___wmul@multiplier+1
  6972  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  6973  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  6974  0E7C  0832               	movf	i1sprintf@width+1,w
  6975  0E7D  00F3               	movwf	i1___wmul@multiplicand+1
  6976  0E7E  0831               	movf	i1sprintf@width,w
  6977  0E7F  00F2               	movwf	i1___wmul@multiplicand
  6978  0E80  120A  158A  21FC  120A  158A  	fcall	i1___wmul
  6979  0E85  0871               	movf	?i1___wmul+1,w
  6980  0E86  1283               	bcf	3,5	;RP0=0, select bank0
  6981  0E87  1303               	bcf	3,6	;RP1=0, select bank0
  6982  0E88  00B2               	movwf	i1sprintf@width+1
  6983  0E89  0870               	movf	?i1___wmul,w
  6984  0E8A  00B1               	movwf	i1sprintf@width
  6985  0E8B                     i1l2966:
  6986                           
  6987                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 618:        width
      +                           += *f++ - '0';
  6988  0E8B  0826               	movf	i1sprintf@f,w
  6989  0E8C  0084               	movwf	4
  6990  0E8D  120A  158A  200A  120A  158A  	fcall	stringdir
  6991  0E92  3ED0               	addlw	208
  6992  0E93  00A9               	movwf	??i1_sprintf
  6993  0E94  30FF               	movlw	255
  6994  0E95  1803               	skipnc
  6995  0E96  3000               	movlw	0
  6996  0E97  00AA               	movwf	??i1_sprintf+1
  6997  0E98  0829               	movf	??i1_sprintf,w
  6998  0E99  07B1               	addwf	i1sprintf@width,f
  6999  0E9A  1803               	skipnc
  7000  0E9B  0AB2               	incf	i1sprintf@width+1,f
  7001  0E9C  082A               	movf	??i1_sprintf+1,w
  7002  0E9D  07B2               	addwf	i1sprintf@width+1,f
  7003  0E9E                     i1l2968:
  7004  0E9E  3001               	movlw	1
  7005  0E9F  00A9               	movwf	??i1_sprintf
  7006  0EA0  0829               	movf	??i1_sprintf,w
  7007  0EA1  07A6               	addwf	i1sprintf@f,f
  7008  0EA2                     i1l2970:
  7009                           
  7010                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 619:    } while(i
      +                          sdigit((unsigned)*f));
  7011  0EA2  0826               	movf	i1sprintf@f,w
  7012  0EA3  0084               	movwf	4
  7013  0EA4  120A  158A  200A  120A  158A  	fcall	stringdir
  7014  0EA9  120A  158A  20FB  120A  158A  	fcall	i1_isdigit
  7015  0EAE  1803               	btfsc	3,0
  7016  0EAF  2EB1               	goto	u241_21
  7017  0EB0  2EB2               	goto	u241_20
  7018  0EB1                     u241_21:
  7019  0EB1  2E76               	goto	i1l2964
  7020  0EB2                     u241_20:
  7021  0EB2                     i1l2974:
  7022  0EB2  3001               	movlw	1
  7023  0EB3  1283               	bcf	3,5	;RP0=0, select bank0
  7024  0EB4  1303               	bcf	3,6	;RP1=0, select bank0
  7025  0EB5  07A6               	addwf	i1sprintf@f,f
  7026  0EB6  30FF               	movlw	-1
  7027  0EB7  0726               	addwf	i1sprintf@f,w
  7028  0EB8  0084               	movwf	4
  7029  0EB9  120A  158A  200A  120A  158A  	fcall	stringdir
  7030  0EBE  00B4               	movwf	i1sprintf@c
  7031  0EBF  00A9               	movwf	??i1_sprintf
  7032  0EC0  01AA               	clrf	??i1_sprintf+1
  7033                           
  7034                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7035                           ; Switch size 1, requested type "simple"
  7036                           ; Number of cases is 1, Range of values is 0 to 0
  7037                           ; switch strategies available:
  7038                           ; Name         Instructions Cycles
  7039                           ; simple_byte            4     3 (average)
  7040                           ; direct_byte           11     8 (fixed)
  7041                           ; jumptable            260     6 (fixed)
  7042                           ;	Chosen strategy is simple_byte
  7043  0EC1  082A               	movf	??i1_sprintf+1,w
  7044  0EC2  3A00               	xorlw	0	; case 0
  7045  0EC3  1903               	skipnz
  7046  0EC4  2EC6               	goto	i1l4372
  7047  0EC5  2FE9               	goto	i1l3048
  7048  0EC6                     i1l4372:
  7049                           
  7050                           ; Switch size 1, requested type "simple"
  7051                           ; Number of cases is 3, Range of values is 0 to 105
  7052                           ; switch strategies available:
  7053                           ; Name         Instructions Cycles
  7054                           ; simple_byte           10     6 (average)
  7055                           ; jumptable            260     6 (fixed)
  7056                           ;	Chosen strategy is simple_byte
  7057  0EC6  0829               	movf	??i1_sprintf,w
  7058  0EC7  3A00               	xorlw	0	; case 0
  7059  0EC8  1903               	skipnz
  7060  0EC9  2FFB               	goto	i1l3050
  7061  0ECA  3A64               	xorlw	100	; case 100
  7062  0ECB  1903               	skipnz
  7063  0ECC  2ED1               	goto	i1l2976
  7064  0ECD  3A0D               	xorlw	13	; case 105
  7065  0ECE  1903               	skipnz
  7066  0ECF  2ED1               	goto	i1l2976
  7067  0ED0  2FE9               	goto	i1l3048
  7068  0ED1                     i1l2976:
  7069                           
  7070                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7071  0ED1  082C               	movf	i1sprintf@ap,w
  7072  0ED2  0084               	movwf	4
  7073  0ED3  1383               	bcf	3,7	;select IRP bank0
  7074  0ED4  0800               	movf	0,w
  7075  0ED5  00AE               	movwf	i1sprintf@val
  7076  0ED6  0A84               	incf	4,f
  7077  0ED7  0800               	movf	0,w
  7078  0ED8  00AF               	movwf	i1sprintf@val+1
  7079  0ED9                     i1l2978:
  7080  0ED9  3002               	movlw	2
  7081  0EDA  00A9               	movwf	??i1_sprintf
  7082  0EDB  0829               	movf	??i1_sprintf,w
  7083  0EDC  07AC               	addwf	i1sprintf@ap,f
  7084  0EDD                     i1l2980:
  7085                           
  7086                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  7087  0EDD  1FAF               	btfss	i1sprintf@val+1,7
  7088  0EDE  2EE0               	goto	u242_21
  7089  0EDF  2EE1               	goto	u242_20
  7090  0EE0                     u242_21:
  7091  0EE0  2EEA               	goto	i1l2986
  7092  0EE1                     u242_20:
  7093  0EE1                     i1l2982:
  7094                           
  7095                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  7096  0EE1  3003               	movlw	3
  7097  0EE2  00A9               	movwf	??i1_sprintf
  7098  0EE3  0829               	movf	??i1_sprintf,w
  7099  0EE4  04B0               	iorwf	i1sprintf@flag,f
  7100  0EE5                     i1l2984:
  7101                           
  7102                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  7103  0EE5  09AE               	comf	i1sprintf@val,f
  7104  0EE6  09AF               	comf	i1sprintf@val+1,f
  7105  0EE7  0AAE               	incf	i1sprintf@val,f
  7106  0EE8  1903               	skipnz
  7107  0EE9  0AAF               	incf	i1sprintf@val+1,f
  7108  0EEA                     i1l2986:
  7109                           
  7110                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  7111  0EEA  01B4               	clrf	i1sprintf@c
  7112  0EEB  0AB4               	incf	i1sprintf@c,f
  7113  0EEC                     i1l2992:
  7114                           
  7115                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  7116  0EEC  0834               	movf	i1sprintf@c,w
  7117  0EED  00A9               	movwf	??i1_sprintf
  7118  0EEE  0729               	addwf	??i1_sprintf,w
  7119  0EEF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  7120  0EF0  0084               	movwf	4
  7121  0EF1  120A  158A  200A  120A  158A  	fcall	stringdir
  7122  0EF6  00AA               	movwf	??i1_sprintf+1
  7123  0EF7  120A  158A  200A  120A  158A  	fcall	stringdir
  7124  0EFC  00AB               	movwf	??i1_sprintf+2
  7125  0EFD  082B               	movf	??i1_sprintf+2,w
  7126  0EFE  022F               	subwf	i1sprintf@val+1,w
  7127  0EFF  1D03               	skipz
  7128  0F00  2F03               	goto	u243_25
  7129  0F01  082A               	movf	??i1_sprintf+1,w
  7130  0F02  022E               	subwf	i1sprintf@val,w
  7131  0F03                     u243_25:
  7132  0F03  1803               	skipnc
  7133  0F04  2F06               	goto	u243_21
  7134  0F05  2F07               	goto	u243_20
  7135  0F06                     u243_21:
  7136  0F06  2F08               	goto	i1l2996
  7137  0F07                     u243_20:
  7138  0F07  2F12               	goto	i1l2998
  7139  0F08                     i1l2996:
  7140  0F08  3001               	movlw	1
  7141  0F09  00A9               	movwf	??i1_sprintf
  7142  0F0A  0829               	movf	??i1_sprintf,w
  7143  0F0B  07B4               	addwf	i1sprintf@c,f
  7144  0F0C  3005               	movlw	5
  7145  0F0D  0634               	xorwf	i1sprintf@c,w
  7146  0F0E  1D03               	btfss	3,2
  7147  0F0F  2F11               	goto	u244_21
  7148  0F10  2F12               	goto	u244_20
  7149  0F11                     u244_21:
  7150  0F11  2EEC               	goto	i1l2992
  7151  0F12                     u244_20:
  7152  0F12                     i1l2998:
  7153                           
  7154                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1371:   if(width 
      +                          && flag & 0x03)
  7155  0F12  0831               	movf	i1sprintf@width,w
  7156  0F13  0432               	iorwf	i1sprintf@width+1,w
  7157  0F14  1903               	btfsc	3,2
  7158  0F15  2F17               	goto	u245_21
  7159  0F16  2F18               	goto	u245_20
  7160  0F17                     u245_21:
  7161  0F17  2F24               	goto	i1l564
  7162  0F18                     u245_20:
  7163  0F18                     i1l3000:
  7164  0F18  0830               	movf	i1sprintf@flag,w
  7165  0F19  3903               	andlw	3
  7166  0F1A  1903               	btfsc	3,2
  7167  0F1B  2F1D               	goto	u246_21
  7168  0F1C  2F1E               	goto	u246_20
  7169  0F1D                     u246_21:
  7170  0F1D  2F24               	goto	i1l564
  7171  0F1E                     u246_20:
  7172  0F1E                     i1l3002:
  7173                           
  7174                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1372:    width--;
  7175  0F1E  30FF               	movlw	255
  7176  0F1F  07B1               	addwf	i1sprintf@width,f
  7177  0F20  1803               	skipnc
  7178  0F21  0AB2               	incf	i1sprintf@width+1,f
  7179  0F22  30FF               	movlw	255
  7180  0F23  07B2               	addwf	i1sprintf@width+1,f
  7181  0F24                     i1l564:
  7182                           
  7183                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1407:   if(width 
      +                          > c)
  7184  0F24  0832               	movf	i1sprintf@width+1,w
  7185  0F25  3A80               	xorlw	128
  7186  0F26  3C80               	sublw	128
  7187  0F27  1D03               	skipz
  7188  0F28  2F2B               	goto	u247_25
  7189  0F29  0831               	movf	i1sprintf@width,w
  7190  0F2A  0234               	subwf	i1sprintf@c,w
  7191  0F2B                     u247_25:
  7192  0F2B  1803               	skipnc
  7193  0F2C  2F2E               	goto	u247_21
  7194  0F2D  2F2F               	goto	u247_20
  7195  0F2E                     u247_21:
  7196  0F2E  2F3B               	goto	i1l3006
  7197  0F2F                     u247_20:
  7198  0F2F                     i1l3004:
  7199                           
  7200                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1408:    width -=
      +                           c;
  7201  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  7202  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  7203  0F31  0834               	movf	i1sprintf@c,w
  7204  0F32  00A9               	movwf	??i1_sprintf
  7205  0F33  01AA               	clrf	??i1_sprintf+1
  7206  0F34  0829               	movf	??i1_sprintf,w
  7207  0F35  02B1               	subwf	i1sprintf@width,f
  7208  0F36  082A               	movf	??i1_sprintf+1,w
  7209  0F37  1C03               	skipc
  7210  0F38  03B2               	decf	i1sprintf@width+1,f
  7211  0F39  02B2               	subwf	i1sprintf@width+1,f
  7212  0F3A  2F3F               	goto	i1l3008
  7213  0F3B                     i1l3006:
  7214                           
  7215                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1410:    width = 
      +                          0;
  7216  0F3B  1283               	bcf	3,5	;RP0=0, select bank0
  7217  0F3C  1303               	bcf	3,6	;RP1=0, select bank0
  7218  0F3D  01B1               	clrf	i1sprintf@width
  7219  0F3E  01B2               	clrf	i1sprintf@width+1
  7220  0F3F                     i1l3008:
  7221                           
  7222                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1413:   if(flag &
      +                           0x04) {
  7223  0F3F  1D30               	btfss	i1sprintf@flag,2
  7224  0F40  2F42               	goto	u248_21
  7225  0F41  2F43               	goto	u248_20
  7226  0F42                     u248_21:
  7227  0F42  2F72               	goto	i1l3024
  7228  0F43                     u248_20:
  7229  0F43                     i1l3010:
  7230                           
  7231                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1418:    if(flag 
      +                          & 0x03)
  7232  0F43  0830               	movf	i1sprintf@flag,w
  7233  0F44  3903               	andlw	3
  7234  0F45  1903               	btfsc	3,2
  7235  0F46  2F48               	goto	u249_21
  7236  0F47  2F49               	goto	u249_20
  7237  0F48                     u249_21:
  7238  0F48  2F54               	goto	i1l3016
  7239  0F49                     u249_20:
  7240  0F49                     i1l3012:
  7241                           
  7242                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1419:     ((*sp++
      +                           = ('-')));
  7243  0F49  302D               	movlw	45
  7244  0F4A  00A9               	movwf	??i1_sprintf
  7245  0F4B  0833               	movf	i1sprintf@sp,w
  7246  0F4C  0084               	movwf	4
  7247  0F4D  0829               	movf	??i1_sprintf,w
  7248  0F4E  1383               	bcf	3,7	;select IRP bank0
  7249  0F4F  0080               	movwf	0
  7250  0F50                     i1l3014:
  7251  0F50  3001               	movlw	1
  7252  0F51  00A9               	movwf	??i1_sprintf
  7253  0F52  0829               	movf	??i1_sprintf,w
  7254  0F53  07B3               	addwf	i1sprintf@sp,f
  7255  0F54                     i1l3016:
  7256                           
  7257                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1441:    if(width
      +                          )
  7258  0F54  0831               	movf	i1sprintf@width,w
  7259  0F55  0432               	iorwf	i1sprintf@width+1,w
  7260  0F56  1903               	btfsc	3,2
  7261  0F57  2F59               	goto	u250_21
  7262  0F58  2F5A               	goto	u250_20
  7263  0F59                     u250_21:
  7264  0F59  2FA0               	goto	i1l3038
  7265  0F5A                     u250_20:
  7266  0F5A                     i1l3018:
  7267                           
  7268                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1443:      ((*sp+
      +                          + = ('0')));
  7269  0F5A  3030               	movlw	48
  7270  0F5B  00A9               	movwf	??i1_sprintf
  7271  0F5C  0833               	movf	i1sprintf@sp,w
  7272  0F5D  0084               	movwf	4
  7273  0F5E  0829               	movf	??i1_sprintf,w
  7274  0F5F  1383               	bcf	3,7	;select IRP bank0
  7275  0F60  0080               	movwf	0
  7276  0F61                     i1l3020:
  7277  0F61  3001               	movlw	1
  7278  0F62  00A9               	movwf	??i1_sprintf
  7279  0F63  0829               	movf	??i1_sprintf,w
  7280  0F64  07B3               	addwf	i1sprintf@sp,f
  7281  0F65                     i1l3022:
  7282  0F65  30FF               	movlw	255
  7283  0F66  07B1               	addwf	i1sprintf@width,f
  7284  0F67  1803               	skipnc
  7285  0F68  0AB2               	incf	i1sprintf@width+1,f
  7286  0F69  30FF               	movlw	255
  7287  0F6A  07B2               	addwf	i1sprintf@width+1,f
  7288  0F6B  0831               	movf	i1sprintf@width,w
  7289  0F6C  0432               	iorwf	i1sprintf@width+1,w
  7290  0F6D  1D03               	btfss	3,2
  7291  0F6E  2F70               	goto	u251_21
  7292  0F6F  2F71               	goto	u251_20
  7293  0F70                     u251_21:
  7294  0F70  2F5A               	goto	i1l3018
  7295  0F71                     u251_20:
  7296  0F71  2FA0               	goto	i1l3038
  7297  0F72                     i1l3024:
  7298                           
  7299                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1450:    if(width
  7300  0F72  0831               	movf	i1sprintf@width,w
  7301  0F73  0432               	iorwf	i1sprintf@width+1,w
  7302  0F74  1903               	btfsc	3,2
  7303  0F75  2F77               	goto	u252_21
  7304  0F76  2F78               	goto	u252_20
  7305  0F77                     u252_21:
  7306  0F77  2F8F               	goto	i1l3032
  7307  0F78                     u252_20:
  7308  0F78                     i1l3026:
  7309                           
  7310                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1456:      ((*sp+
      +                          + = (' ')));
  7311  0F78  3020               	movlw	32
  7312  0F79  00A9               	movwf	??i1_sprintf
  7313  0F7A  0833               	movf	i1sprintf@sp,w
  7314  0F7B  0084               	movwf	4
  7315  0F7C  0829               	movf	??i1_sprintf,w
  7316  0F7D  1383               	bcf	3,7	;select IRP bank0
  7317  0F7E  0080               	movwf	0
  7318  0F7F                     i1l3028:
  7319  0F7F  3001               	movlw	1
  7320  0F80  00A9               	movwf	??i1_sprintf
  7321  0F81  0829               	movf	??i1_sprintf,w
  7322  0F82  07B3               	addwf	i1sprintf@sp,f
  7323  0F83                     i1l3030:
  7324  0F83  30FF               	movlw	255
  7325  0F84  07B1               	addwf	i1sprintf@width,f
  7326  0F85  1803               	skipnc
  7327  0F86  0AB2               	incf	i1sprintf@width+1,f
  7328  0F87  30FF               	movlw	255
  7329  0F88  07B2               	addwf	i1sprintf@width+1,f
  7330  0F89  0831               	movf	i1sprintf@width,w
  7331  0F8A  0432               	iorwf	i1sprintf@width+1,w
  7332  0F8B  1D03               	btfss	3,2
  7333  0F8C  2F8E               	goto	u253_21
  7334  0F8D  2F8F               	goto	u253_20
  7335  0F8E                     u253_21:
  7336  0F8E  2F78               	goto	i1l3026
  7337  0F8F                     u253_20:
  7338  0F8F                     i1l3032:
  7339                           
  7340                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1464:    if(flag 
      +                          & 0x03)
  7341  0F8F  0830               	movf	i1sprintf@flag,w
  7342  0F90  3903               	andlw	3
  7343  0F91  1903               	btfsc	3,2
  7344  0F92  2F94               	goto	u254_21
  7345  0F93  2F95               	goto	u254_20
  7346  0F94                     u254_21:
  7347  0F94  2FA0               	goto	i1l3038
  7348  0F95                     u254_20:
  7349  0F95                     i1l3034:
  7350                           
  7351                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  7352  0F95  302D               	movlw	45
  7353  0F96  00A9               	movwf	??i1_sprintf
  7354  0F97  0833               	movf	i1sprintf@sp,w
  7355  0F98  0084               	movwf	4
  7356  0F99  0829               	movf	??i1_sprintf,w
  7357  0F9A  1383               	bcf	3,7	;select IRP bank0
  7358  0F9B  0080               	movwf	0
  7359  0F9C                     i1l3036:
  7360  0F9C  3001               	movlw	1
  7361  0F9D  00A9               	movwf	??i1_sprintf
  7362  0F9E  0829               	movf	??i1_sprintf,w
  7363  0F9F  07B3               	addwf	i1sprintf@sp,f
  7364  0FA0                     i1l3038:
  7365                           
  7366                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  7367  0FA0  0834               	movf	i1sprintf@c,w
  7368  0FA1  00A9               	movwf	??i1_sprintf
  7369  0FA2  0829               	movf	??i1_sprintf,w
  7370  0FA3  00AD               	movwf	i1sprintf@prec
  7371                           
  7372                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  7373  0FA4  2FE0               	goto	i1l3046
  7374  0FA5                     i1l3040:
  7375                           
  7376                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  7377  0FA5  300A               	movlw	10
  7378  0FA6  00A0               	movwf	i1___lwmod@divisor
  7379  0FA7  3000               	movlw	0
  7380  0FA8  00A1               	movwf	i1___lwmod@divisor+1
  7381  0FA9  082D               	movf	i1sprintf@prec,w
  7382  0FAA  00A9               	movwf	??i1_sprintf
  7383  0FAB  0729               	addwf	??i1_sprintf,w
  7384  0FAC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  7385  0FAD  0084               	movwf	4
  7386  0FAE  120A  158A  200A  120A  158A  	fcall	stringdir
  7387  0FB3  00F6               	movwf	i1___lwdiv@divisor
  7388  0FB4  120A  158A  200A  120A  158A  	fcall	stringdir
  7389  0FB9  00F7               	movwf	i1___lwdiv@divisor+1
  7390  0FBA  082F               	movf	i1sprintf@val+1,w
  7391  0FBB  00F9               	movwf	i1___lwdiv@dividend+1
  7392  0FBC  082E               	movf	i1sprintf@val,w
  7393  0FBD  00F8               	movwf	i1___lwdiv@dividend
  7394  0FBE  120A  158A  23B3  120A  158A  	fcall	i1___lwdiv
  7395  0FC3  0877               	movf	?i1___lwdiv+1,w
  7396  0FC4  1283               	bcf	3,5	;RP0=0, select bank0
  7397  0FC5  1303               	bcf	3,6	;RP1=0, select bank0
  7398  0FC6  00A3               	movwf	i1___lwmod@dividend+1
  7399  0FC7  0876               	movf	?i1___lwdiv,w
  7400  0FC8  00A2               	movwf	i1___lwmod@dividend
  7401  0FC9  120A  158A  2334  120A  158A  	fcall	i1___lwmod
  7402  0FCE  1283               	bcf	3,5	;RP0=0, select bank0
  7403  0FCF  1303               	bcf	3,6	;RP1=0, select bank0
  7404  0FD0  0820               	movf	?i1___lwmod,w
  7405  0FD1  3E30               	addlw	48
  7406  0FD2  00AA               	movwf	??i1_sprintf+1
  7407  0FD3  082A               	movf	??i1_sprintf+1,w
  7408  0FD4  00B4               	movwf	i1sprintf@c
  7409  0FD5                     i1l3042:
  7410                           
  7411                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  7412  0FD5  0834               	movf	i1sprintf@c,w
  7413  0FD6  00A9               	movwf	??i1_sprintf
  7414  0FD7  0833               	movf	i1sprintf@sp,w
  7415  0FD8  0084               	movwf	4
  7416  0FD9  0829               	movf	??i1_sprintf,w
  7417  0FDA  1383               	bcf	3,7	;select IRP bank0
  7418  0FDB  0080               	movwf	0
  7419  0FDC                     i1l3044:
  7420  0FDC  3001               	movlw	1
  7421  0FDD  00A9               	movwf	??i1_sprintf
  7422  0FDE  0829               	movf	??i1_sprintf,w
  7423  0FDF  07B3               	addwf	i1sprintf@sp,f
  7424  0FE0                     i1l3046:
  7425                           
  7426                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  7427  0FE0  30FF               	movlw	255
  7428  0FE1  00A9               	movwf	??i1_sprintf
  7429  0FE2  0829               	movf	??i1_sprintf,w
  7430  0FE3  07AD               	addwf	i1sprintf@prec,f
  7431  0FE4  0A2D               	incf	i1sprintf@prec,w
  7432  0FE5  1D03               	btfss	3,2
  7433  0FE6  2FE8               	goto	u255_21
  7434  0FE7  2FE9               	goto	u255_20
  7435  0FE8                     u255_21:
  7436  0FE8  2FA5               	goto	i1l3040
  7437  0FE9                     u255_20:
  7438  0FE9                     i1l3048:
  7439                           
  7440                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  7441  0FE9  3001               	movlw	1
  7442  0FEA  07A6               	addwf	i1sprintf@f,f
  7443  0FEB  30FF               	movlw	-1
  7444  0FEC  0726               	addwf	i1sprintf@f,w
  7445  0FED  0084               	movwf	4
  7446  0FEE  120A  158A  200A  120A  158A  	fcall	stringdir
  7447  0FF3  00A9               	movwf	??i1_sprintf
  7448  0FF4  0829               	movf	??i1_sprintf,w
  7449  0FF5  00B4               	movwf	i1sprintf@c
  7450  0FF6  0834               	movf	i1sprintf@c,w
  7451  0FF7  1D03               	btfss	3,2
  7452  0FF8  2FFA               	goto	u256_21
  7453  0FF9  2FFB               	goto	u256_20
  7454  0FFA                     u256_21:
  7455  0FFA  2E34               	goto	i1l2946
  7456  0FFB                     u256_20:
  7457  0FFB                     i1l3050:
  7458                           
  7459                           ;C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  7460  0FFB  0833               	movf	i1sprintf@sp,w
  7461  0FFC  0084               	movwf	4
  7462  0FFD  1383               	bcf	3,7	;select IRP bank0
  7463  0FFE  0180               	clrf	0
  7464  0FFF                     i1l581:
  7465  0FFF  0008               	return
  7466  1000                     __end_ofi1_sprintf:
  7467                           
  7468                           	psect	text31
  7469  08FB                     __ptext31:	
  7470 ;; *************** function i1_isdigit *****************
  7471 ;; Defined at:
  7472 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\isdigit.c"
  7473 ;; Parameters:    Size  Location     Type
  7474 ;;  c               1    wreg     unsigned char 
  7475 ;; Auto vars:     Size  Location     Type
  7476 ;;  c               1    1[COMMON] unsigned char 
  7477 ;; Return value:  Size  Location     Type
  7478 ;;		None               void
  7479 ;; Registers used:
  7480 ;;		wreg, status,2, status,0
  7481 ;; Tracked objects:
  7482 ;;		On entry : 0/0
  7483 ;;		On exit  : 0/0
  7484 ;;		Unchanged: 0/0
  7485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7486 ;;      Params:         0       0       0       0       0
  7487 ;;      Locals:         2       0       0       0       0
  7488 ;;      Temps:          0       0       0       0       0
  7489 ;;      Totals:         2       0       0       0       0
  7490 ;;Total ram usage:        2 bytes
  7491 ;; Hardware stack levels used: 1
  7492 ;; This function calls:
  7493 ;;		Nothing
  7494 ;; This function is called by:
  7495 ;;		i1_sprintf
  7496 ;; This function uses a non-reentrant model
  7497 ;;
  7498                           
  7499  08FB                     i1_isdigit:	
  7500                           ;psect for function i1_isdigit
  7501                           
  7502                           
  7503                           ;incstack = 0
  7504                           ; Regs used in i1_isdigit: [wreg+status,2+status,0]
  7505                           ;i1isdigit@c stored from wreg
  7506  08FB  00F1               	movwf	i1isdigit@c
  7507  08FC                     i1l2556:
  7508  08FC  01F0               	clrf	i1_isdigit$1515
  7509  08FD                     i1l2558:
  7510  08FD  303A               	movlw	58
  7511  08FE  0271               	subwf	i1isdigit@c,w
  7512  08FF  1803               	skipnc
  7513  0900  2902               	goto	u206_21
  7514  0901  2903               	goto	u206_20
  7515  0902                     u206_21:
  7516  0902  290B               	goto	i1l2564
  7517  0903                     u206_20:
  7518  0903                     i1l2560:
  7519  0903  3030               	movlw	48
  7520  0904  0271               	subwf	i1isdigit@c,w
  7521  0905  1C03               	skipc
  7522  0906  2908               	goto	u207_21
  7523  0907  2909               	goto	u207_20
  7524  0908                     u207_21:
  7525  0908  290B               	goto	i1l2564
  7526  0909                     u207_20:
  7527  0909                     i1l2562:
  7528  0909  01F0               	clrf	i1_isdigit$1515
  7529  090A  0AF0               	incf	i1_isdigit$1515,f
  7530  090B                     i1l2564:
  7531  090B  0C70               	rrf	i1_isdigit$1515,w
  7532  090C                     i1l1038:
  7533  090C  0008               	return
  7534  090D                     __end_ofi1_isdigit:
  7535                           
  7536                           	psect	text32
  7537  0B34                     __ptext32:	
  7538 ;; *************** function i1___lwmod *****************
  7539 ;; Defined at:
  7540 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwmod.c"
  7541 ;; Parameters:    Size  Location     Type
  7542 ;;  divisor         2    0[BANK0 ] unsigned int 
  7543 ;;  dividend        2    2[BANK0 ] unsigned int 
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;  counter         1    5[BANK0 ] unsigned char 
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  2    0[BANK0 ] unsigned int 
  7548 ;; Registers used:
  7549 ;;		wreg, status,2, status,0
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7555 ;;      Params:         0       4       0       0       0
  7556 ;;      Locals:         0       1       0       0       0
  7557 ;;      Temps:          0       1       0       0       0
  7558 ;;      Totals:         0       6       0       0       0
  7559 ;;Total ram usage:        6 bytes
  7560 ;; Hardware stack levels used: 1
  7561 ;; This function calls:
  7562 ;;		Nothing
  7563 ;; This function is called by:
  7564 ;;		i1_sprintf
  7565 ;; This function uses a non-reentrant model
  7566 ;;
  7567                           
  7568  0B34                     i1___lwmod:	
  7569                           ;psect for function i1___lwmod
  7570                           
  7571  0B34                     i1l2534:	
  7572                           ;incstack = 0
  7573                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  7574                           
  7575  0B34  1283               	bcf	3,5	;RP0=0, select bank0
  7576  0B35  1303               	bcf	3,6	;RP1=0, select bank0
  7577  0B36  0820               	movf	i1___lwmod@divisor,w
  7578  0B37  0421               	iorwf	i1___lwmod@divisor+1,w
  7579  0B38  1903               	btfsc	3,2
  7580  0B39  2B3B               	goto	u200_21
  7581  0B3A  2B3C               	goto	u200_20
  7582  0B3B                     u200_21:
  7583  0B3B  2B6B               	goto	i1l2552
  7584  0B3C                     u200_20:
  7585  0B3C                     i1l2536:
  7586  0B3C  01A5               	clrf	i1___lwmod@counter
  7587  0B3D  0AA5               	incf	i1___lwmod@counter,f
  7588  0B3E  2B4A               	goto	i1l2542
  7589  0B3F                     i1l2538:
  7590  0B3F  3001               	movlw	1
  7591  0B40                     u201_25:
  7592  0B40  1003               	clrc
  7593  0B41  0DA0               	rlf	i1___lwmod@divisor,f
  7594  0B42  0DA1               	rlf	i1___lwmod@divisor+1,f
  7595  0B43  3EFF               	addlw	-1
  7596  0B44  1D03               	skipz
  7597  0B45  2B40               	goto	u201_25
  7598  0B46                     i1l2540:
  7599  0B46  3001               	movlw	1
  7600  0B47  00A4               	movwf	??i1___lwmod
  7601  0B48  0824               	movf	??i1___lwmod,w
  7602  0B49  07A5               	addwf	i1___lwmod@counter,f
  7603  0B4A                     i1l2542:
  7604  0B4A  1FA1               	btfss	i1___lwmod@divisor+1,7
  7605  0B4B  2B4D               	goto	u202_21
  7606  0B4C  2B4E               	goto	u202_20
  7607  0B4D                     u202_21:
  7608  0B4D  2B3F               	goto	i1l2538
  7609  0B4E                     u202_20:
  7610  0B4E                     i1l2544:
  7611  0B4E  0821               	movf	i1___lwmod@divisor+1,w
  7612  0B4F  0223               	subwf	i1___lwmod@dividend+1,w
  7613  0B50  1D03               	skipz
  7614  0B51  2B54               	goto	u203_25
  7615  0B52  0820               	movf	i1___lwmod@divisor,w
  7616  0B53  0222               	subwf	i1___lwmod@dividend,w
  7617  0B54                     u203_25:
  7618  0B54  1C03               	skipc
  7619  0B55  2B57               	goto	u203_21
  7620  0B56  2B58               	goto	u203_20
  7621  0B57                     u203_21:
  7622  0B57  2B5E               	goto	i1l2548
  7623  0B58                     u203_20:
  7624  0B58                     i1l2546:
  7625  0B58  0820               	movf	i1___lwmod@divisor,w
  7626  0B59  02A2               	subwf	i1___lwmod@dividend,f
  7627  0B5A  0821               	movf	i1___lwmod@divisor+1,w
  7628  0B5B  1C03               	skipc
  7629  0B5C  03A3               	decf	i1___lwmod@dividend+1,f
  7630  0B5D  02A3               	subwf	i1___lwmod@dividend+1,f
  7631  0B5E                     i1l2548:
  7632  0B5E  3001               	movlw	1
  7633  0B5F                     u204_25:
  7634  0B5F  1003               	clrc
  7635  0B60  0CA1               	rrf	i1___lwmod@divisor+1,f
  7636  0B61  0CA0               	rrf	i1___lwmod@divisor,f
  7637  0B62  3EFF               	addlw	-1
  7638  0B63  1D03               	skipz
  7639  0B64  2B5F               	goto	u204_25
  7640  0B65                     i1l2550:
  7641  0B65  3001               	movlw	1
  7642  0B66  02A5               	subwf	i1___lwmod@counter,f
  7643  0B67  1D03               	btfss	3,2
  7644  0B68  2B6A               	goto	u205_21
  7645  0B69  2B6B               	goto	u205_20
  7646  0B6A                     u205_21:
  7647  0B6A  2B4E               	goto	i1l2544
  7648  0B6B                     u205_20:
  7649  0B6B                     i1l2552:
  7650  0B6B  0823               	movf	i1___lwmod@dividend+1,w
  7651  0B6C  00A1               	movwf	?i1___lwmod+1
  7652  0B6D  0822               	movf	i1___lwmod@dividend,w
  7653  0B6E  00A0               	movwf	?i1___lwmod
  7654  0B6F                     i1l867:
  7655  0B6F  0008               	return
  7656  0B70                     __end_ofi1___lwmod:
  7657                           
  7658                           	psect	text33
  7659  089F                     __ptext33:	
  7660 ;; *************** function _tmr0Reset *****************
  7661 ;; Defined at:
  7662 ;;		line 53 in file "tmr0_config.c"
  7663 ;; Parameters:    Size  Location     Type
  7664 ;;		None
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;		None
  7667 ;; Return value:  Size  Location     Type
  7668 ;;                  1    wreg      void 
  7669 ;; Registers used:
  7670 ;;		wreg
  7671 ;; Tracked objects:
  7672 ;;		On entry : 0/0
  7673 ;;		On exit  : 0/0
  7674 ;;		Unchanged: 0/0
  7675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7676 ;;      Params:         0       0       0       0       0
  7677 ;;      Locals:         0       0       0       0       0
  7678 ;;      Temps:          0       0       0       0       0
  7679 ;;      Totals:         0       0       0       0       0
  7680 ;;Total ram usage:        0 bytes
  7681 ;; Hardware stack levels used: 1
  7682 ;; This function calls:
  7683 ;;		Nothing
  7684 ;; This function is called by:
  7685 ;;		_isr
  7686 ;; This function uses a non-reentrant model
  7687 ;;
  7688                           
  7689  089F                     _tmr0Reset:	
  7690                           ;psect for function _tmr0Reset
  7691                           
  7692  089F                     i1l2568:	
  7693                           ;incstack = 0
  7694                           ; Regs used in _tmr0Reset: [wreg]
  7695                           
  7696                           
  7697                           ;tmr0_config.c: 54:     INTCONbits.T0IF = 0;
  7698  089F  110B               	bcf	11,2	;volatile
  7699  08A0                     i1l2570:
  7700                           
  7701                           ;tmr0_config.c: 55:     TMR0 = 178;
  7702  08A0  30B2               	movlw	178
  7703  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  7704  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  7705  08A3  0081               	movwf	1	;volatile
  7706  08A4                     i1l282:
  7707  08A4  0008               	return
  7708  08A5                     __end_of_tmr0Reset:
  7709                           
  7710                           	psect	text34
  7711  0A72                     __ptext34:	
  7712 ;; *************** function _percent *****************
  7713 ;; Defined at:
  7714 ;;		line 338 in file "sensor_ctrl_main.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  val             2    0[BANK0 ] unsigned int 
  7717 ;;  water_val       2    2[BANK0 ] unsigned int 
  7718 ;;  air_val         2    4[BANK0 ] unsigned int 
  7719 ;; Auto vars:     Size  Location     Type
  7720 ;;		None
  7721 ;; Return value:  Size  Location     Type
  7722 ;;                  2    0[BANK0 ] int 
  7723 ;; Registers used:
  7724 ;;		wreg, status,2, status,0, pclath, cstack
  7725 ;; Tracked objects:
  7726 ;;		On entry : 0/0
  7727 ;;		On exit  : 0/0
  7728 ;;		Unchanged: 0/0
  7729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7730 ;;      Params:         0       6       0       0       0
  7731 ;;      Locals:         0       0       0       0       0
  7732 ;;      Temps:          0       0       0       0       0
  7733 ;;      Totals:         0       6       0       0       0
  7734 ;;Total ram usage:        6 bytes
  7735 ;; Hardware stack levels used: 1
  7736 ;; Hardware stack levels required when called: 1
  7737 ;; This function calls:
  7738 ;;		i1___lwdiv
  7739 ;;		i1___wmul
  7740 ;; This function is called by:
  7741 ;;		_isr
  7742 ;; This function uses a non-reentrant model
  7743 ;;
  7744                           
  7745  0A72                     _percent:	
  7746                           ;psect for function _percent
  7747                           
  7748  0A72                     i1l2578:	
  7749                           ;incstack = 0
  7750                           ; Regs used in _percent: [wreg+status,2+status,0+pclath+cstack]
  7751                           
  7752                           
  7753                           ;sensor_ctrl_main.c: 339:     return (int)(((air_val-val)*100)/(air_val-water_val));
  7754  0A72  1283               	bcf	3,5	;RP0=0, select bank0
  7755  0A73  1303               	bcf	3,6	;RP1=0, select bank0
  7756  0A74  0822               	movf	percent@water_val,w
  7757  0A75  0224               	subwf	percent@air_val,w
  7758  0A76  00F6               	movwf	i1___lwdiv@divisor
  7759  0A77  0823               	movf	percent@water_val+1,w
  7760  0A78  1C03               	skipc
  7761  0A79  0A23               	incf	percent@water_val+1,w
  7762  0A7A  0225               	subwf	percent@air_val+1,w
  7763  0A7B  00F7               	movwf	i1___lwdiv@divisor+1
  7764  0A7C  0820               	movf	percent@val,w
  7765  0A7D  0224               	subwf	percent@air_val,w
  7766  0A7E  00F0               	movwf	i1___wmul@multiplier
  7767  0A7F  0821               	movf	percent@val+1,w
  7768  0A80  1C03               	skipc
  7769  0A81  0A21               	incf	percent@val+1,w
  7770  0A82  0225               	subwf	percent@air_val+1,w
  7771  0A83  00F1               	movwf	i1___wmul@multiplier+1
  7772  0A84  3064               	movlw	100
  7773  0A85  00F2               	movwf	i1___wmul@multiplicand
  7774  0A86  3000               	movlw	0
  7775  0A87  00F3               	movwf	i1___wmul@multiplicand+1
  7776  0A88  120A  158A  21FC  120A  158A  	fcall	i1___wmul
  7777  0A8D  0871               	movf	?i1___wmul+1,w
  7778  0A8E  00F9               	movwf	i1___lwdiv@dividend+1
  7779  0A8F  0870               	movf	?i1___wmul,w
  7780  0A90  00F8               	movwf	i1___lwdiv@dividend
  7781  0A91  120A  158A  23B3  120A  158A  	fcall	i1___lwdiv
  7782  0A96  0877               	movf	?i1___lwdiv+1,w
  7783  0A97  1283               	bcf	3,5	;RP0=0, select bank0
  7784  0A98  1303               	bcf	3,6	;RP1=0, select bank0
  7785  0A99  00A1               	movwf	?_percent+1
  7786  0A9A  0876               	movf	?i1___lwdiv,w
  7787  0A9B  00A0               	movwf	?_percent
  7788  0A9C                     i1l207:
  7789  0A9C  0008               	return
  7790  0A9D                     __end_of_percent:
  7791                           
  7792                           	psect	text35
  7793  09FC                     __ptext35:	
  7794 ;; *************** function i1___wmul *****************
  7795 ;; Defined at:
  7796 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\Umul16.c"
  7797 ;; Parameters:    Size  Location     Type
  7798 ;;  multiplier      2    0[COMMON] unsigned int 
  7799 ;;  multiplicand    2    2[COMMON] unsigned int 
  7800 ;; Auto vars:     Size  Location     Type
  7801 ;;  product         2    4[COMMON] unsigned int 
  7802 ;; Return value:  Size  Location     Type
  7803 ;;                  2    0[COMMON] unsigned int 
  7804 ;; Registers used:
  7805 ;;		wreg, status,2, status,0
  7806 ;; Tracked objects:
  7807 ;;		On entry : 0/0
  7808 ;;		On exit  : 0/0
  7809 ;;		Unchanged: 0/0
  7810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7811 ;;      Params:         4       0       0       0       0
  7812 ;;      Locals:         2       0       0       0       0
  7813 ;;      Temps:          0       0       0       0       0
  7814 ;;      Totals:         6       0       0       0       0
  7815 ;;Total ram usage:        6 bytes
  7816 ;; Hardware stack levels used: 1
  7817 ;; This function calls:
  7818 ;;		Nothing
  7819 ;; This function is called by:
  7820 ;;		_percent
  7821 ;;		i1_sprintf
  7822 ;; This function uses a non-reentrant model
  7823 ;;
  7824                           
  7825  09FC                     i1___wmul:	
  7826                           ;psect for function i1___wmul
  7827                           
  7828  09FC                     i1l2494:	
  7829                           ;incstack = 0
  7830                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
  7831                           
  7832  09FC  01F4               	clrf	i1___wmul@product
  7833  09FD  01F5               	clrf	i1___wmul@product+1
  7834  09FE                     i1l2496:
  7835  09FE  1C70               	btfss	i1___wmul@multiplier,0
  7836  09FF  2A01               	goto	u189_21
  7837  0A00  2A02               	goto	u189_20
  7838  0A01                     u189_21:
  7839  0A01  2A08               	goto	i1l585
  7840  0A02                     u189_20:
  7841  0A02                     i1l2498:
  7842  0A02  0872               	movf	i1___wmul@multiplicand,w
  7843  0A03  07F4               	addwf	i1___wmul@product,f
  7844  0A04  1803               	skipnc
  7845  0A05  0AF5               	incf	i1___wmul@product+1,f
  7846  0A06  0873               	movf	i1___wmul@multiplicand+1,w
  7847  0A07  07F5               	addwf	i1___wmul@product+1,f
  7848  0A08                     i1l585:
  7849  0A08  3001               	movlw	1
  7850  0A09                     u190_25:
  7851  0A09  1003               	clrc
  7852  0A0A  0DF2               	rlf	i1___wmul@multiplicand,f
  7853  0A0B  0DF3               	rlf	i1___wmul@multiplicand+1,f
  7854  0A0C  3EFF               	addlw	-1
  7855  0A0D  1D03               	skipz
  7856  0A0E  2A09               	goto	u190_25
  7857  0A0F                     i1l2500:
  7858  0A0F  3001               	movlw	1
  7859  0A10                     u191_25:
  7860  0A10  1003               	clrc
  7861  0A11  0CF1               	rrf	i1___wmul@multiplier+1,f
  7862  0A12  0CF0               	rrf	i1___wmul@multiplier,f
  7863  0A13  3EFF               	addlw	-1
  7864  0A14  1D03               	skipz
  7865  0A15  2A10               	goto	u191_25
  7866  0A16                     i1l2502:
  7867  0A16  0870               	movf	i1___wmul@multiplier,w
  7868  0A17  0471               	iorwf	i1___wmul@multiplier+1,w
  7869  0A18  1D03               	btfss	3,2
  7870  0A19  2A1B               	goto	u192_21
  7871  0A1A  2A1C               	goto	u192_20
  7872  0A1B                     u192_21:
  7873  0A1B  29FE               	goto	i1l2496
  7874  0A1C                     u192_20:
  7875  0A1C                     i1l2504:
  7876  0A1C  0875               	movf	i1___wmul@product+1,w
  7877  0A1D  00F1               	movwf	?i1___wmul+1
  7878  0A1E  0874               	movf	i1___wmul@product,w
  7879  0A1F  00F0               	movwf	?i1___wmul
  7880  0A20                     i1l587:
  7881  0A20  0008               	return
  7882  0A21                     __end_ofi1___wmul:
  7883                           
  7884                           	psect	text36
  7885  0BB3                     __ptext36:	
  7886 ;; *************** function i1___lwdiv *****************
  7887 ;; Defined at:
  7888 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.35\pic\sources\c90\common\lwdiv.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  divisor         2    6[COMMON] unsigned int 
  7891 ;;  dividend        2    8[COMMON] unsigned int 
  7892 ;; Auto vars:     Size  Location     Type
  7893 ;;  quotient        2   11[COMMON] unsigned int 
  7894 ;;  counter         1   13[COMMON] unsigned char 
  7895 ;; Return value:  Size  Location     Type
  7896 ;;                  2    6[COMMON] unsigned int 
  7897 ;; Registers used:
  7898 ;;		wreg, status,2, status,0
  7899 ;; Tracked objects:
  7900 ;;		On entry : 0/0
  7901 ;;		On exit  : 0/0
  7902 ;;		Unchanged: 0/0
  7903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7904 ;;      Params:         4       0       0       0       0
  7905 ;;      Locals:         3       0       0       0       0
  7906 ;;      Temps:          1       0       0       0       0
  7907 ;;      Totals:         8       0       0       0       0
  7908 ;;Total ram usage:        8 bytes
  7909 ;; Hardware stack levels used: 1
  7910 ;; This function calls:
  7911 ;;		Nothing
  7912 ;; This function is called by:
  7913 ;;		_percent
  7914 ;;		i1_sprintf
  7915 ;; This function uses a non-reentrant model
  7916 ;;
  7917                           
  7918  0BB3                     i1___lwdiv:	
  7919                           ;psect for function i1___lwdiv
  7920                           
  7921  0BB3                     i1l2508:	
  7922                           ;incstack = 0
  7923                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  7924                           
  7925  0BB3  01FB               	clrf	i1___lwdiv@quotient
  7926  0BB4  01FC               	clrf	i1___lwdiv@quotient+1
  7927  0BB5                     i1l2510:
  7928  0BB5  0876               	movf	i1___lwdiv@divisor,w
  7929  0BB6  0477               	iorwf	i1___lwdiv@divisor+1,w
  7930  0BB7  1903               	btfsc	3,2
  7931  0BB8  2BBA               	goto	u193_21
  7932  0BB9  2BBB               	goto	u193_20
  7933  0BBA                     u193_21:
  7934  0BBA  2BF2               	goto	i1l2530
  7935  0BBB                     u193_20:
  7936  0BBB                     i1l2512:
  7937  0BBB  01FD               	clrf	i1___lwdiv@counter
  7938  0BBC  0AFD               	incf	i1___lwdiv@counter,f
  7939  0BBD  2BC9               	goto	i1l2518
  7940  0BBE                     i1l2514:
  7941  0BBE  3001               	movlw	1
  7942  0BBF                     u194_25:
  7943  0BBF  1003               	clrc
  7944  0BC0  0DF6               	rlf	i1___lwdiv@divisor,f
  7945  0BC1  0DF7               	rlf	i1___lwdiv@divisor+1,f
  7946  0BC2  3EFF               	addlw	-1
  7947  0BC3  1D03               	skipz
  7948  0BC4  2BBF               	goto	u194_25
  7949  0BC5                     i1l2516:
  7950  0BC5  3001               	movlw	1
  7951  0BC6  00FA               	movwf	??i1___lwdiv
  7952  0BC7  087A               	movf	??i1___lwdiv,w
  7953  0BC8  07FD               	addwf	i1___lwdiv@counter,f
  7954  0BC9                     i1l2518:
  7955  0BC9  1FF7               	btfss	i1___lwdiv@divisor+1,7
  7956  0BCA  2BCC               	goto	u195_21
  7957  0BCB  2BCD               	goto	u195_20
  7958  0BCC                     u195_21:
  7959  0BCC  2BBE               	goto	i1l2514
  7960  0BCD                     u195_20:
  7961  0BCD                     i1l2520:
  7962  0BCD  3001               	movlw	1
  7963  0BCE                     u196_25:
  7964  0BCE  1003               	clrc
  7965  0BCF  0DFB               	rlf	i1___lwdiv@quotient,f
  7966  0BD0  0DFC               	rlf	i1___lwdiv@quotient+1,f
  7967  0BD1  3EFF               	addlw	-1
  7968  0BD2  1D03               	skipz
  7969  0BD3  2BCE               	goto	u196_25
  7970  0BD4  0877               	movf	i1___lwdiv@divisor+1,w
  7971  0BD5  0279               	subwf	i1___lwdiv@dividend+1,w
  7972  0BD6  1D03               	skipz
  7973  0BD7  2BDA               	goto	u197_25
  7974  0BD8  0876               	movf	i1___lwdiv@divisor,w
  7975  0BD9  0278               	subwf	i1___lwdiv@dividend,w
  7976  0BDA                     u197_25:
  7977  0BDA  1C03               	skipc
  7978  0BDB  2BDD               	goto	u197_21
  7979  0BDC  2BDE               	goto	u197_20
  7980  0BDD                     u197_21:
  7981  0BDD  2BE5               	goto	i1l2526
  7982  0BDE                     u197_20:
  7983  0BDE                     i1l2522:
  7984  0BDE  0876               	movf	i1___lwdiv@divisor,w
  7985  0BDF  02F8               	subwf	i1___lwdiv@dividend,f
  7986  0BE0  0877               	movf	i1___lwdiv@divisor+1,w
  7987  0BE1  1C03               	skipc
  7988  0BE2  03F9               	decf	i1___lwdiv@dividend+1,f
  7989  0BE3  02F9               	subwf	i1___lwdiv@dividend+1,f
  7990  0BE4                     i1l2524:
  7991  0BE4  147B               	bsf	i1___lwdiv@quotient,0
  7992  0BE5                     i1l2526:
  7993  0BE5  3001               	movlw	1
  7994  0BE6                     u198_25:
  7995  0BE6  1003               	clrc
  7996  0BE7  0CF7               	rrf	i1___lwdiv@divisor+1,f
  7997  0BE8  0CF6               	rrf	i1___lwdiv@divisor,f
  7998  0BE9  3EFF               	addlw	-1
  7999  0BEA  1D03               	skipz
  8000  0BEB  2BE6               	goto	u198_25
  8001  0BEC                     i1l2528:
  8002  0BEC  3001               	movlw	1
  8003  0BED  02FD               	subwf	i1___lwdiv@counter,f
  8004  0BEE  1D03               	btfss	3,2
  8005  0BEF  2BF1               	goto	u199_21
  8006  0BF0  2BF2               	goto	u199_20
  8007  0BF1                     u199_21:
  8008  0BF1  2BCD               	goto	i1l2520
  8009  0BF2                     u199_20:
  8010  0BF2                     i1l2530:
  8011  0BF2  087C               	movf	i1___lwdiv@quotient+1,w
  8012  0BF3  00F7               	movwf	?i1___lwdiv+1
  8013  0BF4  087B               	movf	i1___lwdiv@quotient,w
  8014  0BF5  00F6               	movwf	?i1___lwdiv
  8015  0BF6                     i1l857:
  8016  0BF6  0008               	return
  8017  0BF7                     __end_ofi1___lwdiv:
  8018                           
  8019                           	psect	text37
  8020  08E1                     __ptext37:	
  8021 ;; *************** function _adcRead *****************
  8022 ;; Defined at:
  8023 ;;		line 101 in file "adc_config.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;		None
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  2    0[COMMON] unsigned int 
  8030 ;; Registers used:
  8031 ;;		wreg
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8037 ;;      Params:         2       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0
  8040 ;;      Totals:         2       0       0       0       0
  8041 ;;Total ram usage:        2 bytes
  8042 ;; Hardware stack levels used: 1
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_isr
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050  08E1                     _adcRead:	
  8051                           ;psect for function _adcRead
  8052                           
  8053  08E1                     i1l2572:	
  8054                           ;incstack = 0
  8055                           ; Regs used in _adcRead: [wreg]
  8056                           
  8057  08E1                     i1l332:	
  8058                           ;adc_config.c: 102:     while(ADCON0bits.GO){}
  8059                           
  8060  08E1  1283               	bcf	3,5	;RP0=0, select bank0
  8061  08E2  1303               	bcf	3,6	;RP1=0, select bank0
  8062  08E3  189F               	btfsc	31,1	;volatile
  8063  08E4  28E6               	goto	u208_21
  8064  08E5  28E7               	goto	u208_20
  8065  08E6                     u208_21:
  8066  08E6  28E1               	goto	i1l332
  8067  08E7                     u208_20:
  8068  08E7                     i1l2574:
  8069                           
  8070                           ;adc_config.c: 103:     return ( (ADRESH << 8) + ADRESL);
  8071  08E7  081E               	movf	30,w	;volatile
  8072  08E8  00F1               	movwf	?_adcRead+1
  8073  08E9  1683               	bsf	3,5	;RP0=1, select bank1
  8074  08EA  1303               	bcf	3,6	;RP1=0, select bank1
  8075  08EB  081E               	movf	30,w	;volatile
  8076  08EC  00F0               	movwf	?_adcRead
  8077  08ED                     i1l335:
  8078  08ED  0008               	return
  8079  08EE                     __end_of_adcRead:
  8080                           
  8081                           	psect	text38
  8082  08D4                     __ptext38:	
  8083 ;; *************** function _Lcd_Clear *****************
  8084 ;; Defined at:
  8085 ;;		line 46 in file "LCD4b.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;		None
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;		None
  8090 ;; Return value:  Size  Location     Type
  8091 ;;                  1    wreg      void 
  8092 ;; Registers used:
  8093 ;;		wreg, status,2, status,0, pclath, cstack
  8094 ;; Tracked objects:
  8095 ;;		On entry : 0/0
  8096 ;;		On exit  : 0/0
  8097 ;;		Unchanged: 0/0
  8098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8099 ;;      Params:         0       0       0       0       0
  8100 ;;      Locals:         0       0       0       0       0
  8101 ;;      Temps:          0       0       0       0       0
  8102 ;;      Totals:         0       0       0       0       0
  8103 ;;Total ram usage:        0 bytes
  8104 ;; Hardware stack levels used: 1
  8105 ;; Hardware stack levels required when called: 2
  8106 ;; This function calls:
  8107 ;;		i1_Lcd_Cmd
  8108 ;; This function is called by:
  8109 ;;		_isr
  8110 ;; This function uses a non-reentrant model
  8111 ;;
  8112                           
  8113  08D4                     _Lcd_Clear:	
  8114                           ;psect for function _Lcd_Clear
  8115                           
  8116  08D4                     i1l2700:	
  8117                           ;incstack = 0
  8118                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  8119                           
  8120                           
  8121                           ;LCD4b.c: 47:     Lcd_Cmd(0x00);
  8122  08D4  3000               	movlw	0
  8123  08D5  120A  158A  2138  120A  158A  	fcall	i1_Lcd_Cmd
  8124                           
  8125                           ;LCD4b.c: 48:     Lcd_Cmd(0x01);
  8126  08DA  3001               	movlw	1
  8127  08DB  120A  158A  2138  120A  158A  	fcall	i1_Lcd_Cmd
  8128  08E0                     i1l369:
  8129  08E0  0008               	return
  8130  08E1                     __end_of_Lcd_Clear:
  8131                           
  8132                           	psect	text39
  8133  0938                     __ptext39:	
  8134 ;; *************** function i1_Lcd_Cmd *****************
  8135 ;; Defined at:
  8136 ;;		line 36 in file "LCD4b.c"
  8137 ;; Parameters:    Size  Location     Type
  8138 ;;  a               1    wreg     unsigned char 
  8139 ;; Auto vars:     Size  Location     Type
  8140 ;;  a               1    2[COMMON] unsigned char 
  8141 ;; Return value:  Size  Location     Type
  8142 ;;                  1    wreg      void 
  8143 ;; Registers used:
  8144 ;;		wreg, status,2, status,0, pclath, cstack
  8145 ;; Tracked objects:
  8146 ;;		On entry : 0/0
  8147 ;;		On exit  : 0/0
  8148 ;;		Unchanged: 0/0
  8149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8150 ;;      Params:         0       0       0       0       0
  8151 ;;      Locals:         1       0       0       0       0
  8152 ;;      Temps:          1       0       0       0       0
  8153 ;;      Totals:         2       0       0       0       0
  8154 ;;Total ram usage:        2 bytes
  8155 ;; Hardware stack levels used: 1
  8156 ;; Hardware stack levels required when called: 1
  8157 ;; This function calls:
  8158 ;;		i1_Lcd_Port
  8159 ;; This function is called by:
  8160 ;;		_Lcd_Clear
  8161 ;; This function uses a non-reentrant model
  8162 ;;
  8163                           
  8164  0938                     i1_Lcd_Cmd:	
  8165                           ;psect for function i1_Lcd_Cmd
  8166                           
  8167                           
  8168                           ;incstack = 0
  8169                           ; Regs used in i1_Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  8170                           ;i1Lcd_Cmd@a stored from wreg
  8171  0938  00F2               	movwf	i1Lcd_Cmd@a
  8172  0939                     i1l2484:
  8173                           
  8174                           ;LCD4b.c: 36: void Lcd_Cmd(char a);LCD4b.c: 37: {;LCD4b.c: 38:     PORTBbits.RB2 = 0;
  8175  0939  1283               	bcf	3,5	;RP0=0, select bank0
  8176  093A  1303               	bcf	3,6	;RP1=0, select bank0
  8177  093B  1106               	bcf	6,2	;volatile
  8178  093C                     i1l2486:
  8179                           
  8180                           ;LCD4b.c: 39:     Lcd_Port(a);
  8181  093C  0872               	movf	i1Lcd_Cmd@a,w
  8182  093D  120A  158A  21DA  120A  158A  	fcall	i1_Lcd_Port
  8183  0942                     i1l2488:
  8184                           
  8185                           ;LCD4b.c: 40:     RB3 = 1;
  8186  0942  1283               	bcf	3,5	;RP0=0, select bank0
  8187  0943  1303               	bcf	3,6	;RP1=0, select bank0
  8188  0944  1586               	bsf	6,3	;volatile
  8189  0945                     i1l2490:
  8190                           
  8191                           ;LCD4b.c: 41:     _delay((unsigned long)((4)*(1000000/4000.0)));
  8192  0945  30C7               	movlw	199
  8193  0946  00F1               	movwf	??i1_Lcd_Cmd
  8194  0947                     u380_27:
  8195  0947  2948               	nop2
  8196  0948  0BF1               	decfsz	??i1_Lcd_Cmd,f
  8197  0949  2947               	goto	u380_27
  8198  094A  294B               	nop2
  8199  094B  294C               	nop2
  8200  094C                     i1l2492:
  8201                           
  8202                           ;LCD4b.c: 42:     RB3 = 0;
  8203  094C  1283               	bcf	3,5	;RP0=0, select bank0
  8204  094D  1303               	bcf	3,6	;RP1=0, select bank0
  8205  094E  1186               	bcf	6,3	;volatile
  8206  094F                     i1l366:
  8207  094F  0008               	return
  8208  0950                     __end_ofi1_Lcd_Cmd:
  8209                           
  8210                           	psect	text40
  8211  09DA                     __ptext40:	
  8212 ;; *************** function i1_Lcd_Port *****************
  8213 ;; Defined at:
  8214 ;;		line 13 in file "LCD4b.c"
  8215 ;; Parameters:    Size  Location     Type
  8216 ;;  a               1    wreg     unsigned char 
  8217 ;; Auto vars:     Size  Location     Type
  8218 ;;  a               1    0[COMMON] unsigned char 
  8219 ;; Return value:  Size  Location     Type
  8220 ;;                  1    wreg      void 
  8221 ;; Registers used:
  8222 ;;		wreg
  8223 ;; Tracked objects:
  8224 ;;		On entry : 0/0
  8225 ;;		On exit  : 0/0
  8226 ;;		Unchanged: 0/0
  8227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8228 ;;      Params:         0       0       0       0       0
  8229 ;;      Locals:         1       0       0       0       0
  8230 ;;      Temps:          0       0       0       0       0
  8231 ;;      Totals:         1       0       0       0       0
  8232 ;;Total ram usage:        1 bytes
  8233 ;; Hardware stack levels used: 1
  8234 ;; This function calls:
  8235 ;;		Nothing
  8236 ;; This function is called by:
  8237 ;;		i1_Lcd_Cmd
  8238 ;; This function uses a non-reentrant model
  8239 ;;
  8240                           
  8241  09DA                     i1_Lcd_Port:	
  8242                           ;psect for function i1_Lcd_Port
  8243                           
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in i1_Lcd_Port: [wreg]
  8247                           ;i1Lcd_Port@a stored from wreg
  8248  09DA  00F0               	movwf	i1Lcd_Port@a
  8249  09DB                     i1l2328:
  8250                           
  8251                           ;LCD4b.c: 13: void Lcd_Port(char a);LCD4b.c: 14: {;LCD4b.c: 15:     if (a & 1)
  8252  09DB  1C70               	btfss	i1Lcd_Port@a,0
  8253  09DC  29DE               	goto	u154_21
  8254  09DD  29DF               	goto	u154_20
  8255  09DE                     u154_21:
  8256  09DE  29E3               	goto	i1l355
  8257  09DF                     u154_20:
  8258  09DF                     i1l2330:
  8259                           
  8260                           ;LCD4b.c: 16:         RB4 = 1;
  8261  09DF  1283               	bcf	3,5	;RP0=0, select bank0
  8262  09E0  1303               	bcf	3,6	;RP1=0, select bank0
  8263  09E1  1606               	bsf	6,4	;volatile
  8264  09E2  29E6               	goto	i1l356
  8265  09E3                     i1l355:	
  8266                           ;LCD4b.c: 17:     else
  8267                           
  8268                           
  8269                           ;LCD4b.c: 18:         RB4 = 0;
  8270  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  8271  09E4  1303               	bcf	3,6	;RP1=0, select bank0
  8272  09E5  1206               	bcf	6,4	;volatile
  8273  09E6                     i1l356:
  8274                           
  8275                           ;LCD4b.c: 20:     if (a & 2)
  8276  09E6  1CF0               	btfss	i1Lcd_Port@a,1
  8277  09E7  29E9               	goto	u155_21
  8278  09E8  29EA               	goto	u155_20
  8279  09E9                     u155_21:
  8280  09E9  29EC               	goto	i1l357
  8281  09EA                     u155_20:
  8282  09EA                     i1l2332:
  8283                           
  8284                           ;LCD4b.c: 21:         RB5 = 1;
  8285  09EA  1686               	bsf	6,5	;volatile
  8286  09EB  29ED               	goto	i1l358
  8287  09EC                     i1l357:	
  8288                           ;LCD4b.c: 22:     else
  8289                           
  8290                           
  8291                           ;LCD4b.c: 23:         RB5 = 0;
  8292  09EC  1286               	bcf	6,5	;volatile
  8293  09ED                     i1l358:
  8294                           
  8295                           ;LCD4b.c: 25:     if (a & 4)
  8296  09ED  1D70               	btfss	i1Lcd_Port@a,2
  8297  09EE  29F0               	goto	u156_21
  8298  09EF  29F1               	goto	u156_20
  8299  09F0                     u156_21:
  8300  09F0  29F3               	goto	i1l359
  8301  09F1                     u156_20:
  8302  09F1                     i1l2334:
  8303                           
  8304                           ;LCD4b.c: 26:         RB6 = 1;
  8305  09F1  1706               	bsf	6,6	;volatile
  8306  09F2  29F4               	goto	i1l360
  8307  09F3                     i1l359:	
  8308                           ;LCD4b.c: 27:     else
  8309                           
  8310                           
  8311                           ;LCD4b.c: 28:         RB6 = 0;
  8312  09F3  1306               	bcf	6,6	;volatile
  8313  09F4                     i1l360:
  8314                           
  8315                           ;LCD4b.c: 30:     if (a & 8)
  8316  09F4  1DF0               	btfss	i1Lcd_Port@a,3
  8317  09F5  29F7               	goto	u157_21
  8318  09F6  29F8               	goto	u157_20
  8319  09F7                     u157_21:
  8320  09F7  29FA               	goto	i1l361
  8321  09F8                     u157_20:
  8322  09F8                     i1l2336:
  8323                           
  8324                           ;LCD4b.c: 31:         RB7 = 1;
  8325  09F8  1786               	bsf	6,7	;volatile
  8326  09F9  29FB               	goto	i1l363
  8327  09FA                     i1l361:	
  8328                           ;LCD4b.c: 32:     else
  8329                           
  8330                           
  8331                           ;LCD4b.c: 33:         RB7 = 0;
  8332  09FA  1386               	bcf	6,7	;volatile
  8333  09FB                     i1l363:
  8334  09FB  0008               	return
  8335  09FC                     __end_ofi1_Lcd_Port:
  8336  007E                     btemp	set	126	;btemp
  8337  007E                     wtemp0	set	126
  8338                           
  8339                           	psect	idloc
  8340                           
  8341                           ;Config register IDLOC0 @ 0x2000
  8342                           ;	unspecified, using default values
  8343  2000                     	org	8192
  8344  2000  3FFF               	dw	16383
  8345                           
  8346                           ;Config register IDLOC1 @ 0x2001
  8347                           ;	unspecified, using default values
  8348  2001                     	org	8193
  8349  2001  3FFF               	dw	16383
  8350                           
  8351                           ;Config register IDLOC2 @ 0x2002
  8352                           ;	unspecified, using default values
  8353  2002                     	org	8194
  8354  2002  3FFF               	dw	16383
  8355                           
  8356                           ;Config register IDLOC3 @ 0x2003
  8357                           ;	unspecified, using default values
  8358  2003                     	org	8195
  8359  2003  3FFF               	dw	16383
  8360                           
  8361                           	psect	config
  8362                           
  8363                           ;Config register CONFIG1 @ 0x2007
  8364                           ;	Oscillator Selection bits
  8365                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  8366                           ;	Watchdog Timer Enable bit
  8367                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  8368                           ;	Power-up Timer Enable bit
  8369                           ;	PWRTE = OFF, PWRT disabled
  8370                           ;	RE3/MCLR pin function select bit
  8371                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  8372                           ;	Code Protection bit
  8373                           ;	CP = OFF, Program memory code protection is disabled
  8374                           ;	Data Code Protection bit
  8375                           ;	CPD = OFF, Data memory code protection is disabled
  8376                           ;	Brown Out Reset Selection bits
  8377                           ;	BOREN = OFF, BOR disabled
  8378                           ;	Internal External Switchover bit
  8379                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  8380                           ;	Fail-Safe Clock Monitor Enabled bit
  8381                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  8382                           ;	Low Voltage Programming Enable bit
  8383                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  8384                           ;	In-Circuit Debugger Mode bit
  8385                           ;	DEBUG = 0x1, unprogrammed default
  8386  2007                     	org	8199
  8387  2007  20D4               	dw	8404
  8388                           
  8389                           ;Config register CONFIG2 @ 0x2008
  8390                           ;	Brown-out Reset Selection bit
  8391                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  8392                           ;	Flash Program Memory Self Write Enable bits
  8393                           ;	WRT = OFF, Write protection off
  8394  2008                     	org	8200
  8395  2008  3FFF               	dw	16383

Data Sizes:
    Strings     52
    Constant    10
    Data        3
    BSS         101
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     28      56
    BANK1            80     14      80
    BANK3            96     17      27
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_7(CODE[3]), STR_6(CODE[3]), STR_5(CODE[5]), STR_4(CODE[5]), 
		 -> STR_3(CODE[5]), STR_2(CODE[6]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> HS_flag_str(BANK1[10]), RTC_hor_str(BANK1[10]), RTC_min_str(BANK1[10]), RTC_sec_str(BANK1[10]), 
		 -> temp_str(BANK1[10]), HS_str(BANK1[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK3[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 10
		 -> STR_22(CODE[2]), STR_21(CODE[6]), STR_20(CODE[3]), STR_19(CODE[2]), 
		 -> STR_18(CODE[6]), STR_17(CODE[3]), STR_16(CODE[2]), STR_15(CODE[4]), 
		 -> STR_14(CODE[5]), STR_13(CODE[2]), STR_12(CODE[4]), STR_11(CODE[3]), 
		 -> STR_10(CODE[2]), STR_9(CODE[2]), STR_8(CODE[5]), RTC_hor_str(BANK1[10]), 
		 -> RTC_min_str(BANK1[10]), temp_str(BANK1[10]), HS_str(BANK1[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_sprintf->i1___lwdiv
    i1___lwmod->i1___lwdiv
    _percent->i1___lwdiv
    i1___lwdiv->i1___wmul
    _Lcd_Clear->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    _isr->i1_sprintf
    i1_sprintf->i1___lwmod

Critical Paths under _main in BANK1

    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _binTodec->___bmul
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_sprintf

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   10670
                                             15 BANK3      2     2      0
                    _I2C_Master_Init
                    _I2C_Master_Read
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                              _adcGo
                           _binTodec
                            _initAdc
                        _initOscFreq
                           _initTmr0
                              _setup
                            _sprintf
                     _usartDataWrite
                  _usartInitTransmit
 ---------------------------------------------------------------------------------
 (1) _usartInitTransmit                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _usartDataWrite                                       4     4      0      31
                                              0 BANK1      4     4      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             23    20      3    3639
                                              0 BANK3     15    12      3
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              2     2      0      99
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     426
                                              0 BANK1      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                              8 BANK1      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     531
                                              0 BANK1      8     4      4
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initTmr0                                             2     0      2     121
                                              0 BANK1      2     0      2
 ---------------------------------------------------------------------------------
 (1) _initOscFreq                                          3     3      0      31
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _initAdc                                              5     3      2     273
                                              0 BANK1      5     3      2
 ---------------------------------------------------------------------------------
 (1) _binTodec                                             4     4      0     288
                                              4 BANK1      4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     226
                                              0 BANK1      4     3      1
 ---------------------------------------------------------------------------------
 (1) _adcGo                                                2     2      0      31
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2    2094
                                              5 BANK1      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     254
                                              1 BANK1      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       7     6      1    2255
                                              3 BANK1      7     6      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              3 BANK1      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     155
                                              1 BANK1      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              0 BANK1      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Write                                     2     0      2     661
                                              0 BANK1      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Read                                      6     4      2     425
                                              0 BANK1      6     4      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     542
                                              0 BANK3      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     421
                                              0 BANK1     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  7     7      0    2563
                                             21 BANK0      7     7      0
                          _Lcd_Clear
                            _adcRead
                            _percent
                          _tmr0Reset
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (5) i1_sprintf                                           23    20      3    1675
                                              6 BANK0     15    12      3
                          i1___lwdiv
                          i1___lwmod
                           i1___wmul
                          i1_isdigit
 ---------------------------------------------------------------------------------
 (6) i1_isdigit                                            2     2      0      68
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            6     2      4     211
                                              0 BANK0      6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (5) _tmr0Reset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _percent                                              6     0      6     778
                                              0 BANK0      6     0      6
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (6) i1___wmul                                             6     2      4     196
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) i1___lwdiv                                            8     4      4     266
                                              6 COMMON     8     4      4
                           i1___wmul (ARG)
 ---------------------------------------------------------------------------------
 (5) _adcRead                                              2     0      2       0
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (5) _Lcd_Clear                                            0     0      0     110
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Cmd                                            2     2      0     110
                                              1 COMMON     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (7) i1_Lcd_Port                                           1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _I2C_Master_Read
     _I2C_Master_Wait
   _I2C_Master_RepeatedStart
     _I2C_Master_Wait
   _I2C_Master_Start
     _I2C_Master_Wait
   _I2C_Master_Stop
     _I2C_Master_Wait
   _I2C_Master_Write
     _I2C_Master_Wait
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _adcGo
   _binTodec
     ___bmul
   _initAdc
   _initOscFreq
   _initTmr0
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     ___wmul
     _isdigit
   _usartDataWrite
   _usartInitTransmit

 _isr (ROOT)
   _Lcd_Clear
     i1_Lcd_Cmd
       i1_Lcd_Port
   _adcRead
   _percent
     i1___lwdiv
       i1___wmul (ARG)
     i1___wmul
   _tmr0Reset
   i1_sprintf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)
     i1___wmul
     i1_isdigit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60     11      1B       9       28.1%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      E      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     1C      38       5       70.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      B1      12        0.0%
ABS                  0      0      B1       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.35 build 20211206165544 
Symbol Table                                                                                   Fri Sep 30 12:09:52 2022

                               _i 0048                                 pc 0002                    ___bmul@product 00E4  
                     _SSPSTATbits 0094                                fsr 0004               ___wmul@multiplicand 00E4  
                i1___wmul@product 0074                               l210 099E                               l204 0A71  
                             l305 0CD2                               l233 0982                               l180 025E  
                             l309 0968                               l253 0AFC                               l237 09D9  
                             l422 0C3C                               l431 08BE                               l440 08D3  
                             l360 0B26                               l425 08EE                               l361 0B30  
                             l185 043D                               l434 08B5                               l258 0AFD  
                             l443 0AC4                               l363 0B33                               l355 0B09  
                             l611 0937                               l428 08FA                               l444 0AC5  
                             l356 0B0C                               l621 07BF                               l445 0ACA  
                             l437 08C7                               l357 0B16                               l381 0BB2  
                             l269 0E23                               l358 0B19                               l366 09BB  
                             l359 0B23                               l375 0DD4                               l279 0E2B  
                             l378 0D7D                               l546 04DD                               l387 0D26  
                             l564 05C5                               l581 06B0                               l585 0A2F  
                             l587 0A47                               l857 0C82                               l867 07FB  
                             _GIE 005F                               _RB3 0033                               _RB4 0034  
                             _RB5 0035                               _RB6 0036                               _RB7 0037  
                     _RTC_hor_str 00A6                               _isr 06B1                       _RTC_min_str 00B0  
                             fsr0 0004                               indf 0000                       _RTC_sec_str 00BA  
                            l1038 0920                              l4000 009F                              l4010 00D5  
                            l4002 00AA                              l4100 031A                              l4020 0112  
                            l4012 00E0                              l4004 00AF                              l4110 035E  
                            l4102 0323                              l4030 0166                              l4022 0117  
                            l4014 00F8                              l4006 00BA                              l4120 038F  
                            l4112 0369                              l4104 032C                              l4040 01B4  
                            l4032 016B                              l4024 0122                              l4016 00FD  
                            l4008 00D0                              l4130 03E8                              l4122 039D  
                            l4114 0370                              l4106 0337                              l4050 020F  
                            l4042 01CC                              l4034 0176                              l4026 0139  
                            l4018 0108                              l3500 08EE                              l4140 041B  
                            l4132 03F3                              l4124 03A8                              l4116 037E  
                            l4108 0350                              l4060 0248                              l4052 0220  
                            l4044 01E4                              l4036 018C                              l4028 0150  
                            l3502 08F4                              l3510 091D                              l4150 0458  
                            l4142 0423                              l4134 03FB                              l4126 03C1  
                            l4118 038A                              l4070 0276                              l4062 0251  
                            l4054 0229                              l4046 01FC                              l4038 01A0  
                            l3600 07D2                              l3520 0A29                              l3512 091F  
                            l3504 0910                              l4160 04AB                              l4152 0471  
                            l4144 0431                              l4136 0409                              l4128 03CF  
                            l4080 029E                              l4072 027F                              l4064 0256  
                            l4056 0231                              l4048 0207                              l3530 0924  
                            l3610 07F1                              l3602 07D6                              l3522 0A36  
                            l3506 0911                              l4162 04B3                              l4154 047F  
                            l4146 043F                              l4138 0415                              l4090 02D1  
                            l4082 02A9                              l4074 0288                              l4066 0267  
                            l4058 0241                              l3460 0B01                              l3540 0936  
                            l3532 0925                              l3604 07DA                              l3612 07F7  
                            l3524 0A3D                              l3516 0A21                              l3508 0917  
                            l3700 0620                              l3620 04CD                              l4156 0498  
                            l4148 044D                              l4084 02B4                              l4092 02E7  
                            l4076 0290                              l4068 026D                              l3550 077A  
                            l3462 0B05                              l3470 09A2                              l3534 0929  
                            l3606 07E4                              l3526 0A43                              l3518 0A25  
                            l3702 0624                              l3710 0641                              l3630 04E2  
                            l3622 04D4                              l4158 04A3                              l4094 02F0  
                            l4086 02BD                              l4078 0295                              l3560 07A8  
                            l3552 077E                              l3544 0758                              l3464 0B12  
                            l3472 09A5                              l3480 0B73                              l3536 092D  
                            l3800 0DD6                              l3608 07EA                              l3712 0646  
                            l3704 0630                              l4360 0567                              l3640 053F  
                            l3632 04F5                              l3624 04D9                              l3720 069A  
                            l3616 04C2                              l4096 02F9                              l4088 02C6  
                            l3562 07B1                              l3554 0787                              l3546 076A  
                            l3466 0B1F                              l3474 09AD                              l3490 0B9A  
                            l3482 0B7D                              l3538 092F                              l4362 0E04  
                            l3810 0DED                              l3802 0DD9                              l3570 0C41  
                            l3714 0686                              l3706 0636                              l3650 057A  
                            l3722 06AC                              l3642 0543                              l3634 0505  
                            l3626 04DE                              l3618 04C7                              l4098 0304  
                            l3556 0799                              l3548 076D                              l3564 07B7  
                            l3900 0C3A                              l3468 0B2C                              l3476 09B0  
                            l3492 0B9D                              l3484 0B80                              l3820 0E27  
                            l4364 0E1E                              l3812 0DF2                              l3804 0DDE  
                            l3740 0A4C                              l3580 0C59                              l3572 0C47  
                            l3716 068D                              l3708 063D                              l3652 057E  
                            l3636 0509                              l3558 07A7                              l3902 0C3B  
                            l3910 08B6                              l3478 09B8                              l3494 0BA5  
                            l3486 0B90                              l4366 0AEE                              l3814 0DF7  
                            l3806 0DE3                              l3750 0A56                              l3742 0A4D  
                            l3582 0C6A                              l3574 0C4A                              l3590 0C7E  
                            l3718 0691                              l3670 05B3                              l3654 0582  
                            l3638 052C                              l3646 0553                              l4358 04F0  
                            l3830 0969                              l3920 08B2                              l3912 08BB  
                            l3496 0BA8                              l3488 0B93                              l3904 0953  
                            l4368 0CC4                              l3840 0C86                              l3808 0DE8  
                            l3760 0A64                              l3752 0A57                              l3744 0A51  
                            l3584 0C70                              l3576 0C51                              l3568 0C3D  
                            l3680 05E0                              l3672 05B9                              l3664 058D  
                            l3656 0586                              l3648 0572                              l3832 0977  
                            l3930 0ABA                              l3922 0A9D                              l3914 08C8  
                            l3498 0BAF                              l3906 0963                              l3850 0CA2  
                            l3842 0C8C                              l3818 0DFA                              l3770 0A6E  
                            l3762 0A65                              l3754 0A58                              l3746 0A53  
                            l3738 0A48                              l3586 0C71                              l3578 0C55  
                            l3594 07C0                              l3690 05FB                              l3682 05E4  
                            l3674 05BF                              l3658 058B                              l3834 097B  
                            l3932 0AC2                              l3924 0AA2                              l3940 08C4  
                            l3916 08CD                              l3908 0967                              l3852 0CA7  
                            l3860 0CBA                              l3844 0C96                              l3780 0AD4  
                            l3772 0A6F                              l3764 0A6B                              l3756 0A59  
                            l3748 0A54                              l3588 0C78                              l3596 07C8  
                            l3692 0602                              l3684 05EA                              l3676 05D0  
                            l3668 05A9                              l3836 097C                              l3934 0AC6  
                            l3926 0AAA                              l3918 08AD                              l3870 0D38  
                            l3950 0D97                              l3942 0986                              l3854 0CAE  
                            l3846 0C97                              l3782 0AD9                              l3790 0AE6  
                            l3774 0A70                              l3766 0A6C                              l3758 0A60  
                            l3598 07CB                              l3694 0606                              l3686 05F1  
                            l3678 05DC                              l3838 097F                              l3928 0AB5  
                            l3880 0D59                              l3872 0D46                              l3960 0DC1  
                            l3952 0D9C                              l3856 0CB5                              l3848 0C9A  
                            l3784 0ADE                              l3776 0ACE                              l3768 0A6D  
                            l3688 05F5                              l3696 0613                              l3938 08BF  
                            l3890 0D77                              l3882 0D5F                              l3874 0D4C  
                            l3866 0D27                              l3962 0DC6                              l3954 0DA2  
                            l3946 0D81                              l3970 0CFC                              l3786 0AE1  
                            l3778 0ACF                              l3698 0619                              l3892 0BF7  
                            l3884 0D65                              l3876 0D4D                              l3868 0D2D  
                            l3964 0DCC                              l3948 0D86                              l3956 0DAB  
                            l3972 0D04                              l3980 0045                              l3894 0BFB  
                            l3886 0D6B                              l3878 0D53                              l3958 0DB0  
                            l3966 0CD3                              l3798 0DD5                              l3974 09BF  
                            l3990 006F                              l3982 004A                              l3896 0BFE  
                            l3888 0D71                              l3968 0CD8                              l3976 09CD  
                            l3992 007E                              l3984 0050                              _ADIF 0066  
                            l3898 0C39                              l3978 09D3                              l3994 0084  
                            l3986 0060                              l3996 0089                              l3988 006A  
                            ?_isr 0070                              l3998 0094                              STR_1 0846  
                            STR_2 081A                              STR_3 0836                              STR_4 0836  
                            STR_5 0836                              STR_6 0846                              STR_7 0846  
                            STR_8 082C                              STR_9 081E                              _T0IF 005A  
                            u3010 0A43                              u3011 0A42                              u3100 07B7  
                            u3020 0929                              u3101 07B6                              u3021 0928  
                            u3005 0A37                              u3030 0936                              u3110 0C47  
                            u3031 0935                              u3111 0C46                              u3040 076A  
                            u3200 07DA                              u3041 0769                              u3201 07D9  
                            u3130 0C59                              u3210 07E4                              u3131 0C58  
                            u3211 07E3                              u3060 077E                              u3300 05B9  
                            u3061 077D                              u3125 0C4B                              u3301 05B8  
                            u3150 0C6A                              u3230 07F7                              u3310 05BF  
                            u3055 076F                              u3151 0C69                              u3231 07F6  
                            u3215 07E0                              u3311 05BE                              u3080 0799  
                            u3400 069A                              u3320 05D0                              u3240 04CD  
                            u3081 0798                              u3145 0C5A                              u3225 07EB  
                            u3401 0699                              u3321 05CF                              u3241 04CC  
                            u3170 0C7E                              u3410 06AC                              u3330 05E4  
                            u3250 0505                              u3075 0780                              u3171 0C7D  
                            u3155 0C66                              u3411 06AB                              u3331 05E3  
                            u3251 0504                              u3420 0C0E                              u3500 0CE4  
                            u3180 07C8                              u3340 05EA                              u3260 0553  
                            u3085 0795                              u3165 0C72                              u3181 07C7  
                            u3341 05E9                              u3325 05CC                              u3261 0552  
                            u3510 0D0E                              u3430 0967                              u3350 05FB  
                            u3270 0582                              u3095 07A9                              u3431 0966  
                            u3351 05FA                              u3271 0581                              u3440 0AC2  
                            u3520 0D26                              u3360 0612                              u3280 05A8  
                            u3600 027F                              u3425 0C09                              u3441 0AC1  
                            u3521 0D25                              u3361 0611                              u3281 05A7  
                            u3601 027E                              u3370 0619                              u3290 05B3  
                            u3530 09D3                              u3610 0288                              u3195 07CC  
                            u3371 0618                              u3291 05B2                              u3531 09D2  
                            u3611 0287                              u2900 0B12                              u3460 0D86  
                            u3380 0630                              u3700 041B                              u3620 0295  
                            u3540 0207                              u2901 0B11                              u3461 0D85  
                            u3381 062F                              u3285 05A4                              u3701 041A  
                            u3621 0294                              u3541 0206                              u2910 0B1F  
                            u3390 0636                              u3630 02B4                              u3550 0229  
                            u2911 0B1E                              u3455 0990                              u3391 0635  
                            u3631 02B3                              u3551 0228                              u2920 0B2C  
                            u3480 0DB0                              u3640 02BD                              u3560 0248  
                            u2921 0B2B                              u3481 0DAF                              u3641 02BC  
                            u3561 0247                              u3650 02F0                              u3570 0256  
                            u3475 0D8E                              u3651 02EF                              u3571 0255  
                            _PEIE 005E                              u2940 08F4                              u3660 0323  
                            u3580 0267                              u2941 08F3                              u3661 0322  
                            u3581 0266                              u3717 00DB                              u2950 08FA  
                            u3670 0370                              u3590 026D                              u2951 08F9  
                            u3495 0DB8                              u2935 0B85                              u3671 036F  
                            u3591 026C                              u3727 0171                              u2960 0917  
                            u3680 038F                              _RBIF 0058                              u2961 0916  
                            u3737 09C7                              u3681 038E                              u2890 0B05  
                            u2970 091D                              u3690 03FB                              u2891 0B04  
                            u3747 0C9E                              u2971 091C                              u3691 03FA  
                            u2980 0A29                              u3757 0B97                              u2981 0A28  
                            u3767 0BAC                              u3777 0D33                              u3787 0D42  
                            u2995 0A30                              u3797 09B4                              _TMR0 0001  
                            _TXIF 0064                              _WPUB 0095                              _Fosc 0057  
                    adcGo@channel 00E3                              _data 00A4                 ?_Lcd_Write_String 00E7  
__end_of_I2C_Master_RepeatedStart 08B6                              _disp 004C                              _cont 0054  
                            _main 0045                              btemp 007E                              _spst 004D  
                            start 0012                ??_Lcd_Write_String 00E9                   __end_of_Lcd_Cmd 09BC  
               ___bmul@multiplier 00E5                      ?_initOscFreq 0070                             ??_isr 0035  
                ?_I2C_Master_Init 0190                  ?_I2C_Master_Read 00E2                  ?_I2C_Master_Wait 0070  
                ?_I2C_Master_Stop 0070                             ?_main 0070                   __end_of_adcRead 08EE  
                           STR_10 081E                             STR_11 083C                             STR_20 0843  
                           STR_12 083B                             STR_13 084C                             STR_21 0820  
                           STR_22 0824                             STR_14 0831                             STR_15 083F  
                           STR_16 081E                             STR_17 0849                             STR_18 0826  
                           STR_19 081E                             _ANSEL 0188                   __end_of___lldiv 07C0  
                 __end_of___lwdiv 0C83                             i1l207 0A9C                             i1l170 074D  
                           i1l163 0725                             i1l332 08E1                             i1l335 08ED  
                           i1l167 0737                             i1l360 09F4                             i1l361 09FA  
                 __end_of___lwmod 07FC                             i1l282 08A4                             i1l363 09FB  
                           i1l355 09E3                             i1l356 09E6                             i1l357 09EC  
                           i1l358 09ED                             i1l366 094F                             i1l359 09F3  
                           i1l369 08E0                             i1l546 0E4A                             i1l564 0F24  
                           i1l581 0FFF                             i1l585 0A08                             i1l587 0A20  
                           i1l857 0BF6                             i1l867 0B6F                             _SPBRG 0099  
                           _PORTA 0005                             _PORTB 0006                             _PORTD 0008  
                           _TRISA 0085                             _TRISB 0086                             _TRISD 0088  
                           _SSPIE 0463                             _SSPIF 0063                             _TXREG 0019  
                      i1isdigit@c 0071                       ?i1_Lcd_Port 0070                             _adcGo 0950  
              i1___lwmod@dividend 0022                   __end_of_initAdc 0CD3                             _cont1 0044  
                 __end_of_dpowers 081A                             _milis 0053                   __end_of_isdigit 0921  
                           _setup 0A48                             _pulse 0052                   __end_of_percent 0A9D  
                           pclath 000A                  __end_ofi1___wmul 0A21                             status 0003  
             i1___wmul@multiplier 0070                             wtemp0 007E                   __end_of_sprintf 06B1  
                __end_of_Lcd_Init 0D7E                  __end_of_Lcd_Port 0B34                   __initialization 0015  
                    __end_of_main 04BF                        i1sprintf@c 0034                        i1sprintf@f 0026  
                          ??_main 019F                 ?_I2C_Master_Start 0070                 ?_I2C_Master_Write 00E2  
                          ?_adcGo 0070                ??_I2C_Master_Start 00E2                ??_I2C_Master_Write 00E4  
                          _ADRESH 001E                            _ADRESL 009E                            ?_setup 0070  
                          _ANSELH 0189                            i1l1038 090C                            i1l3000 0F18  
                          i1l3010 0F43                            i1l3002 0F1E                            i1l3020 0F61  
                          i1l3012 0F49                            i1l3004 0F2F                            i1l3100 074C  
                          i1l3030 0F83                            i1l3022 0F65                            i1l3014 0F50  
                          i1l3006 0F3B                            u200_20 0B3C                            i1l3040 0FA5  
                          i1l3032 0F8F                            i1l3016 0F54                            i1l3024 0F72  
                          i1l3008 0F3F                            u200_21 0B3B                            i1l2330 09DF  
                          i1l3042 0FD5                            i1l3034 0F95                            i1l3026 0F78  
                          i1l3018 0F5A                            i1l3050 0FFB                            i1l2332 09EA  
                          i1l2500 0A0F                            i1l3044 0FDC                            i1l3036 0F9C  
                          i1l3028 0F7F                            i1l2334 09F1                            i1l2510 0BB5  
                          i1l2502 0A16                            i1l3046 0FE0                            i1l3038 0FA0  
                          i1l3070 06D3                            i1l3062 06B1                            i1l2336 09F8  
                          i1l2328 09DB                            i1l2520 0BCD                            i1l2512 0BBB  
                          i1l2504 0A1C                            i1l3048 0FE9                            i1l3080 0709  
                          i1l3064 06B5                            i1l3072 06D8                            i1l2522 0BDE  
                          i1l2514 0BBE                            i1l2530 0BF2                            i1l3090 0729  
                          i1l3082 071A                            i1l3074 06DE                            i1l3066 06C3  
                          i1l2700 08D4                            i1l2524 0BE4                            i1l2516 0BC5  
                          i1l2508 0BB3                            i1l2540 0B46                            i1l3092 0733  
                          i1l3076 06E7                            i1l3084 071D                            i1l3068 06CD  
                          u201_25 0B40                            i1l2526 0BE5                            i1l2518 0BC9  
                          i1l2550 0B65                            i1l2542 0B4A                            i1l2534 0B34  
                          i1l3086 0721                            i1l3078 06F2                            i1l2528 0BEC  
                          i1l2544 0B4E                            u202_20 0B4E                            i1l2536 0B3C  
                          i1l2552 0B6B                            i1l2560 0903                            i1l3096 073B  
                          u202_21 0B4D                            i1l2490 0945                            i1l2570 08A0  
                          i1l2546 0B58                            i1l2538 0B3F                            i1l2562 0909  
                          i1l3098 0740                            i1l2492 094C                            i1l2484 0939  
                          i1l2572 08E1                            i1l2548 0B5E                            i1l2564 090B  
                          i1l2556 08FC                            i1l2486 093C                            i1l2574 08E7  
                          i1l2494 09FC                            i1l2558 08FD                            i1l2488 0942  
                          i1l2496 09FE                            i1l2568 089F                            u203_20 0B58  
                          u203_21 0B57                            i1l2498 0A02                            i1l2578 0A72  
                          i1l4370 0E5D                            i1l4372 0EC6                            u203_25 0B54  
                          i1l2950 0E41                            i1l2960 0E62                            i1l2952 0E46  
                          i1l2944 0E2F                            i1l2970 0EA2                            i1l2962 0E72  
                          i1l2954 0E4B                            i1l2946 0E34                            i1l2980 0EDD  
                          i1l2964 0E76                            i1l2948 0E3A                            u204_25 0B5F  
                          i1l2982 0EE1                            i1l2966 0E8B                            i1l2974 0EB2  
                          i1l2958 0E4F                            u205_20 0B6B                            i1l2992 0EEC  
                          i1l2984 0EE5                            i1l2976 0ED1                            i1l2968 0E9E  
                          u205_21 0B6A                            i1l2986 0EEA                            i1l2978 0ED9  
                          i1l2996 0F08                            i1l2998 0F12                            u206_20 0903  
                          u206_21 0902                            u207_20 0909                            u207_21 0908  
                          u208_20 08E7                            u240_20 0E72                            u208_21 08E6  
                          u240_21 0E71                            u241_20 0EB2                            u241_21 0EB1  
                          u154_20 09DF                            u250_20 0F5A                            u242_20 0EE1  
                          u154_21 09DE                            u250_21 0F59                            u242_21 0EE0  
                          u155_20 09EA                            u251_20 0F71                            u243_20 0F07  
                          u155_21 09E9                            u251_21 0F70                            u243_21 0F06  
                          u243_25 0F03                            u156_20 09F1                            u252_20 0F78  
                          u244_20 0F12                            u260_20 06CA                            u156_21 09F0  
                          u252_21 0F77                            u244_21 0F11                            u157_20 09F8  
                          u253_20 0F8F                            u245_20 0F18                            u261_20 06DE  
                          u157_21 09F7                            u253_21 0F8E                            u245_21 0F17  
                          u261_21 06DD                            u254_20 0F95                            u246_20 0F1E  
                          u270_20 0748                            u262_20 06E7                            u254_21 0F94  
                          u246_21 0F1D                            u270_21 0746                            u262_21 06E6  
                          u190_25 0A09                            u255_20 0FE9                            u247_20 0F2F  
                          u239_20 0E3A                            u271_20 0749                            u263_20 0721  
                          u255_21 0FE8                            u247_21 0F2E                            u239_21 0E39  
                          u263_21 0720                            u191_25 0A10                            u247_25 0F2B  
                          u192_20 0A1C                            u256_20 0FFB                            u248_20 0F43  
                          u264_20 0725                            u192_21 0A1B                            u256_21 0FFA  
                          u248_21 0F42                            u264_21 0724                            u193_20 0BBB  
                          u249_20 0F49                            u265_20 0729                            u257_20 06B5  
                          u193_21 0BBA                            u249_21 0F48                            u265_21 0728  
                          u257_21 06B4                            u266_20 072F                            u258_20 06C3  
                          u266_21 072D                            u258_21 06C2                            u194_25 0BBF  
                          u195_20 0BCD                            u267_20 0730                            u259_20 06C9  
                          u195_21 0BCC                            u259_21 06C7                            u268_20 0737  
                          u268_21 0736                            u196_25 0BCE                            u380_27 0947  
                          u197_20 0BDE                            u189_20 0A02                            u269_20 073B  
                          u197_21 0BDD                            u189_21 0A01                            u269_21 073A  
                          u197_25 0BDA                            u198_25 0BE6                            u199_20 0BF2  
                          u199_21 0BF1                         ??_Lcd_Cmd 00E3                            _SPBRGH 009A  
                          _SSPADD 0093                            _TRISC3 043B                            _TRISC4 043C  
                          _SSPCON 0014                            _SSPBUF 0013                            _HS_val 0046  
                          _HS_str 00D8                     i1sprintf@flag 0030                  __end_of_binTodec 099F  
                   i1sprintf@prec 002D                            _PS_val 0055          _I2C_Master_RepeatedStart 08AD  
               __end_ofi1_Lcd_Cmd 0950                            ___bmul 0921                            ___wmul 0A21  
                       ??_adcRead 0072                         ??___lldiv 00EA                         ??___lwdiv 00E6  
                       ??___lwmod 00EE                  __end_of_initTmr0 0E2C                   initAdc@vref_neg 00E3  
                 initAdc@vref_pos 00E2                         ??_initAdc 00E4                 __end_ofi1___lwdiv 0BF7  
               __end_ofi1___lwmod 0B70                         ??_isdigit 00E2                         ??_percent 007E  
                          saved_w 007E                         ??_sprintf 0193                   Lcd_Set_Cursor@a 00E8  
                 Lcd_Set_Cursor@b 00E5                   Lcd_Set_Cursor@y 00EA                   Lcd_Set_Cursor@z 00E9  
               __end_ofi1_isdigit 090D           __end_of__initialization 0041                 __end_ofi1_sprintf 1000  
               __end_of_Lcd_Clear 08E1               ___bmul@multiplicand 00E2                    __pcstackCOMMON 0070  
                    initAdc@adc_s 00E6                     __end_of_adcGo 0969                      __pidataBANK0 07FC  
                  _usartDataWrite 09BC                     __end_of_setup 0A72                         ?i1___wmul 0070  
                  _Lcd_Set_Cursor 0D7E                    _OPTION_REGbits 0081                       i1sprintf@ap 002C  
                     i1sprintf@sp 0033                           ??_adcGo 00E2                         ?_Lcd_Init 0070  
                       ?_Lcd_Port 0070                      sprintf@width 019B                           ??_setup 00E2  
                      __pbssBANK0 003C                        __pbssBANK1 00A0                        __pbssBANK3 01A1  
                      __pmaintext 0045            __end_of_usartDataWrite 09DA                           ?___bmul 00E2  
                         ?___wmul 00E2                  percent@water_val 0022                        __pintentry 0004  
          __end_of_Lcd_Set_Cursor 0DD5                        ??i1___wmul 0074                      ??i1_Lcd_Port 0070  
                       ?_binTodec 0070                        ??_Lcd_Init 00E5                        ??_Lcd_Port 00E2  
                         _SSPCON2 0091                           _HS_flag 004E                           _SSPSTAT 0094  
                         _RTC_hor 003C                           _RTC_min 003E                           _RTC_sec 0040  
                      __stringtab 0800                    i1sprintf@width 0031                    _Lcd_Write_Char 0B70  
                         _Lcd_Cmd 099F                         ?_initTmr0 00E2                   ?_usartDataWrite 0070  
              __end_ofi1_Lcd_Port 09FC                           _adcRead 08E1                           ___lldiv 0758  
                         ___lwdiv 0C3D                           ___lwmod 07C0                   ?_Lcd_Set_Cursor 00E5  
                         __ptext1 0969                           __ptext2 09BC                           __ptext3 04BF  
                         __ptext4 090D                           __ptext5 0A21                           __ptext6 07C0  
                         __ptext7 0C3D                           __ptext8 0A48                           __ptext9 0DD5  
                         _initAdc 0C83                           _dpowers 0810                 i1___lwdiv@divisor 0076  
                         _isdigit 090D                 i1___lwdiv@counter 007D                        ??_binTodec 00E6  
                         _percent 0A72                           _sprintf 04BF                           clrloop0 08A6  
               __end_of_tmr0Reset 08A5            __end_of_Lcd_Write_Char 0BB3              end_of_initialization 0041  
      ??_I2C_Master_RepeatedStart 00E2                        ??_initTmr0 00E4                   ___lldiv@divisor 00E2  
                 ___lldiv@counter 00EF                         _RCSTAbits 0018                  I2C_Master_Init@c 0190  
                I2C_Master_Read@a 00E2                         Lcd_Port@a 00E2             i1___wmul@multiplicand 0072  
                       i1_Lcd_Cmd 0938                         _PORTBbits 0006                         _PORTDbits 0008  
                       _TRISCbits 0087                         i1___lwdiv 0BB3                         i1___lwmod 0B34  
                 ?_Lcd_Write_Char 0070                 Lcd_Write_String@a 00E7                 Lcd_Write_String@i 00EC  
                       _TXSTAbits 0098                         i1_isdigit 08FB                         i1_sprintf 0E2C  
                       _Lcd_Clear 08D4                    __end_of___bmul 0938                    __end_of___wmul 0A48  
                      ?i1_Lcd_Cmd 0070                  _Lcd_Write_String 0CD3                       _BAUDCTLbits 0187  
               i1___lwmod@divisor 0020                 i1___lwmod@counter 0025               start_initialization 0015  
                  percent@air_val 0024                       __end_of_isr 0758                 _usartInitTransmit 0969  
                      ?i1___lwdiv 0076                        ?i1___lwmod 0020                ?_usartInitTransmit 0070  
               ??_I2C_Master_Init 0194                 ??_I2C_Master_Read 00E4                 ??_I2C_Master_Wait 00E2  
               ??_I2C_Master_Stop 00E2                        ?i1_isdigit 0070                      i1sprintf@val 002E  
             ??_usartInitTransmit 00E2                        ?i1_sprintf 0026                        ?_Lcd_Clear 0070  
                        ??___bmul 00E3                     ??_initOscFreq 00E2                          ??___wmul 00E6  
                     __pdataBANK0 0055                   Lcd_Write_Char@a 00E6                   Lcd_Write_Char@y 00E5  
       __end_of_usartInitTransmit 0983                         ___latbits 0002                     __pcstackBANK0 0020  
                   __pcstackBANK1 00E2                     __pcstackBANK3 0190                      _isdigit$1515 00E2  
                        ?_Lcd_Cmd 0070                       sprintf@flag 019A                  ??_usartDataWrite 00E2  
                     sprintf@prec 0197                  _I2C_Master_Start 08B6                  _I2C_Master_Write 08C8  
                      percent@val 0020                  ___lwdiv@dividend 00E4                  ??_Lcd_Set_Cursor 00E6  
                        ?_adcRead 0070                          ?___lldiv 00E2                          ?___lwdiv 00E2  
                        ?___lwmod 00EA                       ??i1_Lcd_Cmd 0071                         __pstrings 0800  
                        ?_initAdc 00E2               __end_of_initOscFreq 0AFE                          ?_isdigit 0070  
                        ?_percent 0020                  ___lwdiv@quotient 00E8                       ??i1___lwdiv 007A  
                     ??i1___lwmod 0024                          ?_sprintf 0190                    i1_isdigit$1515 0070  
               interrupt_function 0004                    ___wmul@product 00E6                          _IOCBbits 0096  
                       _tmr0Reset 089F                       ??i1_isdigit 0070                         clear_ram0 08A5  
                        _PIE1bits 008C                         _send_cont 0051                 usartDataWrite@msg 00E5  
                        Lcd_Cmd@a 00E4                          _PIR1bits 000C                         _temp_flag 004A  
                     ??i1_sprintf 0029                       ??_Lcd_Clear 0073                        _ADCON0bits 001F  
                     __stringbase 080F                        _ADCON1bits 009F                 ___wmul@multiplier 00E2  
                        i1___wmul 09FC                  ??_Lcd_Write_Char 00E3                         _spst_flag 004B  
                        _Lcd_Init 0D27                          _Lcd_Port 0AFE               I2C_Master_Read@temp 00E6  
        __end_of_Lcd_Write_String 0D27                        ?_tmr0Reset 0070                       _initOscFreq 0ACB  
       ?_I2C_Master_RepeatedStart 0070                __end_of__stringtab 0810                       binTodec@num 00E9  
                      sprintf@val 0198                   _I2C_Master_Init 0BF7                   _I2C_Master_Read 0A9D  
                        _binTodec 0983                   _I2C_Master_Wait 08EE                   _I2C_Master_Stop 08BF  
                 ___lwdiv@divisor 00E2                   ___lwdiv@counter 00E7                          __ptext10 0ACB  
                        __ptext11 0C83                          __ptext20 0AFE                          __ptext12 0983  
                        __ptext21 08C8                          __ptext13 0921                          __ptext30 0E2C  
                        __ptext22 08BF                          __ptext14 0950                          __ptext31 08FB  
                        __ptext23 08B6                          __ptext15 0CD3                          __ptext40 09DA  
                        __ptext32 0B34                          __ptext24 08AD                          __ptext16 0B70  
                        __ptext33 089F                          __ptext25 0A9D                          __ptext17 0D7E  
                        __ptext34 0A72                          __ptext26 08EE                          __ptext18 0D27  
                        __ptext35 09FC                          __ptext27 0BF7                          __ptext19 099F  
                        __ptext36 0BB3                          __ptext28 0758                          __ptext37 08E1  
                        __ptext29 06B1                          __ptext38 08D4                          __ptext39 0938  
              i1___lwdiv@dividend 0078                          _initTmr0 0DD5                       i1Lcd_Port@a 0070  
                        _msg_flag 0050                          _temp_dec 00A0                          _temp_str 00C4  
                        _response 00A2                 initTmr0@prescaler 00E2                          _spst_str 01A1  
              i1___lwdiv@quotient 007B          __end_of_I2C_Master_Start 08BF          __end_of_I2C_Master_Write 08D4  
                      _INTCONbits 000B                          isdigit@c 00E3                Lcd_Write_Char@temp 00E4  
                        intlevel1 0000                         sprintf@ap 0196                         sprintf@sp 019E  
                ___lwmod@dividend 00EC                  ___lldiv@dividend 00E6                       ??_tmr0Reset 0070  
                      i1Lcd_Cmd@a 0072                         stringcode 080A                        _OSCCONbits 008F  
         __end_of_I2C_Master_Init 0C3D           __end_of_I2C_Master_Read 0ACB           __end_of_I2C_Master_Wait 08FB  
         __end_of_I2C_Master_Stop 08C8                Lcd_Set_Cursor@temp 00EB                   initOscFreq@freq 00E4  
                     _temperatura 0042                          sprintf@c 019D                          sprintf@f 0190  
                ___lldiv@quotient 00EB                 I2C_Master_Write@d 00E2                   ___lwmod@divisor 00EA  
                 ___lwmod@counter 00EF                        i1_Lcd_Port 09DA                          stringdir 080A  
                        stringtab 0800                       _SSPCON2bits 0091                       _HS_flag_str 00CE  
                      _SSPCONbits 0014                        _HS_percent 004F  
